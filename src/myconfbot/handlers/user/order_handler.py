# src/myconfbot/handlers/user/order_handler.py

import logging
import os
from datetime import datetime, timedelta
from telebot import types
from telebot.types import Message, CallbackQuery

from src.myconfbot.handlers.user.base_user_handler import BaseUserHandler
from src.myconfbot.handlers.user.order_constants import OrderConstants
from src.myconfbot.handlers.user.order_states import OrderStatesManager
from src.myconfbot.handlers.user.order_product_viewer import OrderProductViewer
from src.myconfbot.handlers.user.order_processor import OrderProcessor

logger = logging.getLogger(__name__)

class OrderHandler(BaseUserHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.order_states = OrderStatesManager(self.states_manager, bot)
        self.photos_dir = OrderConstants.PHOTOS_DIR
        self.product_viewer = OrderProductViewer(bot, db_manager, self.photos_dir)
        self.order_processor = OrderProcessor(bot, db_manager, self.order_states)

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self._register_debug_handlers()

    def _register_debug_handlers(self):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        @self.bot.message_handler(
            func=lambda message: (
                not message.from_user.is_bot and
                self.order_states.is_in_order_process(message.from_user.id) and
                message.content_type == 'text'
            )
        )
        def handle_order_message(message: Message):
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞: '{message.text}'")
            self._handle_order_message(message)

    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        self._register_order_callbacks()
        self._register_order_message_handlers()
    
    def _register_order_callbacks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_back_quantity')
        def handle_back_to_quantity(callback: CallbackQuery):
            self._handle_back_to_quantity(callback)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_date_'))
        def handle_order_date(callback: CallbackQuery):
            self.order_processor.handle_date_selection(callback)

        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_custom_date')
        def handle_custom_date(callback: CallbackQuery):
            self.order_processor.handle_custom_date(callback)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_time_'))
        def handle_order_time(callback: CallbackQuery):
            self.order_processor.handle_time_selection(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_custom_time')
        def handle_custom_time(callback: CallbackQuery):
            self.order_processor.handle_custom_time(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_back_time')
        def handle_back_to_time(callback: CallbackQuery):
            self._handle_back_to_time(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_back_date')
        def handle_back_to_date(callback: CallbackQuery):
            self._handle_back_to_date(callback)

        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_back_delivery')
        def handle_back_to_delivery(callback: CallbackQuery):
            self._handle_back_to_delivery(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_delivery_continue')
        def handle_delivery_continue(callback: CallbackQuery):
            self.order_processor.process_delivery_continue(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_payment_continue')
        def handle_payment_continue(callback: CallbackQuery):
            self.order_processor.process_payment_continue(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_confirm_'))
        def handle_order_confirm(callback: CallbackQuery):
            self.order_processor.complete_order(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_cancel_'))
        def handle_order_cancel(callback: CallbackQuery):
            self.order_processor.cancel_order(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_back_categories')
        def handle_back_to_categories(callback: CallbackQuery):
            self._handle_back_to_categories(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_back_to_category_'))
        def handle_back_to_category(callback: CallbackQuery):
            self._handle_back_to_category(callback)

        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_back_payment')
        def handle_back_to_payment(callback: CallbackQuery):
            self._handle_back_to_payment(callback)

        @self.bot.callback_query_handler(func=lambda call: call.data == 'order_cancel_quantity')
        def handle_cancel_quantity(callback: CallbackQuery):
            self._handle_cancel_quantity(callback)




        # –û–ë–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_category_'))
        def handle_order_category(callback: CallbackQuery):
            self._handle_category_selection(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_product_'))
        def handle_order_product(callback: CallbackQuery):
            self._handle_product_selection(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_favorite_'))
        def handle_order_favorite(callback: CallbackQuery):
            self._handle_add_to_favorite(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_start_'))
        def handle_order_start(callback: CallbackQuery):
            self.order_processor.start_order_process(callback)
        
        # –≤—Ä–æ–¥–µ –Ω–µ –Ω—É–∂–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ —á—Ç–æ
        # @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_step_'))
        # def handle_order_step(callback: CallbackQuery):
        #     self._handle_order_step(callback)
      
        
    
    def _register_order_message_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —à–∞–≥–æ–≤ –∑–∞–∫–∞–∑–∞"""
        # –í–†–ï–ú–ï–ù–ù–û: –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        @self.bot.message_handler(func=lambda message: True)  # –í–†–ï–ú–ï–ù–ù–û –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø
        def debug_all_messages(message: Message):
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            in_order_process = self.order_states.is_in_order_process(user_id)
            order_data = self.order_states.get_order_data(user_id)
            
            logger.info(f"üîç ALL MESSAGES DEBUG: user_id={user_id}, text='{message.text}'")
            logger.info(f"üîç In order process: {in_order_process}")
            logger.info(f"üîç Order data: {order_data}")
            
            # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if in_order_process and order_data:
                logger.info(f"üéØ –ü–ï–†–ï–î–ê–ï–ú –í –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ö–ê–ó–ê!")
                self._handle_order_message(message)
            else:
                logger.info(f"üîç –ù–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

        
        # –í order_handler.py –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:

        @self.bot.message_handler(func=lambda message: message.text.isdigit())
        def force_quantity_handler(message: Message):
            """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            user_id = message.from_user.id
            order_data = self.order_states.get_order_data(user_id)
            
            logger.info(f"üîç FORCE HANDLER: user_id={user_id}, text='{message.text}'")
            logger.info(f"üîç Order data: {order_data}")
            
            if order_data and order_data.get('state') == 'order_quantity':
                logger.info(f"üéØ –í–´–ó–´–í–ê–ï–ú process_quantity_input –ß–ï–†–ï–ó FORCE HANDLER!")
                self.order_processor.process_quantity_input(message, order_data)
            else:
                logger.info(f"üîç –ù–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        
        # @self.bot.message_handler(
        #     func=lambda message: (
        #         not message.from_user.is_bot and
        #         self.order_states.is_in_order_process(message.from_user.id) and
        #         message.content_type == 'text'  # –¢–û–õ–¨–ö–û –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
        #     )
        # )
        # def handle_order_message(message: Message):
        #     logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞: '{message.text}'")
        #     logger.info(f"üîç User ID: {message.from_user.id}, Chat ID: {message.chat.id}")
            
        #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ —Ä–∞–∑
        #     user_id = message.from_user.id
        #     order_data = self.order_states.get_order_data(user_id)
        #     if order_data:
        #         logger.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {order_data.get('state')}")
        #     else:
        #         logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        #         return
        #     self._handle_order_message(message)


    def _handle_order_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞"""
        user_id = message.from_user.id
        order_data = self.order_states.get_order_data(user_id)
        
        if not order_data:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        current_state = order_data.get('state')
        logger.info(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {current_state}")
        logger.info(f"üîç –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message.text}'")
        
        if current_state == 'order_quantity':
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞")
            self.order_processor.process_quantity_input(message, order_data)
            
        elif current_state == 'order_date_custom':
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã")
            self.order_processor.process_custom_date_input(message, order_data)

        elif current_state == 'order_time_custom':  # –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏")
            self.order_processor.process_custom_time_input(message, order_data)

        elif current_state == 'order_notes':
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π")
            self.order_processor.process_notes_input(message, order_data)

        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            self.order_states.cancel_order(user_id)
    
    def start_order_process(self, message: Message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ - –ø–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = self.db_manager.get_all_categories()
        
        if not categories:
            self.bot.send_message(
                message.chat.id,
                "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                reply_markup=self._create_back_to_main_keyboard()
            )
            return
        
        keyboard = OrderConstants.create_categories_keyboard(
            categories=categories,
            back_callback="main_menu"
        )
        
        self.bot.send_message(
            message.chat.id,
            "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _send_products_media_group(self, chat_id, products):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        media_group = []
        file_objects = []
        
        try:
            for product in products:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                cover_photo_path = product.get('cover_photo_path')
                if cover_photo_path and os.path.exists(cover_photo_path):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                    short_desc = product['short_description'] or ''
                    if len(short_desc) > 25:
                        short_desc = short_desc[:25] + "..."
                    
                    caption = f"üéÇ {product['name']}\n{short_desc}"
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    file_obj = open(cover_photo_path, 'rb')
                    file_objects.append(file_obj)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    media_group.append(types.InputMediaPhoto(
                        file_obj,
                        caption=caption,
                        parse_mode='HTML'
                    ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
            if media_group:
                self.bot.send_media_group(chat_id, media_group)
                return True
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            for file_obj in file_objects:
                try:
                    file_obj.close()
                except:
                    pass
    
    def _handle_category_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            category_id = int(callback.data.replace('order_category_', ''))
            products = self.db_manager.get_products_by_category(category_id)
            
            if not products:
                self.bot.answer_callback_query(callback.id, "üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.db_manager.get_all_categories()
            category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.bot.send_message(
                callback.message.chat.id,
                f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}",
                parse_mode='HTML'
            )
            
            # –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
            for product in products:
                self._send_product_with_button(callback.message.chat.id, product)
            
            # –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="order_back_categories"
            ))
            
            self.bot.send_message(
                callback.message.chat.id,
                "‚¨ÜÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ:</b>",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def _send_product_with_button(self, chat_id, product):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            short_desc = product['short_description'] or ''
            if len(short_desc) > 60:
                short_desc = short_desc[:60] + "..."
            
            caption = f"üéÇ <b>{product['name']}</b>\n{short_desc}\nüí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±."
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ...",
                callback_data=f"order_product_{product['id']}"
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            cover_photo_path = product.get('cover_photo_path')
            if cover_photo_path and os.path.exists(cover_photo_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π
                with open(cover_photo_path, 'rb') as photo:
                    self.bot.send_photo(
                        chat_id,
                        photo,
                        caption=caption,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
                self.bot.send_message(
                    chat_id,
                    caption,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product['id']}: {e}")
    
    # def _handle_category_selection(self, callback: CallbackQuery):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    #     try:
    #         category_id = int(callback.data.replace('order_category_', ''))
    #         products = self.db_manager.get_products_by_category(category_id)
            
    #         if not products:
    #             self.bot.answer_callback_query(callback.id, "üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
    #             return
            
    #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    #         categories = self.db_manager.get_all_categories()
    #         category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
    #         keyboard = OrderConstants.create_products_keyboard(
    #             products=products,
    #             back_callback="order_back_categories"
    #         )
            
    #         self.bot.edit_message_text(
    #             chat_id=callback.message.chat.id,
    #             message_id=callback.message.message_id,
    #             text=f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
    #             parse_mode='HTML',
    #             reply_markup=keyboard
    #         )
            
    #         self.bot.answer_callback_query(callback.id)
            
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
    #         self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    def _handle_product_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        try:
            product_id = int(callback.data.replace('order_product_', ''))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            self.product_viewer.show_product_summary(callback.message, product_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = OrderConstants.create_product_actions_keyboard(
                product_id=product_id,
                back_callback=f"order_back_to_category_{self._get_product_category_id(product_id)}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            self.bot.send_message(
                callback.message.chat.id,
                "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞")
    
    def _handle_add_to_favorite(self, callback: CallbackQuery):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            product_id = int(callback.data.replace('order_favorite_', ''))
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.bot.answer_callback_query(
                callback.id, 
                "‚≠ê –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _handle_back_to_date(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
        try:
            user_id = callback.from_user.id
            order_data = self.order_states.get_order_data(user_id)
            
            if order_data:
                # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
                self.order_states.update_order_data(
                    user_id,
                    ready_time=None,
                    state='order_date'
                )
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ
                self.order_processor._ask_date(callback.message, order_data['product_id'])
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–∞—Ç–µ: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _handle_back_to_time(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            user_id = callback.from_user.id
            order_data = self.order_states.get_order_data(user_id)
            
            if order_data:
                self.order_states.set_order_step(user_id, 'order_time')
                self.order_processor._ask_time(callback.message)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")


    def _handle_back_to_categories(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.start_order_process(callback.message)
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _handle_back_to_category(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            category_id = int(callback.data.replace('order_back_to_category_', ''))
            products = self.db_manager.get_products_by_category(category_id)
            
            if not products:
                self.bot.answer_callback_query(callback.id, "üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.db_manager.get_all_categories()
            category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.bot.send_message(
                callback.message.chat.id,
                f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}",
                parse_mode='HTML'
            )
            
            # –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
            for product in products:
                self._send_product_with_button(callback.message.chat.id, product)
            
            # –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="order_back_categories"
            ))
            
            self.bot.send_message(
                callback.message.chat.id,
                "‚¨ÜÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ:</b>",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")


    def _handle_back_to_quantity(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            user_id = callback.from_user.id
            order_data = self.order_states.get_order_data(user_id)
            
            if order_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                self.order_states.update_order_data(
                    user_id,
                    state='order_quantity'
                )
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ
                self.order_processor._ask_quantity(callback.message, order_data['product_id'])
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _handle_back_to_delivery(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        try:
            user_id = callback.from_user.id
            order_data = self.order_states.get_order_data(user_id)
            
            if order_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –¥–æ—Å—Ç–∞–≤–∫–∏
                self.order_states.update_order_data(
                    user_id,
                    state='order_delivery_info'
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∑–∞–Ω–æ–≤–æ
                self.order_processor._ask_delivery(callback.message)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _handle_back_to_payment(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ"""
        try:
            user_id = callback.from_user.id
            order_data = self.order_states.get_order_data(user_id)
            
            if order_data:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ–ø–ª–∞—Ç—ã
                self.order_states.update_order_data(
                    user_id,
                    state='order_payment'
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–Ω–æ–≤–æ
                self.order_processor._ask_payment(callback.message, order_data['product_id'])
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _handle_cancel_quantity(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            user_id = callback.from_user.id
            self.order_states.cancel_order(user_id)
            
            self.bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            self.start_order_process(callback.message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")
        
    def _get_product_category_id(self, product_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        product = self.db_manager.get_product_by_id(product_id)
        return product['category_id'] if product else 0
    
    def _create_back_to_main_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        ))
        return keyboard
    
  