import logging
import os
from typing import Optional

from telebot import types
from telebot.types import Message, CallbackQuery
from src.myconfbot.utils.content_manager import ContentManager
from src.myconfbot.handlers.user.base_user_handler import BaseUserHandler


class MainHandler(BaseUserHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.content_manager = ContentManager()
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self._register_start_handlers()
        self._register_menu_handlers()
        self._register_admin_buttons_handlers()
        self._register_content_handlers()
        self._register_state_handlers()
    
    def _register_start_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ /start –∏ /help"""
        @self.bot.message_handler(commands=['start', 'help'])
        def handle_start(message: Message):
            self._handle_start_command(message)
    
    def _register_menu_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
        @self.bot.message_handler(commands=['menu'])
        def show_menu(message: Message):
            self._show_menu_command(message)
        
        @self.bot.message_handler(func=lambda message: message.text == 'üê± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        def show_my_profile(message: Message):
            self._show_my_profile(message)
    
    def _register_admin_buttons_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        admin_buttons = ['üì¶ –ó–∞–∫–∞–∑—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
        
        @self.bot.message_handler(func=lambda message: message.text in admin_buttons)
        def handle_admin_buttons(message: Message):
            self._handle_admin_buttons(message)
    
    def _register_content_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        @self.bot.message_handler(func=lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
        def send_contacts(message: Message):
            self._send_contacts(message)
        
        @self.bot.message_handler(func=lambda message: message.text == 'üíº –£—Å–ª—É–≥–∏')
        def send_services(message: Message):
            self._send_services(message)
        
        @self.bot.message_handler(func=lambda message: message.text == 'üìñ –†–µ—Ü–µ–ø—Ç—ã')
        def show_recipes(message: Message):
            self._show_recipes(message)
    
    def _register_state_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_user_state(message.from_user.id) is not None
        )
        def handle_state_message(message: Message):
            self._handle_user_state(message)
    
    def _handle_start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        full_name = message.from_user.first_name
        username = message.from_user.username
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            # –±–µ–∑ —Ä–∞–±–æ—Ç—ã —Å ORM –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
            user_info = self.db_manager.get_user_info(user_id)
            
            if user_info:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                status = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user_info['is_admin'] else "–∫–ª–∏–µ–Ω—Ç"
                welcome_msg = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_info['full_name']}! üëã\n–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å. –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}!"
                self.bot.send_message(chat_id, welcome_msg)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                markup = self.show_main_menu(chat_id, user_info['is_admin'])
                self.bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_admin = user_id in self.config.admin_ids
                success = self.db_manager.add_user(
                    telegram_id=user_id,
                    full_name=full_name,
                    telegram_username=username,
                    is_admin=is_admin
                )
                
                if success:
                    if is_admin:
                        self.bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë")
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        self.states_manager.set_user_state(user_id, {'state': 'awaiting_phone'})
                        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
                    else:
                        welcome_msg = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {full_name}! üòä"
                        self.bot.send_message(chat_id, welcome_msg)
                        markup = self.show_main_menu(chat_id, False)
                        self.bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
                else:
                    self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            welcome_text = self.content_manager.get_content('welcome.md')
            if not welcome_text:
                welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞!"
            
            self.send_formatted_message(chat_id, welcome_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}", exc_info=True)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _show_menu_command(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_id = message.from_user.id
        is_admin = self.is_admin(user_id)
        markup = self.show_main_menu(message.chat.id, is_admin)
        self.bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    
    def _handle_admin_buttons(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if not self.is_admin(user_id):
            self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if message.text == 'üì¶ –ó–∞–∫–∞–∑—ã':
            self._show_orders_management(message)
        elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            self._show_statistics(message)
        elif message.text == 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
            self._show_management_panel(message)
    
    def _show_orders_management(self, message: Message):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_active"),
            types.InlineKeyboardButton("üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_all")
        )
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin_orders_change_status"),
            types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_stats")
        )
        
        self.bot.send_message(message.chat.id, "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    def _show_statistics(self, message: Message):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_general"),
            types.InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è", callback_data="admin_stats_financial")
        )
        keyboard.add(
            types.InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è", callback_data="admin_stats_clients"),
            types.InlineKeyboardButton("üéÇ –¢–æ–≤–∞—Ä–Ω–∞—è", callback_data="admin_stats_products")
        )
        
        self.bot.send_message(message.chat.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    
    def _show_management_panel(self, message: Message):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è", callback_data="admin_manage_products"),
            types.InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç—ã", callback_data="admin_manage_recipes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏", callback_data="admin_manage_services"),
            types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="admin_manage_contacts")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_manage_content"),
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_manage_users")
        )
        
        self.bot.send_message(message.chat.id, "üè™ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    
    def _send_contacts(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contacts_text = self.content_manager.get_content('contacts.md')
        if not contacts_text:
            contacts_text = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        self.send_formatted_message(message.chat.id, contacts_text)
    
    def _send_services(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö"""
        services_text = self.content_manager.get_content('services.md')
        if not services_text:
            services_text = "üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        self.send_formatted_message(message.chat.id, services_text)
    
    def _show_recipes(self, message: Message):
        """–ü–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üç∞ –¢–æ—Ä—Ç—ã", callback_data="recipes_cakes"),
            types.InlineKeyboardButton("üßÅ –ö–∞–ø–∫–µ–π–∫–∏", callback_data="recipes_cupcakes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üç™ –ü–µ—á–µ–Ω—å–µ", callback_data="recipes_cookies"),
            types.InlineKeyboardButton("üéÇ –°–µ–∑–æ–Ω–Ω—ã–µ", callback_data="recipes_seasonal")
        )
        
        self.bot.send_message(message.chat.id, "üìñ –ù–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    
    def _handle_user_state(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_user_state(user_id)
        
        if not user_state:
            return
        
        state = user_state.get('state')
        
        if state == 'awaiting_phone':
            self._handle_phone_input(message, user_state)
        elif state == 'awaiting_address':
            self._handle_address_input(message, user_state)
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    def _handle_phone_input(self, message: Message, user_state: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        phone = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not any(char.isdigit() for char in phone) or len(phone) < 5:
            self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state['phone'] = phone
        user_state['state'] = 'awaiting_address'
        self.states_manager.set_user_state(user_id, user_state)
        
        self.bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    
    def _handle_address_input(self, message: Message, user_state: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        address = message.text.strip()
        
        if len(address) < 5:
            self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = self.db_manager.update_user_info(
                user_id, 
                phone=user_state.get('phone'), 
                address=address
            )
            
            if success:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.states_manager.clear_user_state(user_id)
                
                success_msg = (
                    f"–û—Ç–ª–∏—á–Ω–æ! üëë\n"
                    f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π!"
                )
                self.bot.send_message(chat_id, success_msg)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                markup = self.show_main_menu(chat_id, True)
                self.bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
            else:
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}", exc_info=True)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _show_my_profile(self, message: Message):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º ProfileHandler"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from .profile_handlers import ProfileHandler
        profile_handler = ProfileHandler(self.bot, self.config, self.db_manager)
        profile_handler.show_my_profile(message)