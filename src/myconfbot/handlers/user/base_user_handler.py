# src\myconfbot\handlers\user\base_user_handler.py

import logging
from abc import ABC, abstractmethod
from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from src.myconfbot.config import Config
from src.myconfbot.utils.database import DatabaseManager
from src.myconfbot.handlers.shared.states_manager import StatesManager
from src.myconfbot.services.user_service import UserService
from src.myconfbot.services.auth_service import AuthService


class BaseUserHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self, bot: TeleBot, config: Config, db_manager: DatabaseManager):
        self.bot = bot
        self.config = config
        self.db_manager = db_manager
        self.states_manager = StatesManager()
        self.auth_service = AuthService(db_manager)
        self.user_service = UserService(db_manager)
        self.logger = logging.getLogger(__name__)
    
    @abstractmethod
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ—Ç–æ–º–∫–∞—Ö"""
        pass
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return self.auth_service.is_admin(user_id)
    
    def show_main_menu(self, chat_id: int, is_admin: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        from telebot import types
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
        buttons = [
            'üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è',
            'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã',
            '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
            'üìñ –†–µ—Ü–µ–ø—Ç—ã', 
            'üíº –£—Å–ª—É–≥–∏',
            'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã',
            'üê± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
        ]
        
        if is_admin:
            buttons.extend([
                'üì¶ –ó–∞–∫–∞–∑—ã',
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
            ])
        
        markup.add(*[types.KeyboardButton(btn) for btn in buttons])
        return markup
    
    def send_formatted_message(self, chat_id: int, content: str, parse_mode: str = 'MarkdownV2'):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            content: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        try:
            self.bot.send_message(chat_id, content, parse_mode=parse_mode)
        except Exception as e:
            if "parse entities" in str(e):
                # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                self.bot.send_message(chat_id, error_msg)
                self.bot.send_message(chat_id, content)  # plain text
            else:
                raise