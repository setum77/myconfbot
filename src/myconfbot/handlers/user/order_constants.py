# src/myconfbot/handlers/user/order_constants.py

from telebot import types
from src.myconfbot.utils.database import db_manager

class OrderConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∑–∞–∫–∞–∑–æ–≤"""

    # –ü—É—Ç–∏
    PHOTOS_DIR = "data/order/"
    
    # Callback –ø—Ä–µ—Ñ–∏–∫—Å—ã
    ORDER_PREFIX = "order_"
    ORDER_CATEGORY_PREFIX = "order_category_"
    ORDER_PRODUCT_PREFIX = "order_product_"
    ORDER_ACTION_PREFIX = "order_action_"
    ORDER_STEP_PREFIX = "order_step_"
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    ORDER_STATES = {
        'SELECTING_QUANTITY': 'order_quantity',
        'SELECTING_DATE': 'order_date', 
        'SELECTING_DELIVERY': 'order_delivery',
        'SELECTING_PAYMENT': 'order_payment',
        'ADDING_NOTES': 'order_notes',
        'CONFIRMING': 'order_confirm'
    }
    
    @staticmethod
    def create_categories_keyboard(categories, back_callback="main_menu"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        buttons = []
        for category in categories:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products_count = len(db_manager.get_products_by_category(category['id']))
            button_text = f"üìÅ {category['name']} ({products_count})"
            buttons.append(types.InlineKeyboardButton(
                button_text,
                callback_data=f"order_category_{category['id']}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buttons), 2):
            row_buttons = buttons[i:i + 2]
            keyboard.add(*row_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data=back_callback
        ))
        
        return keyboard
        
        
        # # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥–≤–∞ —Ä—è–¥–∞
        # buttons = []
        # for category in categories:
        #     button = types.InlineKeyboardButton(
        #         f"üìÅ {category['name']}",
        #         callback_data=f"order_category_{category['id']}"
        #     )
        #     buttons.append(button)
        
        # # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–≤–∞ –≤ —Ä—è–¥
        # for i in range(0, len(buttons), 2):
        #     if i + 1 < len(buttons):
        #         keyboard.add(buttons[i], buttons[i + 1])
        #     else:
        #         keyboard.add(buttons[i])
        
        # # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        # keyboard.add(types.InlineKeyboardButton(
        #     "üîô –ù–∞–∑–∞–¥",
        #     callback_data=back_callback
        # ))
        
        # return keyboard
    
    @staticmethod
    def create_products_keyboard(products, back_callback):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        for product in products:
            # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤
            short_desc = product['short_description'] or ''
            if len(short_desc) > 25:
                short_desc = short_desc[:25] + "..."
            
            button_text = f"üéÇ {product['name']} - {short_desc}"
            keyboard.add(types.InlineKeyboardButton(
                button_text,
                callback_data=f"order_product_{product['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=back_callback
        ))
        
        return keyboard
    
    @staticmethod
    def create_product_actions_keyboard(product_id, back_callback):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            types.InlineKeyboardButton(
                "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"order_favorite_{product_id}"
            ),
            types.InlineKeyboardButton(
                "üõí –ó–∞–∫–∞–∑–∞—Ç—å",
                callback_data=f"order_start_{product_id}"
            )
        )
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data=back_callback
        ))
        
        return keyboard
    
    @staticmethod
    def create_order_confirmation_keyboard(order_data_id):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"order_confirm_{order_data_id}"
            ),
            types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"order_cancel_{order_data_id}"
            )
        )
        
        return keyboard
    
    @staticmethod
    def create_back_keyboard(back_callback):
        """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data=back_callback
        ))
        return keyboard