# src/myconfbot/handlers/user/order_processor.py

import logging
import os
from datetime import datetime, timedelta
from telebot import types
from telebot.types import Message, CallbackQuery

from src.myconfbot.handlers.user.order_constants import OrderConstants

logger = logging.getLogger(__name__)

class OrderProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ - —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ 8 —à–∞–≥–æ–≤"""
    
    def __init__(self, bot, db_manager, order_states):
        self.bot = bot
        self.db_manager = db_manager
        self.order_states = order_states
    
    def start_order_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ - –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        try:
            product_id = int(callback.data.replace('order_start_', ''))
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product = self.db_manager.get_product_by_id(product_id)
            
            if not product:
                self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
            if not product['is_available']:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
                    callback_data=f"order_back_to_category_{product['category_id']}"
                ))
                
                self.bot.send_message(
                    callback.message.chat.id,
                    "‚ùå <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</b>\n\n"
                    "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üç∞",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                self.bot.answer_callback_query(callback.id)
                return
            
            # –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ 
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —Å —à–∞–≥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
            self._start_order_creation(user_id, product_id, callback.message)
            # self.order_states.start_order(user_id, product_id, callback.message)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2: –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            #self._ask_quantity(callback.message, product_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞")

    def _start_order_creation(self, user_id: int, product_id: int, message: Message):
        """–ù–∞—á–∞–ª–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)"""
        logger.info(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —Å —à–∞–≥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.order_states.start_order(user_id, product_id)

        # –ü–†–û–í–ï–†–Ø–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        order_data = self.order_states.get_order_data(user_id)
        logger.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ start_order: {order_data}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2: –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self._ask_quantity(message, product_id)
    
    def _ask_quantity(self, message: Message, product_id: int):
        """–®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è
        measurement_unit = product['measurement_unit'] or '—à—Ç'
        is_weight_based = '–≥—Ä–∞–º–º' in measurement_unit.lower()
        
        question = f"üéÇ <b>{product['name']}</b>\n\n"
        
        if is_weight_based:
            question += f"‚öñÔ∏è <b>–¢–æ–≤–∞—Ä –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø–æ –≤–µ—Å—É</b>\n"
            question += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±. –∑–∞ {product['quantity']} {measurement_unit}\n\n"
            #question += " \n\n" 
            question += "‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:</b>"
        else:
            question += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±. –∑–∞ {product['quantity']} {measurement_unit}\n\n"
            #question += " \n\n"            
            question += "‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>"
        
        keyboard = OrderConstants.create_back_keyboard("order_cancel_quantity")
        
        self.bot.send_message(
            message.chat.id,
            question,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.order_states.set_order_step(message.from_user.id, 'order_quantity')

    def process_quantity_input(self, message: Message, order_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞ - –®–∞–≥ 2"""
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞ - –®–∞–≥ 2")
        if message.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞: {message.from_user.id}")
            return

        try:
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/–≤–µ—Å–∞: {message.text}")

            product_id = order_data['product_id']
            product = self.db_manager.get_product_by_id(product_id)
            
            if not product:
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.order_states.cancel_order(message.from_user.id)
                return
            
            measurement_unit = product['measurement_unit'] or '—à—Ç'
            is_weight_based = '–≥—Ä–∞–º–º' in measurement_unit.lower()

            logger.info(f"üîç –¢–æ–≤–∞—Ä: {product['name']}, –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {measurement_unit}, –ø–æ –≤–µ—Å—É: {is_weight_based}")
            
            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
            input_value = message.text.strip()
            logger.info(f"üîç –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{input_value}'")

            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
            if is_weight_based:
                weight_grams = float(message.text)
                logger.info(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω –≤–µ—Å: {weight_grams} –≥")

                if weight_grams <= 0:
                    self.bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
                self.order_states.update_order_data(
                    message.from_user.id,
                    weight_grams=weight_grams,
                    state='order_date'
                )
            else:
                quantity = float(message.text)
                if quantity <= 0:
                    self.bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
                    return
                                               
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                self.order_states.update_order_data(
                    message.from_user.id,
                    quantity=quantity,
                    state='order_date'
                )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3: –î–∞—Ç–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            self._ask_date(message, product_id)
            
        except ValueError:
            self.bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    def _ask_date(self, message: Message, product_id: int):
        """–®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - –∑–∞–≤—Ç—Ä–∞
        min_date = datetime.now() + timedelta(days=1)
        
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
        for i in range(1, 6):
            date = min_date + timedelta(days=i)
            keyboard.add(types.InlineKeyboardButton(
                date.strftime("%d.%m"),
                callback_data=f"order_date_{date.strftime('%Y-%m-%d')}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞",
            callback_data="order_custom_date"
        ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="order_back_quantity"
        ))
        
        self.bot.send_message(
            message.chat.id,
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - –∑–∞–≤—Ç—Ä–∞.",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def handle_date_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        try:
            date_str = callback.data.replace('order_date_', '')
            selected_date = datetime.strptime(date_str, '%Y-%m-%d')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            self.order_states.update_order_data(
                callback.from_user.id,
                ready_date=selected_date.isoformat(),
                state='order_time'  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 4: –í—Ä–µ–º—è
            self._ask_time(callback.message)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")

    # –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ process_custom_date_input –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    def process_custom_date_input(self, message: Message, order_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
        try:
            date_str = message.text.strip()
            selected_date = datetime.strptime(date_str, '%d.%m.%Y')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            min_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            if selected_date < min_date:
                self.bot.send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            self.order_states.update_order_data(
                message.from_user.id,
                ready_date=selected_date.isoformat(),
                state='order_time'  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 4: –í—Ä–µ–º—è
            self._ask_time(message)
            
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)"
            )

    def handle_custom_date(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        self.order_states.set_order_step(callback.from_user.id, 'order_date_custom')
        
        keyboard = OrderConstants.create_back_keyboard("order_back_date")
        
        self.bot.send_message(
            callback.message.chat.id,
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ - –∑–∞–≤—Ç—Ä–∞.",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(callback.id)


    def _ask_time(self, message: Message):
        """–®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        times = ["09:00", "10:00", "11:00", "12:00", "13:00", "14:00", 
                "15:00", "16:00", "17:00", "18:00", "19:00", "20:00"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        for i in range(0, len(times), 3):
            row_times = times[i:i + 3]
            row_buttons = []
            for time in row_times:
                row_buttons.append(types.InlineKeyboardButton(
                    time,
                    callback_data=f"order_time_{time}"
                ))
            keyboard.add(*row_buttons)
        
        keyboard.add(types.InlineKeyboardButton(
            "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
            callback_data="order_custom_time"
        ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–µ",
            callback_data="order_back_date"
        ))
        
        self.bot.send_message(
            message.chat.id,
            "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b>\n\n"
            "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def handle_time_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        try:
            time_str = callback.data.replace('order_time_', '')
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            from datetime import datetime
            try:
                datetime.strptime(time_str, '%H:%M')
            except ValueError:
                self.bot.answer_callback_query(callback.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
            self.order_states.update_order_data(
                callback.from_user.id,
                ready_time=time_str,
                state='order_delivery'
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 5: –î–æ—Å—Ç–∞–≤–∫–∞
            self._ask_delivery(callback.message)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")

    def handle_custom_time(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        self.order_states.set_order_step(callback.from_user.id, 'order_time_custom')
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏",
            callback_data="order_back_time"
        ))
        
        self.bot.send_message(
            callback.message.chat.id,
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ 14:30 - –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ\n"
            "‚Ä¢ 09:00 - –¥–µ–≤—è—Ç—å —É—Ç—Ä–∞\n"
            "‚Ä¢ 18:45 - –±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —Å–µ–º—å –≤–µ—á–µ—Ä–∞\n\n"
            "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 09:00 –¥–æ 21:00",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(callback.id)

    def process_custom_time_input(self, message: Message, order_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            time_str = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            from datetime import datetime
            try:
                datetime.strptime(time_str, '%H:%M')
            except ValueError:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00 - 21:00)
            hour = int(time_str.split(':')[0])
            if hour < 9 or hour > 21:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ä–∞–±–æ—á–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å 09:00 –¥–æ 21:00"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
            self.order_states.update_order_data(
                message.from_user.id,
                ready_time=time_str,
                state='order_delivery'
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 5: –î–æ—Å—Ç–∞–≤–∫–∞
            self._ask_delivery(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def process_delivery_continue(self, callback: CallbackQuery):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        self.order_states.update_order_data(
            callback.from_user.id,
            delivery_type="—Å–∞–º–æ–≤—ã–≤–æ–∑",
            state='order_payment'
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 5: –û–ø–ª–∞—Ç–∞
        order_data = self.order_states.get_order_data(callback.from_user.id)
        self._ask_payment(callback.message, order_data['product_id'])
        self.bot.answer_callback_query(callback.id)

    def _ask_payment(self, message: Message, product_id: int):
        """–®–∞–≥ 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ"""

        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        prepayment_conditions = product.get('prepayment_conditions', '')
        payment_message = "üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ</b>\n\n"
        
        if "50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞" in prepayment_conditions:
            payment_message += (
                "–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 50%. "
                "–û—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞ ‚Äî –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ. \n\n–û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, "
                "–æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª."
            )
        elif "100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞" in prepayment_conditions:
            payment_message += (
                "–í–∞—à –∑–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω—ë–º –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à—É —Å–ª–∞–¥–æ—Å—Ç—å ‚Äî –∏ —Å–æ–æ–±—â–∏–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É. \n\n"
                "–û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª."
            )
        else:  # –ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞
            payment_message += (
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–æ–ø–ª–∞—Ç! \n\n"
                "–ü—Ä–æ—Å—Ç–æ –∑–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—Ç–µ. üéÅ"
            )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º",
            callback_data="order_payment_continue"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="order_back_delivery"
        ))
        
        self.bot.send_message(
            message.chat.id,
            payment_message,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def process_payment_continue(self, callback: CallbackQuery):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        self.order_states.set_order_step(callback.from_user.id, 'order_notes')
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 6: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        self._ask_notes(callback.message)
        self.bot.answer_callback_query(callback.id)

    def _ask_notes(self, message: Message):
        """–®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ –∑–∞–∫–∞–∑—É"""
        keyboard = OrderConstants.create_back_keyboard("order_back_payment")
        
        self.bot.send_message(
            message.chat.id,
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ –∑–∞–∫–∞–∑—É</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            "‚Ä¢ –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é\n"
            "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–ª–ª–µ—Ä–≥–∏–∏\n"
            "‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n\n"
            "‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç.",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def process_notes_input(self, message: Message, order_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π - –®–∞–≥ 6"""
        notes_text = message.text.strip()
        
        if notes_text != '-':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
            self.order_states.add_order_note(
                message.from_user.id,
                notes_text,
                is_admin=False
            )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 7: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        self.order_states.set_order_step(message.from_user.id, 'order_confirmation')
        self._show_order_summary(message, order_data)

    def _show_order_summary(self, message: Message, order_data: dict):
        """–®–∞–≥ 7: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        product = self.db_manager.get_product_by_id(order_data['product_id'])
        
        if not product:
            self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        measurement_unit = product['measurement_unit'] or '—à—Ç'
        is_weight_based = '–≥—Ä–∞–º–º' in measurement_unit.lower()
        
        if is_weight_based:
            weight_grams = order_data.get('weight_grams', 0)
            approximate_cost = float(product['price']) * weight_grams / float(product['quantity'])
            quantity_display = f"{weight_grams} –≥"
            cost_note = "  –°—Ç–æ–∏–º–æ—Å—Ç—å, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤—ã—à–µ, —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ "
            cost_note += "(–≤–µ—Å, –¥–µ–∫–æ—Ä, –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)\n\n"
            cost_note += "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π"
        else:
            quantity = order_data.get('quantity', 0)
            approximate_cost = float(product['price']) * quantity
            quantity_display = f"{quantity} {measurement_unit}"
            cost_note = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        prepayment_conditions = product.get('prepayment_conditions', '')
        if "–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞" in prepayment_conditions:
            payment_status = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É"
        else:
            payment_status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary = "üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
        summary += f"üéÇ <b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n"
        summary += f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity_display}\n"
        summary += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {approximate_cost:.2f} —Ä—É–±.{cost_note}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if 'ready_date' in order_data:
            ready_date = datetime.fromisoformat(order_data['ready_date'])
            date_str = ready_date.strftime('%d.%m.%Y')
            
            if 'ready_time' in order_data:
                time_str = order_data['ready_time']
                summary += f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {date_str} –≤ {time_str}\n"
            else:
                summary += f"üìÖ <b>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {date_str}\n"
        
        summary += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order_data.get('delivery_type', '—Å–∞–º–æ–≤—ã–≤–æ–∑')}\n"
        summary += f"üí≥ <b>–í–∏–¥ —Ä–∞—Å—á–µ—Ç–∞:</b> {prepayment_conditions or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        summary += f"üîÑ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {payment_status}\n"
        summary += f"üìä <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> –ù–æ–≤—ã–π\n"
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        notes = order_data.get('notes', [])
        if notes:
            user_notes = [note for note in notes if not note.get('is_admin', False)]
            if user_notes:
                summary += f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {user_notes[0]['text']}\n"
        
        summary += f"\n<b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        temp_order_id = f"temp_{message.from_user.id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        keyboard = OrderConstants.create_order_confirmation_keyboard(temp_order_id)
        
        self.bot.send_message(
            message.chat.id,
            summary,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def complete_order(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ - –®–∞–≥ 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        try:
            user_id = callback.from_user.id
            order_data = self.order_states.complete_order(user_id)
            
            if not order_data:
                self.bot.answer_callback_query(callback.id, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order_success = self._create_order_in_db(user_id, order_data)
            
            if order_success:
                self.bot.answer_callback_query(callback.id, "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")
                
                # –®–∞–≥ 8: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text="üéâ <b>–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.</b>\n\n"
                         "–í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∑–∞–∫–∞–∑–µ ‚Äî –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª:\n\n"
                         "üîπ 1. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Å–æ—Å—Ç–∞–≤, —Ü–µ–Ω–∞, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
                         "üîπ 2. –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Äî –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —ç—Ç–∞–ø–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
                         "üîπ 3. –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –Ω–∞–º–∏ –∏ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
                         "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üç∞üíõ",
                    parse_mode='HTML'
                )
                
                # TODO: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                
            else:
                self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

    def _create_order_in_db(self, user_id: int, order_data: dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
        try:
            product = self.db_manager.get_product_by_id(order_data['product_id'])
            
            if not product:
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            measurement_unit = product['measurement_unit'] or '—à—Ç'
            is_weight_based = '–≥—Ä–∞–º–º' in measurement_unit.lower()
            
            if is_weight_based:
                weight_grams = order_data.get('weight_grams', 0)
                total_cost = float(product['price']) * weight_grams / float(product['quantity'])
                quantity = None
            else:
                quantity = order_data.get('quantity', 0)
                total_cost = float(product['price']) * quantity
                weight_grams = None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            ready_at = None
            if 'ready_date' in order_data:
                ready_date = datetime.fromisoformat(order_data['ready_date'])
                
                if 'ready_time' in order_data:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    time_str = order_data['ready_time']
                    hour, minute = map(int, time_str.split(':'))
                    ready_at = ready_date.replace(hour=hour, minute=minute)
                else:
                    ready_at = ready_date

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            prepayment_conditions = product.get('prepayment_conditions', '')
            if "–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞" in prepayment_conditions:
                payment_status = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É"
            else:
                payment_status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
            
            order_db_data = {
                'user_id': user_id,
                'product_id': order_data['product_id'],
                'quantity': quantity,
                'weight_grams': weight_grams,
                'total_cost': total_cost,
                'delivery_type': order_data.get('delivery_type', '—Å–∞–º–æ–≤—ã–≤–æ–∑'),
                'payment_type': prepayment_conditions,
                'payment_status': payment_status,
                'admin_notes': '',
                'ready_at': ready_at.isoformat() if ready_at else None
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_id = self.db_manager.create_order_and_get_id(order_db_data)
            
            if order_id:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if 'notes' in order_data:
                    user_notes = [note for note in order_data['notes'] if not note.get('is_admin', False)]
                    if user_notes:
                        for note in user_notes:
                            self.db_manager.add_order_note(
                                order_id,
                                user_id,
                                note['text']
                            )
                
                return True
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ –ë–î: {e}")
            return False

    def cancel_order(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
        if callback.from_user.is_bot:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –æ—Ç –±–æ—Ç–∞: {callback.from_user.id}")
            return
        
        user_id = callback.from_user.id
        self.order_states.cancel_order(user_id)
        
        self.bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        
        self.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>",
            parse_mode='HTML'
        )