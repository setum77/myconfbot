# src/myconfbot/handlers/user/my_order_handler.py

import logging
from datetime import datetime
from telebot.types import Message, CallbackQuery

from src.myconfbot.handlers.user.base_user_handler import BaseUserHandler
from src.myconfbot.handlers.user.my_order_constants import MyOrderConstants

logger = logging.getLogger(__name__)

class MyOrderHandler(BaseUserHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self._register_message_handlers()
        self._register_callback_handlers()
    
    def _register_message_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
        def handle_my_orders(message: Message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'"""
            self.show_user_orders(message)
    
    def _register_callback_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('my_order_select_'))
        def handle_order_select(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
            self._show_order_details(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('my_order_status_'))
        def handle_order_status(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
            self._show_order_status(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('my_order_notes_'))
        def handle_order_notes(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∑–∞–∫–∞–∑–∞"""
            self._show_order_notes(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == 'my_order_back_to_list')
        def handle_back_to_list(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
            self._show_user_orders_from_callback(callback)
    
    def show_user_orders(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = message.from_user.id
            orders = self.db_manager.get_orders_by_user(user_id)
            
            if not orders:
                self.bot.send_message(
                    message.chat.id,
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                    "–°–æ–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è¬ª!",
                    reply_markup=MyOrderConstants.create_back_to_orders_keyboard()
                )
                return
            
            keyboard = MyOrderConstants.create_orders_keyboard(orders)
            
            self.bot.send_message(
                message.chat.id,
                "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _show_order_details(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        try:
            order_id = int(callback.data.replace('my_order_select_', ''))
            order_details = self._get_order_details(order_id)
            
            if not order_details:
                self.bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = self._format_order_summary(order_details)
            keyboard = MyOrderConstants.create_order_detail_keyboard(order_id)
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞")
    
    def _show_order_status(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞"""
        try:
            order_id = int(callback.data.replace('my_order_status_', ''))
            status_history = self._get_order_status_history(order_id)
            
            if not status_history:
                self.bot.answer_callback_query(callback.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            message_text = self._format_status_history(status_history)
            keyboard = MyOrderConstants.create_back_to_orders_keyboard()
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
    
    def _show_order_notes(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"""
        try:
            order_id = int(callback.data.replace('my_order_notes_', ''))
            order_notes = self.db_manager.get_order_notes(order_id)
            
            if not order_notes:
                message_text = (
                    "üí¨ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É</b>\n\n"
                    "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π.\n\n"
                    "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É."
                )
            else:
                message_text = self._format_order_notes(order_notes)
            
            keyboard = MyOrderConstants.create_back_to_orders_keyboard()
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π")
    
    def _show_user_orders_from_callback(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback"""
        try:
            user_id = callback.from_user.id
            orders = self.db_manager.get_orders_by_user(user_id)
            
            if not orders:
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                        "–°–æ–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è¬ª!",
                    parse_mode='HTML',
                    reply_markup=MyOrderConstants.create_back_to_orders_keyboard()
                )
                return
            
            keyboard = MyOrderConstants.create_orders_keyboard(orders)
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _get_order_details(self, order_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        try:
            with self.db_manager.session_scope() as session:
                from src.myconfbot.utils.models import Order, Product, Category, OrderStatus, OrderNote, User
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                order = session.query(Order).filter_by(id=order_id).first()
                if not order:
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞
                order_user = session.query(User).filter_by(id=order.user_id).first()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
                product = session.query(Product).filter_by(id=order.product_id).first()
                category = session.query(Category).filter_by(id=product.category_id).first() if product else None
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                last_status = session.query(OrderStatus).filter_by(
                    order_id=order_id
                ).order_by(OrderStatus.created_at.desc()).first()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                first_note = session.query(OrderNote).filter_by(
                    order_id=order_id
                ).order_by(OrderNote.created_at).first()
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                note_user = None
                if first_note:
                    note_user = session.query(User).filter_by(id=first_note.user_id).first()
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
                return {
                    'order': {
                        'id': order.id,
                        'user_id': order.user_id,  # user.id, –∞ –Ω–µ telegram_id
                        'user_telegram_id': order_user.telegram_id if order_user else None,
                        'product_id': order.product_id,
                        'quantity': order.quantity,
                        'weight_grams': order.weight_grams,
                        'delivery_type': order.delivery_type,
                        'created_at': order.created_at,
                        'ready_at': order.ready_at,
                        'total_cost': order.total_cost,
                        'payment_type': order.payment_type,
                        'payment_status': order.payment_status,
                        'admin_notes': order.admin_notes
                    },
                    'product': {
                        'id': product.id if product else None,
                        'name': product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'category_id': product.category_id if product else None,
                        'measurement_unit': product.measurement_unit if product else '—à—Ç',
                        'price': product.price if product else 0
                    } if product else None,
                    'category': {
                        'id': category.id if category else None,
                        'name': category.name if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    } if category else None,
                    'last_status': {
                        'status': last_status.status if last_status else '–°–æ–∑–¥–∞–Ω / –ù–æ–≤—ã–π',
                        'created_at': last_status.created_at if last_status else None
                    } if last_status else None,
                    'first_note': {
                        'note_text': first_note.note_text if first_note else None,
                        'created_at': first_note.created_at if first_note else None,
                        'user_id': first_note.user_id if first_note else None,
                        'user_name': note_user.full_name if note_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    } if first_note else None
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            return None

    # def _get_order_details(self, order_id: int) -> dict:
    #     """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    #     try:
    #         with self.db_manager.session_scope() as session:
    #             from src.myconfbot.utils.models import Order, Product, Category, OrderStatus, OrderNote
                
    #             # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    #             order = session.query(Order).filter_by(id=order_id).first()
    #             if not order:
    #                 return None
                
    #             # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
    #             product = session.query(Product).filter_by(id=order.product_id).first()
    #             category = session.query(Category).filter_by(id=product.category_id).first() if product else None
                
    #             # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    #             last_status = session.query(OrderStatus).filter_by(
    #                 order_id=order_id
    #             ).order_by(OrderStatus.created_at.desc()).first()
                
    #             # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    #             first_note = session.query(OrderNote).filter_by(
    #                 order_id=order_id
    #             ).order_by(OrderNote.created_at).first()
                
    #             # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    #             return {
    #                 'order': {
    #                     'id': order.id,
    #                     'user_id': order.user_id,
    #                     'product_id': order.product_id,
    #                     'quantity': order.quantity,
    #                     'weight_grams': order.weight_grams,
    #                     'delivery_type': order.delivery_type,
    #                     'created_at': order.created_at,
    #                     'ready_at': order.ready_at,
    #                     'total_cost': order.total_cost,
    #                     'payment_type': order.payment_type,
    #                     'payment_status': order.payment_status,
    #                     'admin_notes': order.admin_notes
    #                 },
    #                 'product': {
    #                     'id': product.id if product else None,
    #                     'name': product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    #                     'category_id': product.category_id if product else None,
    #                     'measurement_unit': product.measurement_unit if product else '—à—Ç',
    #                     'price': product.price if product else 0
    #                 } if product else None,
    #                 'category': {
    #                     'id': category.id if category else None,
    #                     'name': category.name if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    #                 } if category else None,
    #                 'last_status': {
    #                     'status': last_status.status if last_status else '–°–æ–∑–¥–∞–Ω / –ù–æ–≤—ã–π',
    #                     'created_at': last_status.created_at if last_status else None
    #                 } if last_status else None,
    #                 'first_note': {
    #                     'note_text': first_note.note_text if first_note else None,
    #                     'created_at': first_note.created_at if first_note else None,
    #                     'user_id': first_note.user_id if first_note else None
    #                 } if first_note else None
    #             }
                
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
    #         return None
    
    def _get_order_status_history(self, order_id: int) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞"""
        try:
            with self.db_manager.session_scope() as session:
                from src.myconfbot.utils.models import OrderStatus
                
                status_history = session.query(OrderStatus).filter_by(
                    order_id=order_id
                ).order_by(OrderStatus.created_at).all()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏–µ–π
                result = []
                for status in status_history:
                    result.append({
                        'id': status.id,
                        'order_id': status.order_id,
                        'status': status.status,
                        'created_at': status.created_at,
                        'photo_path': status.photo_path
                    })
                
                return result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            return []
    
    def _format_order_summary(self, order_details: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        order = order_details['order']
        product = order_details['product']
        category = order_details['category']
        last_status = order_details['last_status']
        first_note = order_details['first_note']
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        time_until_ready = ""
        if order['ready_at']:
            from datetime import datetime
            now = datetime.now()
            ready_time = order['ready_at']
            time_diff = ready_time - now
            
            if time_diff.total_seconds() > 0:
                days = time_diff.days
                hours = time_diff.seconds // 3600
                time_until_ready = f"{days} –¥–Ω. {hours} —á–∞—Å."
            else:
                time_until_ready = "–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_display = ""
        if order['weight_grams']:
            quantity_display = f"{order['weight_grams']} –≥"
        elif order['quantity']:
            quantity_display = f"{order['quantity']} {product['measurement_unit'] if product else '—à—Ç'}"
        
        text = "üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
        text += f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üéÇ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category['name'] if category else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        
        if quantity_display:
            text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity_display}\n"
        
        if order['ready_at']:
            text += f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {order['ready_at'].strftime('%d.%m.%Y %H:%M')}\n"
        
        if time_until_ready:
            text += f"‚è≥ <b>–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {time_until_ready}\n"
        
        text += f"üöö <b>–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['delivery_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üí≥ <b>–í–∏–¥ —Ä–∞—Å—á–µ—Ç–∞:</b> {order['payment_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üí∞ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {order['payment_status'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üîÑ <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {last_status['status'] if last_status else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:</b> {float(order['total_cost']):.2f} —Ä—É–±.\n"
        
        if first_note and first_note['note_text']:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
            note_text = first_note['note_text']
            if len(note_text) > 100:
                note_text = note_text[:100] + "..."
            text += f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {note_text}\n"
        
        return text
    
    def _format_status_history(self, status_history: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        text = "üîÑ <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞</b>\n\n"
        
        for status in status_history:
            text += f"üìÖ <b>{status['created_at'].strftime('%d.%m.%Y %H:%M')}</b>\n"
            text += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status['status']}\n"
            
            if status['photo_path']:
                text += f"üì∏ <b>–ï—Å—Ç—å —Ñ–æ—Ç–æ</b>\n"
            
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        return text
    
    def _format_order_notes(self, order_notes: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ –∑–∞–∫–∞–∑—É"""
        text = "üí¨ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É</b>\n\n"
        
        for note in order_notes:
            text += f"üìÖ <b>{note['created_at'].strftime('%d.%m.%Y %H:%M')}</b>\n"
            text += f"üë§ <b>{note['user_name']}</b>\n"
            text += f"üí¨ {note['note_text']}\n"
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        return text