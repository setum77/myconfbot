import logging
from telebot import types
from telebot.types import Message, CallbackQuery

from src.myconfbot.handlers.user.base_user_handler import BaseUserHandler
from src.myconfbot.config import Config
from src.myconfbot.utils.database import DatabaseManager


class OrderHandler(BaseUserHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        self._register_order_start_handler()
        self._register_dessert_type_handler()
        self._register_main_menu_handler()
    
    def _register_order_start_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞"""
        @self.bot.message_handler(func=lambda message: message.text == 'üéÇ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
        def start_order(message: Message):
            self._start_order(message)
    
    def _register_dessert_type_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–µ—Å–µ—Ä—Ç–∞"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
        def handle_dessert_type(call: CallbackQuery):
            self._handle_dessert_type(call)
    
    def _register_main_menu_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        @self.bot.message_handler(func=lambda message: message.text == 'üìÉ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        def handle_main_menu(message: Message):
            self._handle_main_menu(message)
    
    def _start_order(self, message: Message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞"""
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('üéÇ –¢–æ—Ä—Ç', callback_data='order_cake')
        btn2 = types.InlineKeyboardButton('üßÅ –ö–∞–ø–∫–µ–π–∫–∏', callback_data='order_cupcakes')
        btn3 = types.InlineKeyboardButton('üç™ –ü—Ä—è–Ω–∏–∫–∏', callback_data='order_cookies')
        btn5 = types.InlineKeyboardButton('üìÉ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
        
        markup.add(btn1, btn2, btn3)
        markup.add(btn5)
        
        self.bot.send_message(
            message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ—Å–µ—Ä—Ç–∞:", 
            reply_markup=markup
        )
    
    def _handle_dessert_type(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–µ—Å–µ—Ä—Ç–∞"""
        dessert_types = {
            'order_cake': 'üéÇ –¢–æ—Ä—Ç',
            'order_cupcakes': 'üßÅ –ö–∞–ø–∫–µ–π–∫–∏', 
            'order_cookies': 'üç™ –ü—Ä—è–Ω–∏–∫–∏'
        }
        
        dessert_type = dessert_types.get(call.data)
        if dessert_type:
            response = (
                f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {dessert_type}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n‚Ä¢ –í–∫—É—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n‚Ä¢ –î–∏–∑–∞–π–Ω\n‚Ä¢ –î–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è"
            )
            
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=response
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            self.states_manager.set_user_state(call.from_user.id, {
                'state': 'awaiting_order_description',
                'dessert_type': dessert_type,
                'message_id': call.message.message_id
            })
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.bot.register_next_step_handler(call.message, self._process_order_description, dessert_type)
        else:
            self.bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ—Å–µ—Ä—Ç–∞")
    
    def _process_order_description(self, message: Message, dessert_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–∞–∑–∞–¥', '‚ùå']:
            self.states_manager.clear_user_state(user_id)
            self.bot.send_message(message.chat.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        order_text = (
            f"üìù –í–∞—à –∑–∞–∫–∞–∑:\n"
            f"–¢–∏–ø: {dessert_type}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n"
            f"–°–ø–∞—Å–∏–±–æ! –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        
        self.bot.send_message(message.chat.id, order_text)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.states_manager.clear_user_state(user_id)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
        # self._save_order_to_db(message, dessert_type, message.text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self._show_main_menu(message.chat.id, message.from_user.id)
    
    def _handle_main_menu(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self._show_main_menu(message.chat.id, message.from_user.id)
    
    def _show_main_menu(self, chat_id: int, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        is_admin = self.is_admin(user_id)
        markup = self.show_main_menu(chat_id, is_admin)
        self.bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    
    def _save_order_to_db(self, message: Message, dessert_type: str, description: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.logger.info(
                f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: "
                f"{dessert_type} - {description}"
            )
            
            # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
            # order_data = {
            #     'user_id': message.from_user.id,
            #     'dessert_type': dessert_type,
            #     'description': description,
            #     'status': 'new'
            # }
            # self.db_manager.create_order(order_data)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é