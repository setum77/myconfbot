import logging
import os
import io
from typing import Optional
from PIL import Image
from src.myconfbot.config import Config
from telebot import types
from telebot.types import Message, CallbackQuery

from src.myconfbot.handlers.user.base_user_handler import BaseUserHandler

# Config.setup_logging()
class ProfileHandler(BaseUserHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è"""
        self._register_profile_callback_handlers()
        self._register_photo_handlers()
        self._register_profile_edit_handlers()
    
    def _register_profile_callback_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_profile_'))
        def handle_profile_edit(callback: CallbackQuery):
            self._handle_profile_edit_callback(callback)
    
    def _register_photo_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ç–æ"""
        @self.bot.message_handler(content_types=['photo'])
        def handle_profile_photo(message: Message):
            self._handle_profile_photo(message)
    
    def _register_profile_edit_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_user_state(message.from_user.id) is not None and
            self.states_manager.get_user_state(message.from_user.id).get('state', '').startswith('editing_')
        )
        def handle_profile_text_edit(message: Message):
            self._handle_profile_text_edit(message)
    
    def show_my_profile(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_user_info –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
            user_info = self.db_manager.get_user_info(user_id)
            
            if not user_info:
                self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            profile_text = self._format_profile_text(user_info)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = self._create_profile_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            photo_path = user_info.get('photo_path')
            if  photo_path and os.path.exists(photo_path):
                try:
                    with open(photo_path, 'rb') as photo:
                        self.bot.send_photo(
                            chat_id, photo, 
                            caption=profile_text,
                            parse_mode='Markdown', 
                            reply_markup=keyboard
                        )
                    return # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    self._send_profile_text(chat_id, profile_text, keyboard)
            else:
                self._send_profile_text(chat_id, profile_text, keyboard)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
    
    def _format_profile_text(self, user_info: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        profile_text += f"üìõ *–ò–º—è:* {user_info.get('full_name') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        profile_text += f"üì± *Username:* @{user_info.get('telegram_username') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        profile_text += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_info.get('phone') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        profile_text += f"üìç *–ê–¥—Ä–µ—Å:* {user_info.get('address') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        profile_text += f"üé≠ *–°—Ç–∞—Ç—É—Å:* {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user_info.get('is_admin') else 'üë§ –ö–ª–∏–µ–Ω—Ç'}\n"
        return profile_text
    
    def _create_profile_keyboard(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_profile_name"),
            types.InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_profile_phone")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="edit_profile_address"),
            types.InlineKeyboardButton("üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_profile_photo")
        )
        return keyboard
    
    def _send_profile_text(self, chat_id: int, profile_text: str, keyboard: types.InlineKeyboardMarkup):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.bot.send_message(chat_id, profile_text, parse_mode='Markdown', reply_markup=keyboard)
        self.bot.send_message(chat_id, "üñºÔ∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    def _handle_profile_edit_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        action = callback.data.replace('edit_profile_', '')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.states_manager.set_user_state(user_id, {
            'state': f'editing_{action}',
            'message_id': callback.message.message_id
        })
        
        if action == 'name':
            self.bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        elif action == 'phone':
            self.bot.send_message(chat_id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        elif action == 'address':
            self.bot.send_message(chat_id, "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        elif action == 'photo':
            self.bot.send_message(chat_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
        
        self.bot.answer_callback_query(callback.id)
    
    def _handle_profile_photo(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_user_state(user_id)
        
        if not user_state or user_state.get('state') != 'editing_photo':
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = self.bot.get_file(message.photo[-1].file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            compressed_image = self._compress_image(downloaded_file)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_photo_dir = f"data/users/{user_id}"
            os.makedirs(user_photo_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ
            photo_path = f"{user_photo_dir}/profile.jpg"
            with open(photo_path, 'wb') as new_file:
                new_file.write(compressed_image)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            file_size_kb = len(compressed_image) / 1024

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
            # self.auth_service.update_user_info(user_id, photo_path=photo_path)
            self.db_manager.update_user_info(user_id, photo_path=photo_path)
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.states_manager.clear_user_state(user_id)
            
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –†–∞–∑–º–µ—Ä: {file_size_kb:.1f} KB"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            self.show_my_profile(message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}", exc_info=True)
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
    
    def _handle_profile_text_edit(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_user_state(user_id)
        
        if not user_state:
            return
        
        state = user_state.get('state', '')
        field = state.replace('editing_', '')
        new_value = message.text.strip()
        
        try:
            if field == 'name':
                if len(new_value) < 2:
                    self.bot.send_message(message.chat.id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
                    return
                self.db_manager.update_user_info(user_id, full_name=new_value)
                
            elif field == 'phone':
                if not any(char.isdigit() for char in new_value) or len(new_value) < 5:
                    self.bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
                    return
                self.db_manager.update_user_info(user_id, phone=new_value)
                
            elif field == 'address':
                if len(new_value) < 5:
                    self.bot.send_message(message.chat.id, "‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤")
                    return
                self.db_manager.update_user_info(user_id, address=new_value)
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.states_manager.clear_user_state(user_id)
            
            field_names = {'name': '–ò–º—è', 'phone': '–¢–µ–ª–µ—Ñ–æ–Ω', 'address': '–ê–¥—Ä–µ—Å'}
            self.bot.send_message(
                message.chat.id, 
                f"‚úÖ {field_names[field]} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            self.show_my_profile(message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field}: {e}", exc_info=True)
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field}")
    
    def _compress_image(self, image_data, max_size=(800, 800), quality=85, max_file_size_kb=500):
        """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç—Ç–∞–ø–∞–º–∏ —Å–∂–∞—Ç–∏—è"""
        try:
            image = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'P'):
                image = image.convert('RGB')
            
            # –ü–µ—Ä–≤–æ–µ —Å–∂–∞—Ç–∏–µ
            image.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            current_quality = quality
            output_buffer = io.BytesIO()
            
            for attempt in range(5):  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫
                output_buffer.seek(0)
                output_buffer.truncate(0)
                
                image.save(output_buffer, format='JPEG', quality=current_quality, optimize=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                if len(output_buffer.getvalue()) <= max_file_size_kb * 1024:
                    break
                    
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                current_quality = max(40, current_quality - 15)
            
            return output_buffer.getvalue()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image_data