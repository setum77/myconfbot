# src\myconfbot\handlers\admin\order_admin_handler.py

import logging
import os
import uuid
from datetime import datetime
from telebot import types
from telebot.types import Message, CallbackQuery

from src.myconfbot.handlers.admin.admin_base import BaseAdminHandler
from src.myconfbot.handlers.user.base_user_handler import BaseUserHandler
from src.myconfbot.handlers.shared.admin_constants import AdminConstants
from src.myconfbot.handlers.shared.constants import UserStates

logger = logging.getLogger(__name__)

class OrderAdminHandler(BaseAdminHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self._register_callback_handlers()
    
    def _register_callback_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        @self.bot.callback_query_handler(func=lambda call: call.data == "orderadm_active_orders")
        def handle_active_orders(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã'"""
            self._show_active_orders(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "orderadm_all_orders")
        def handle_all_orders(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∑–∞–∫–∞–∑—ã'"""
            self._show_all_orders(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "orderadm_statistics")
        def handle_orders_statistics(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤'"""
            self._show_orders_statistics(callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        @self.bot.callback_query_handler(func=lambda call: call.data == "orderadm_back_management")
        def handle_back_management(callback: CallbackQuery):
            """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞–º–∏"""
            self._show_orders_management(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "orderadm_back_active_orders")
        def handle_back_active_orders(callback: CallbackQuery):
            """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–∫–∞–∑–∞–º"""
            self._show_active_orders(callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_order_"))
        def handle_order_select(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
            self._show_order_actions(callback)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_select_status_"))
        def handle_status_selection(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
            if self._check_admin_access(callback=callback):
                self._process_status_selection_from_button(callback)
               
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_change_status_"))
        def handle_change_status(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
            self._show_status_history(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_add_status_"))
        def handle_add_status(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
            self._start_add_status_process(callback)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_notes_"))
        def handle_order_notes(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∑–∞–∫–∞–∑–∞"""
            if self._check_admin_access(callback=callback):
                self._show_order_notes(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_add_note_"))
        def handle_add_note(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"""
            if self._check_admin_access(callback=callback):
                self._handle_add_admin_note(callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_change_cost_"))
        def handle_change_cost(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'"""
            if self._check_admin_access(callback=callback):
                self._start_change_cost_process(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_change_delivery_"))
        def handle_change_delivery(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'"""
            if self._check_admin_access(callback=callback):
                self._start_change_delivery_process(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_change_ready_date_"))
        def handle_change_ready_date(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'"""
            if self._check_admin_access(callback=callback):
                self._start_change_ready_date_process(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_change_quantity_"))
        def handle_change_quantity(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'"""
            if self._check_admin_access(callback=callback):
                self._start_change_quantity_process(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_change_payment_status_"))
        def handle_change_payment_status(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'"""
            if self._check_admin_access(callback=callback):
                self._start_change_payment_status_process(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("orderadm_add_admin_notes_"))
        def handle_add_admin_notes(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞'"""
            if self._check_admin_access(callback=callback):
                self._start_add_admin_notes_process(callback)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("delivery_type_"))
        def handle_delivery_type_selection(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
            if self._check_admin_access(callback=callback):
                self._start_edit_delivery_type(callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("quantity_type_"))
        def handle_quantity_type_selection(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
            if self._check_admin_access(callback=callback):
                try:
                    parts = callback.data.split('_')
                    order_id = int(parts[2])
                    quantity_type = parts[3]  # 'weight' –∏–ª–∏ 'quantity'
                    
                    user_id = callback.from_user.id
                    self.states_manager.set_user_state(user_id, {
                        'state': UserStates.ADMIN_CHANGING_QUANTITY_VALUE,
                        'order_id': order_id,
                        'quantity_type': quantity_type
                    })
                    
                    unit = "–≥—Ä–∞–º–º–∞—Ö" if quantity_type == "weight" else "—à—Ç—É–∫–∞—Ö"
                    
                    self.bot.edit_message_text(
                        chat_id=callback.message.chat.id,
                        message_id=callback.message.message_id,
                        text=f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {unit}:</b>",
                        parse_mode='HTML'
                    )
                    
                    self.bot.register_next_step_handler(
                        callback.message,
                        lambda message: self._process_new_quantity(message, order_id, quantity_type)
                    )
                    
                    self.bot.answer_callback_query(callback.id)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
                    self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("payment_status_"))
        def handle_payment_status_selection(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
            if self._check_admin_access(callback=callback):
                try:
                    parts = callback.data.split('_')
                    order_id = int(parts[2])
                    payment_status = parts[3]  # 'paid', 'unpaid', 'pending'
                    
                    status_texts = {
                        'paid': '–û–ø–ª–∞—á–µ–Ω',
                        'unpaid': '–ù–µ –æ–ø–ª–∞—á–µ–Ω', 
                        'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
                    }
                    
                    new_status = status_texts.get(payment_status, '–ù–µ —É–∫–∞–∑–∞–Ω')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                    success = self.db_manager.update_order_field(order_id, 'payment_status', new_status)
                    
                    if success:
                        self.bot.edit_message_text(
                            chat_id=callback.message.chat.id,
                            message_id=callback.message.message_id,
                            text=f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_status}</b>",
                            parse_mode='HTML'
                        )
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                        self._show_updated_order_details(callback.message.chat.id, order_id)
                    else:
                        self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
                    self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")
        
        # –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å—Ç–∞—Ç—É—Å—É
        @self.bot.callback_query_handler(func=lambda call: call.data == "skip_notes")
        def handle_skip_notes(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è"""
            if self._check_admin_access(callback=callback):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = callback.from_user.id
                user_state = self.states_manager.get_user_state(user_id)
                
                if user_state and user_state.get('state') == UserStates.ADMIN_ADDING_STATUS:
                    order_id = user_state.get('order_id')
                    selected_status = user_state.get('selected_status')
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ)
                    self._process_status_notes(callback, order_id, selected_status)

        # –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 
        @self.bot.callback_query_handler(func=lambda call: call.data == "skip_photo")
        def handle_skip_photo(callback: CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ"""
            if self._check_admin_access(callback=callback):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = callback.from_user.id
                user_state = self.states_manager.get_user_state(user_id)
                
                if user_state and user_state.get('state') == UserStates.ADMIN_ADDING_STATUS:
                    order_id = user_state.get('order_id')
                    selected_status = user_state.get('selected_status')
                    admin_notes = user_state.get('admin_notes')
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    self._process_status_photo(callback, order_id, selected_status, admin_notes)                                                            

        
                
        
    

    def _show_orders_management(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
        keyboard = AdminConstants.get_orders_management_keyboard()
        
        self.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        self.bot.answer_callback_query(callback.id)
    
    def _show_active_orders(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å –Ω–µ "–í—ã–ø–æ–ª–Ω–µ–Ω / –ó–∞–≤–µ—Ä—à—ë–Ω")
            active_orders = self.db_manager.get_active_orders()
            
            if not active_orders:
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text="üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",
                    reply_markup=AdminConstants.create_active_orders_keyboard([])
                )
                return
            
            keyboard = AdminConstants.create_active_orders_keyboard(active_orders)
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
    
    def _show_all_orders(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
        self.bot.answer_callback_query(callback.id, "üìö –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_orders_statistics(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
        self.bot.answer_callback_query(callback.id, "üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_order_actions(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º"""
        try:
            order_id = int(callback.data.replace("orderadm_order_", ""))
            order_details = self._get_order_details_admin(order_id)
            
            if not order_details:
                self.bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            keyboard = AdminConstants.create_order_detail_keyboard(order_id)
            text = self._format_order_details_admin(order_details)
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞")

    def _process_status_selection_from_button(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback data: {callback.data}")
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data: orderadm_select_status_{order_id}_{status_name}
            parts = callback.data.split('_')
            logger.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏: {parts}")
            # –ü–µ—Ä–≤—ã–µ 4 —á–∞—Å—Ç–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: ['orderadm', 'select', 'status', '{order_id}']
            if len(parts) < 5:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data")
            
            order_id = int(parts[3])

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
            status_name_parts = parts[4:]
            status_name = '_'.join(status_name_parts)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ enum
            from src.myconfbot.utils.models import OrderStatusEnum
            #status_enum = OrderStatusEnum[status_name]
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
            status_enum = None
            for status in OrderStatusEnum:
                if status.name == status_name:
                    status_enum = status
                    break
            
            if status_enum is None:
                raise ValueError(f"–°—Ç–∞—Ç—É—Å —Å –∏–º–µ–Ω–µ–º '{status_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            
            
            selected_status = status_enum.value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_id = callback.from_user.id
            user_state = self.states_manager.get_user_state(user_id)
            user_state['selected_status'] = selected_status
            user_state['step'] = 'add_notes'
            self.states_manager.set_user_state(user_id, user_state)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_notes")
            )
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Å—Ç–∞—Ç—É—Å—É</b>\n\n"
                    f"–ó–∞–∫–∞–∑: <b>#{order_id}</b>\n"
                    f"–°—Ç–∞—Ç—É—Å: <b>{selected_status}</b>\n\n"
                    f"–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.register_next_step_handler(
                callback.message,
                lambda msg: self._process_status_notes(msg, order_id, selected_status)
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞—Ç—É—Å–∞")
    
    
    def _show_status_history(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤"""
        try:
            order_id = int(callback.data.replace("orderadm_change_status_", ""))
            status_history = self._get_order_status_history(order_id)
            
            keyboard = AdminConstants.create_status_history_keyboard(order_id)
            text = self._format_status_history_for_admin(status_history, order_id)
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
    
    def _start_add_status_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            order_id = int(callback.data.replace("orderadm_add_status_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_ADDING_STATUS,
                'order_id': order_id,
                'step': 'select_status'
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            from src.myconfbot.utils.models import OrderStatusEnum
            
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            status_buttons = []

            for status in OrderStatusEnum:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data
                callback_data = f"orderadm_select_status_{order_id}_{status.name}"
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                button_text = status.value
                if len(button_text) > 20:
                    button_text = button_text[:17] + "..."
                    
                status_buttons.append(
                    types.InlineKeyboardButton(
                        f"üîÑ {button_text}", 
                        callback_data=callback_data
                    )
                )

                # status_buttons.append(
                #     types.InlineKeyboardButton(
                #         f"üîÑ {status.value}", 
                #         callback_data=f"orderadm_select_status_{order_id}_{status.name}"
                #     )
                # )
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(status_buttons), 2):
                if i + 1 < len(status_buttons):
                    keyboard.add(status_buttons[i], status_buttons[i + 1])
                else:
                    keyboard.add(status_buttons[i])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.add(
                types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", 
                    callback_data=f"orderadm_change_status_{order_id}"
                )
            )
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üîÑ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    # def _process_status_selection(self, message: Message, order_id: int):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    #     try:
    #         selected_status = message.text.strip()
            
    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
    #         from src.myconfbot.utils.models import OrderStatusEnum
    #         valid_statuses = [status.value for status in OrderStatusEnum]
            
    #         if selected_status not in valid_statuses:
    #             self.bot.send_message(
    #                 message.chat.id,
    #                 f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n" + "\n".join([f"‚Ä¢ {status}" for status in valid_statuses])
    #             )
    #             return
            
    #         # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    #         user_id = message.from_user.id
    #         user_state = self.states_manager.get_user_state(user_id)
    #         user_state['selected_status'] = selected_status
    #         user_state['step'] = 'add_notes'
    #         self.states_manager.set_user_state(user_id, user_state)
            
    #         self.bot.send_message(
    #             message.chat.id,
    #             "üìù –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å—Ç–∞—Ç—É—Å—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    #         )
            
    #         self.bot.register_next_step_handler(
    #             message,
    #             lambda msg: self._process_status_notes(msg, order_id, selected_status)
    #         )
            
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    #         self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
    
    def _process_status_notes(self, message: Message, order_id: int, status: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Å—Ç–∞—Ç—É—Å—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
        try:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (—ç—Ç–æ CallbackQuery)
            if isinstance(message, CallbackQuery) and message.data == 'skip_notes':
                admin_notes = None
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                self.bot.answer_callback_query(message.id)
                chat_id = message.message.chat.id
                user_id = message.from_user.id
                msg_obj = message.message  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –∏–∑ CallbackQuery
            else:
                # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                admin_notes = message.text.strip() if message.text else None
                if admin_notes and admin_notes.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                    admin_notes = None
                chat_id = message.chat.id
                user_id = message.from_user.id
                msg_obj = message
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_state = self.states_manager.get_user_state(user_id)
            user_state['admin_notes'] = admin_notes
            user_state['step'] = 'add_photo'
            self.states_manager.set_user_state(user_id, user_state)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
            )
            
            self.bot.send_message(
                chat_id,
                f"üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞</b>\n\n"
                f"–ó–∞–∫–∞–∑: <b>#{order_id}</b>\n"
                f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
                f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <i>{admin_notes if admin_notes else '–Ω–µ—Ç'}</i>\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            self.bot.register_next_step_handler(
                msg_obj,
                lambda m: self._process_status_photo(m, order_id, status, admin_notes)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
            if isinstance(message, CallbackQuery):
                chat_id = message.message.chat.id
            else:
                chat_id = message.chat.id
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è")

    def _process_status_photo(self, message: Message, order_id: int, status: str, admin_notes: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
        try:
            photo_path = None
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (—ç—Ç–æ CallbackQuery)
            if isinstance(message, CallbackQuery) and message.data == 'skip_photo':
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                self.bot.answer_callback_query(message.id)
                user_id = message.from_user.id
                chat_id = message.message.chat.id
                # message_id = message.message.message_id
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.content_type == 'photo' and message.photo:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
                    if not self._validate_status_photo(message, order_id):
                        self.bot.send_message(
                            message.chat.id,
                            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
                        )
                        # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        self.bot.register_next_step_handler(
                            message,
                            lambda m: self._process_status_photo(m, order_id, status, admin_notes)
                        )
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
                    photo_path = self._save_status_photo(message, order_id)
                    if photo_path:
                        self.bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    else:
                        self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
                
                user_id = message.from_user.id
                chat_id = message.chat.id
                # message_id = message.message_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
            success = self.db_manager.add_order_status(
                order_id=order_id,
                status=status,
                admin_notes=admin_notes,
                photo_path=photo_path
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)

            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                success_message = f"‚úÖ –°—Ç–∞—Ç—É—Å '{status}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}"
                if photo_path:
                    success_message += "\nüì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å—Ç–∞—Ç—É—Å—É"
                if admin_notes:
                    success_message += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {admin_notes}"
                    
                self.bot.send_message(chat_id, success_message)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
                status_history = self._get_order_status_history(order_id)
                keyboard = AdminConstants.create_status_history_keyboard(order_id)
                text = self._format_status_history_for_admin(status_history, order_id)
                
                self.bot.send_message(
                    chat_id,
                    text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            else:
                self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
            if isinstance(message, CallbackQuery):
                chat_id = message.message.chat.id
            else:
                chat_id = message.chat.id
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
            
        #     if success:
        #         self.bot.send_message(
        #             chat_id,
        #             f"‚úÖ –°—Ç–∞—Ç—É—Å '{status}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}"
        #         )
                
        #         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
        #         status_history = self._get_order_status_history(order_id)
        #         keyboard = AdminConstants.create_status_history_keyboard(order_id)
        #         text = self._format_status_history_for_admin(status_history, order_id)
                
        #         self.bot.send_message(
        #             chat_id,
        #             text,
        #             parse_mode='HTML',
        #             reply_markup=keyboard
        #         )
        #     else:
        #         self.bot.send_message(
        #             chat_id,
        #             "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
        #         )
                
        # except Exception as e:
        #     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        #     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        #     if isinstance(message, CallbackQuery):
        #         chat_id = message.message.chat.id
        #     else:
        #         chat_id = message.chat.id
        #     self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

    # def _process_status_photo(self, message: Message, order_id: int, status: str, admin_notes: str):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    #     try:
    #         photo_path = None
            
    #         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    #         if hasattr(message, 'data') and message.data == 'skip_photo':
    #             # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    #             self.bot.answer_callback_query(message.id)
    #             user_id = message.from_user.id
    #             chat_id = message.message.chat.id
    #             message_id = message.message.message_id
    #         else:
    #             # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #             if message.content_type == 'photo' and message.photo:
    #                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    #                 if not self._validate_status_photo(message, order_id):
    #                     self.bot.send_message(
    #                         message.chat.id,
    #                         "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
    #                     )
    #                     # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    #                     self.bot.register_next_step_handler(
    #                         message,
    #                         lambda m: self._process_status_photo(m, order_id, status, admin_notes)
    #                     )
    #                     return
                    
    #                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    #                 photo_path = self._save_status_photo(message, order_id)
    #                 if photo_path:
    #                     self.bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    #                 else:
    #                     self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
                
    #             user_id = message.from_user.id
    #             chat_id = message.chat.id
    #             message_id = message.message_id
            
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
    #         success = self.db_manager.add_order_status(
    #             order_id=order_id,
    #             status=status,
    #             admin_notes=admin_notes,
    #             photo_path=photo_path
    #         )
            
    #         # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    #         self.states_manager.clear_user_state(user_id)
            
    #         if success:
    #             self.bot.send_message(
    #                 chat_id,
    #                 f"‚úÖ –°—Ç–∞—Ç—É—Å '{status}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}"
    #             )
                
    #             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    #             status_history = self._get_order_status_history(order_id)
    #             keyboard = AdminConstants.create_status_history_keyboard(order_id)
    #             text = self._format_status_history_for_admin(status_history, order_id)
                
    #             self.bot.send_message(
    #                 chat_id,
    #                 text,
    #                 parse_mode='HTML',
    #                 reply_markup=keyboard
    #             )
    #         else:
    #             self.bot.send_message(
    #                 chat_id,
    #                 "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
    #             )
                
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    #         self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

    def _validate_status_photo(self, message: Message, order_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–æ—Ç–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            user_state = self.states_manager.get_user_state(user_id)
            
            if not user_state:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if user_state.get('state') != UserStates.ADMIN_ADDING_STATUS:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ order_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if user_state.get('order_id') != order_id:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ç–æ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if not message.photo:
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    def _save_status_photo(self, message: Message, order_id: int) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            import os
            from datetime import datetime
            
            # –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            base_data_dir = "data"
            orders_dir = os.path.join(base_data_dir, "orders")
            order_dir = os.path.join(orders_dir, f"order_{order_id}")
            status_photos_dir = os.path.join(order_dir, "status_photos")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            os.makedirs(status_photos_dir, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            photo = message.photo[-1]
            file_id = photo.file_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = self.bot.get_file(file_id)
            file_extension = os.path.splitext(file_info.file_path)[1] or '.jpg'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"status_photo_{timestamp}{file_extension}"
            file_path = os.path.join(status_photos_dir, filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            logger.info(f"–§–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            relative_path = os.path.join("orders", f"order_{order_id}", "status_photos", filename)
            return relative_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return None

    # def _process_status_photo(self, message: Message, order_id: int, status: str, admin_notes: str):
    #     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
    #     try:
    #         photo_path = None
            
    #         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    #         if hasattr(message, 'data') and message.data == 'skip_photo':
    #             # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    #             self.bot.answer_callback_query(message.id)
    #             user_id = message.from_user.id
    #             chat_id = message.message.chat.id
    #             message_id = message.message.message_id
    #         else:
    #             # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #             if message.content_type == 'photo' and message.photo:
    #                 # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    #                 photo_path = "path/to/saved/photo.jpg"  # –ó–∞–≥–ª—É—à–∫–∞
    #                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
    #                 self.bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ")
                
    #             user_id = message.from_user.id
    #             chat_id = message.chat.id
    #             message_id = message.message_id
            
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
    #         success = self.db_manager.add_order_status(
    #             order_id=order_id,
    #             status=status,
    #             admin_notes=admin_notes,
    #             photo_path=photo_path
    #         )
            
    #         # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    #         self.states_manager.clear_user_state(user_id)
            
    #         if success:
    #             self.bot.send_message(
    #                 chat_id,
    #                 f"‚úÖ –°—Ç–∞—Ç—É—Å '{status}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}"
    #             )
                
    #             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    #             status_history = self._get_order_status_history(order_id)
    #             keyboard = AdminConstants.create_status_history_keyboard(order_id)
    #             text = self._format_status_history_for_admin(status_history, order_id)
                
    #             self.bot.send_message(
    #                 chat_id,
    #                 text,
    #                 parse_mode='HTML',
    #                 reply_markup=keyboard
    #             )
    #         else:
    #             self.bot.send_message(
    #                 chat_id,
    #                 "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
    #             )
                
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    #         self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    
    def _get_active_orders(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å –Ω–µ '–í—ã–ø–æ–ª–Ω–µ–Ω / –ó–∞–≤–µ—Ä—à—ë–Ω')"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DatabaseManager –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            return self.db_manager.get_active_orders()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    # def _get_order_brief_info(self, order_id: int):
    #     """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    #     try:
    #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DatabaseManager
    #         order_details = self.db_manager.get_order_full_details(order_id)
    #         if not order_details:
    #             return None
            
    #         order = order_details['order']
    #         product = order_details['product']
            
    #         return {
    #             'id': order['id'],
    #             'ready_at': order['ready_at'],
    #             'product_name': product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    #             'quantity': order['quantity'],
    #             'weight_grams': order['weight_grams']
    #         }
            
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {e}")
    #         return None

    def _get_order_details_admin(self, order_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ my_order_handler)"""
        try:
            with self.db_manager.session_scope() as session:
                from src.myconfbot.utils.models import Order, Product, Category, OrderStatus, OrderNote, User
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                order = session.query(Order).filter_by(id=order_id).first()
                if not order:
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞
                order_user = session.query(User).filter_by(id=order.user_id).first()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
                product = session.query(Product).filter_by(id=order.product_id).first()
                category = session.query(Category).filter_by(id=product.category_id).first() if product else None
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                last_status = session.query(OrderStatus).filter_by(
                    order_id=order_id
                ).order_by(OrderStatus.created_at.desc()).first()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                first_note = session.query(OrderNote).filter_by(
                    order_id=order_id
                ).order_by(OrderNote.created_at).first()
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                note_user = None
                if first_note:
                    note_user = session.query(User).filter_by(id=first_note.user_id).first()
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
                return {
                    'order': {
                        'id': order.id,
                        'user_id': order.user_id,
                        'user_telegram_id': order_user.telegram_id if order_user else None,
                        'product_id': order.product_id,
                        'quantity': order.quantity,
                        'weight_grams': order.weight_grams,
                        'delivery_type': order.delivery_type,
                        'delivery_address': order.delivery_address,
                        'created_at': order.created_at,
                        'ready_at': order.ready_at,
                        'total_cost': order.total_cost,
                        'payment_type': order.payment_type,
                        'payment_status': order.payment_status,
                        'admin_notes': order.admin_notes
                    },
                    'user': {
                        'id': order_user.id if order_user else None,
                        'telegram_id': order_user.telegram_id if order_user else None,
                        'full_name': order_user.full_name if order_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'telegram_username': order_user.telegram_username if order_user else None,
                        'phone': order_user.phone if order_user else None,
                        'address': order_user.address if order_user else None
                    },
                    'product': {
                        'id': product.id if product else None,
                        'name': product.name if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'category_id': product.category_id if product else None,
                        'measurement_unit': product.measurement_unit if product else '—à—Ç',
                        'price': product.price if product else 0
                    } if product else None,
                    'category': {
                        'id': category.id if category else None,
                        'name': category.name if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    } if category else None,
                    'last_status': {
                        'status': last_status.status if last_status else '–°–æ–∑–¥–∞–Ω / –ù–æ–≤—ã–π',
                        'created_at': last_status.created_at if last_status else None,
                        'admin_notes': last_status.admin_notes if last_status else None
                    } if last_status else None,
                    'first_note': {
                        'note_text': first_note.note_text if first_note else None,
                        'created_at': first_note.created_at if first_note else None,
                        'user_id': first_note.user_id if first_note else None,
                        'user_name': note_user.full_name if note_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    } if first_note else None
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    def _get_order_status_history(self, order_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DatabaseManager
            return self.db_manager.get_order_status_history(order_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            return []
    
    # –ú–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # def _format_order_brief_info(self, order_info: dict) -> str:
    #     """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    #     text = "üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
    #     text += f"üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> #{order_info['id']}\n"
        
    #     if order_info['ready_at']:
    #         text += f"‚è∞ <b>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {order_info['ready_at'].strftime('%d.%m.%Y %H:%M')}\n"
        
    #     text += f"üéÇ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {order_info['product_name']}\n"
        
    #     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    #     if order_info['weight_grams']:
    #         text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order_info['weight_grams']} –≥\n"
    #     elif order_info['quantity']:
    #         text += f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order_info['quantity']} —à—Ç\n"
        
    #     return text
    
    def _format_order_details_admin(self, order_details: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        order = order_details['order']
        product = order_details['product']
        user = order_details['user']
        last_status = order_details['last_status']
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        time_until_ready = ""
        if order['ready_at']:
            from datetime import datetime
            now = datetime.now()
            time_diff = order['ready_at'] - now
            
            if time_diff.total_seconds() > 0:
                days = time_diff.days
                hours = time_diff.seconds // 3600
                time_until_ready = f"{days} –¥–Ω. {hours} —á–∞—Å."
            else:
                time_until_ready = "–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ"
        
        text = "üìã <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
        text += f"üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> #{order['id']}\n"
        text += f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {user['full_name'] if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        
        if user['telegram_username']:
            text += f"üì± <b>Telegram:</b> @{user['telegram_username']}\n"
        
        if user['phone']:
            text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone']}\n"
        
        if user['address']:
            text += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        
        text += f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üéÇ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</b> {product['name'] if product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order['delivery_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        
        if order['delivery_address']:
            text += f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['delivery_address']}\n"
        
        if order['ready_at']:
            text += f"‚è∞ <b>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> {order['ready_at'].strftime('%d.%m.%Y %H:%M')}\n"
        
        if time_until_ready:
            text += f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {time_until_ready}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if order['weight_grams']:
            text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order['weight_grams']} –≥\n"
        elif order['quantity']:
            unit = product['measurement_unit'] if product else '—à—Ç'
            text += f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order['quantity']} {unit}\n"
        
        text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:</b> {float(order['total_cost']):.2f} —Ä—É–±.\n"
        text += f"üí≥ <b>–í–∏–¥ –æ–ø–ª–∞—Ç—ã:</b> {order['payment_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {order['payment_status'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üîÑ <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {last_status['status'] if last_status else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        
        if last_status and last_status['admin_notes']:
            text += f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å—Ç–∞—Ç—É—Å—É:</b> {last_status['admin_notes']}\n"
        
        if order['admin_notes']:
            text += f"üóíÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∫ –∑–∞–∫–∞–∑—É:</b> {order['admin_notes']}\n"
        
        return text
    
    def _format_status_history_for_admin(self, status_history: list, order_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ñ–æ—Ç–æ"""
        text = f"üîÑ <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        
        if not status_history:
            text += "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç–∞\n"
            return text
        
        for status in status_history:
            text += f"üìÖ <b>{status['created_at'].strftime('%d.%m.%Y %H:%M')}</b>\n"
            text += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status['status']}\n"
            
            if status['admin_notes']:
                text += f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {status['admin_notes']}\n"
            
            if status['photo_path']:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                text += f"üì∏ <b>–ï—Å—Ç—å —Ñ–æ—Ç–æ</b>\n"
                
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–º–æ —Ñ–æ—Ç–æ, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                # text += f"üì∏ <a href=\"{self._get_full_photo_url(status['photo_path'])}\">–§–æ—Ç–æ</a>\n"
            
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        return text
    
    def _get_full_photo_url(self, relative_path: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ URL/path –∫ —Ñ–æ—Ç–æ (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)"""
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–∞—á—É —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        return relative_path
    
    # def _format_status_history_for_admin(self, status_history: list, order_id: int) -> str:
    #     """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    #     text = f"üîÑ <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        
    #     if not status_history:
    #         text += "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç–∞\n"
    #         return text
        
    #     for status in status_history:
    #         text += f"üìÖ <b>{status['created_at'].strftime('%d.%m.%Y %H:%M')}</b>\n"
    #         text += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status['status']}\n"
            
    #         if status['admin_notes']:
    #             text += f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {status['admin_notes']}\n"
            
    #         if status['photo_path']:
    #             text += f"üì∏ <b>–ï—Å—Ç—å —Ñ–æ—Ç–æ</b>\n"
            
    #         text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
    #     return text
    
    # --- –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π ---
    
    def _show_order_notes(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            order_id = int(callback.data.replace('orderadm_notes_', ''))
            order_notes = self.db_manager.get_order_notes(order_id)
            
            if not order_notes:
                message_text = (
                    "üí¨ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É #{}</b>\n\n"
                    "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π.\n\n"
                    "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                ).format(order_id)
            else:
                message_text = self._format_order_notes_admin(order_notes, order_id)
            
            keyboard = AdminConstants.create_order_notes_keyboard(order_id)

            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π")

    def _handle_add_admin_note(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫ –∑–∞–∫–∞–∑—É"""
        try:
            order_id = int(callback.data.replace('orderadm_add_note_', ''))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_ADDING_NOTE,
                'order_id': order_id
            })
            
            self.bot.answer_callback_query(
                callback.id, 
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.send_message(
                callback.message.chat.id,
                f"üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É #{order_id}</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                parse_mode='HTML'
            )
            
            self.bot.register_next_step_handler(
                callback.message, 
                lambda message: self._process_admin_note(message, order_id)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def _process_admin_note(self, message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_id = message.from_user.id
            note_text = message.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if not self._check_admin_access(message=message):
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = self.db_manager.add_order_note(
                order_id=order_id,
                telegram_id=user_id,
                note_text=note_text
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                order_notes = self.db_manager.get_order_notes(order_id)
                
                if not order_notes:
                    message_text = (
                        "üí¨ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É #{}</b>\n\n"
                        "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π.\n\n"
                        "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    ).format(order_id)
                else:
                    message_text = self._format_order_notes_admin(order_notes, order_id)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
                keyboard = AdminConstants.create_order_notes_keyboard(order_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º–∏
                self.bot.send_message(
                    message.chat.id,
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n" + message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def _format_order_notes_admin(self, order_notes: list, order_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ –∑–∞–∫–∞–∑—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        text = f"üí¨ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É #{order_id}</b>\n\n"
        
        for note in order_notes:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_type = "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if self._is_admin_user(note['user_name']) else "üë• –ö–ª–∏–µ–Ω—Ç"
            
            text += f"{sender_type} | {note['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            text += "----\n"
            text += f"üí¨ {note['note_text']}\n"
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        return text

    def _is_admin_user(self, user_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –Ω–∞–ª–∏—á–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∏–º–µ–Ω–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        admin_indicators = ['admin', '–∞–¥–º–∏–Ω', 'administrator']
        return any(indicator in user_name.lower() for indicator in admin_indicators)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    def _start_change_cost_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        try:
            order_id = int(callback.data.replace("orderadm_change_cost_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_CHANGING_COST,
                'order_id': order_id
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            order_details = self._get_order_details_admin(order_id)
            current_cost = order_details['order']['total_cost'] if order_details else 0
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{float(current_cost):.2f} —Ä—É–±.</b>\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
                parse_mode='HTML'
            )
            
            self.bot.register_next_step_handler(
                callback.message,
                lambda message: self._process_new_cost(message, order_id)
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

    def _process_new_cost(self, message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        try:
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            try:
                new_cost = float(message.text.strip().replace(',', '.'))
                if new_cost < 0:
                    raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            except ValueError:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = self.db_manager.update_order_field(order_id, 'total_cost', new_cost)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)
            
            if success:
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_cost:.2f} —Ä—É–±.</b>",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                order_details = self._get_order_details_admin(order_id)
                keyboard = AdminConstants.create_order_detail_keyboard(order_id)
                text = self._format_order_details_admin(order_details)
                
                self.bot.send_message(
                    message.chat.id,
                    text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
    def _start_change_delivery_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            order_id = int(callback.data.replace("orderadm_change_delivery_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_CHANGING_DELIVERY,
                'order_id': order_id
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            order_details = self._get_order_details_admin(order_id)
            current_delivery = order_details['order']['delivery_type'] if order_details else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            current_address = order_details['order']['delivery_address'] if order_details else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üöó –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data=f"delivery_type_{order_id}_pickup"),
                types.InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"delivery_type_{order_id}_delivery")
            )
            keyboard.add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"orderadm_order_{order_id}")
            )
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üöö <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: <b>{current_delivery}</b>\n"
                    f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: <b>{current_address}</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")

    def _start_edit_delivery_type(self, callback: CallbackQuery):
        try:
            parts = callback.data.split('_')
            order_id = int(parts[2])
            delivery_type = parts[3]  # 'pickup' –∏–ª–∏ 'delivery'
            
            delivery_type_text = "–°–∞–º–æ–≤—ã–≤–æ–∑" if delivery_type == "pickup" else "–î–æ—Å—Ç–∞–≤–∫–∞"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
            self.db_manager.update_order_field(order_id, 'delivery_type', delivery_type_text)
            
            if delivery_type == "delivery":
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                user_id = callback.from_user.id
                self.states_manager.set_user_state(user_id, {
                    'state': UserStates.ADMIN_CHANGING_DELIVERY_ADDRESS,
                    'order_id': order_id
                })
                
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text=f"üìç <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:</b>",
                    parse_mode='HTML'
                )
                
                self.bot.register_next_step_handler(
                    callback.message,
                    lambda message: self._process_delivery_address(message, order_id)
                )
            else:
                # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –æ—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å
                self.db_manager.update_order_field(order_id, 'delivery_address', None)
                
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text=f"‚úÖ –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>–°–∞–º–æ–≤—ã–≤–æ–∑</b>",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                self._show_updated_order_details(callback.message.chat.id, order_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")

    def _process_delivery_address(self, message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            user_id = message.from_user.id
            delivery_address = message.text.strip()
            
            if not delivery_address:
                self.bot.send_message(message.chat.id, "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            success = self.db_manager.update_order_field(order_id, 'delivery_address', delivery_address)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)
            
            if success:
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{delivery_address}</b>",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                self._show_updated_order_details(message.chat.id, order_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    def _start_change_ready_date_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        try:
            order_id = int(callback.data.replace("orderadm_change_ready_date_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_CHANGING_READY_DATE,
                'order_id': order_id
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            order_details = self._get_order_details_admin(order_id)
            current_date = order_details['order']['ready_at'] if order_details else None
            
            current_date_text = current_date.strftime('%d.%m.%Y %H:%M') if current_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"‚è∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <b>{current_date_text}</b>\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM</b>\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 14:30</code>",
                parse_mode='HTML'
            )
            
            self.bot.register_next_step_handler(
                callback.message,
                lambda message: self._process_new_ready_date(message, order_id)
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã")

    def _process_new_ready_date(self, message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        try:
            user_id = message.from_user.id
            date_text = message.text.strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                new_date = datetime.strptime(date_text, '%d.%m.%Y %H:%M')
            except ValueError:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:MM</b>\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.2024 14:30</code>",
                    parse_mode='HTML'
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = self.db_manager.update_order_field(order_id, 'ready_at', new_date)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)
            
            if success:
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_date.strftime('%d.%m.%Y %H:%M')}</b>",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                self._show_updated_order_details(message.chat.id, order_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    def _start_change_quantity_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            order_id = int(callback.data.replace("orderadm_change_quantity_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_CHANGING_QUANTITY,
                'order_id': order_id
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            order_details = self._get_order_details_admin(order_id)
            current_quantity = order_details['order']['quantity'] if order_details else None
            current_weight = order_details['order']['weight_grams'] if order_details else None
            
            product = order_details['product'] if order_details else None
            measurement_unit = product['measurement_unit'] if product else '—à—Ç'
            
            quantity_text = ""
            if current_weight:
                quantity_text = f"{current_weight} –≥"
            elif current_quantity:
                quantity_text = f"{current_quantity} {measurement_unit}"
            else:
                quantity_text = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚öñÔ∏è –í–µ—Å (–≥—Ä–∞–º–º—ã)", callback_data=f"quantity_type_{order_id}_weight"),
                types.InlineKeyboardButton("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—à—Ç)", callback_data=f"quantity_type_{order_id}_quantity")
            )
            keyboard.add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"orderadm_order_{order_id}")
            )
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"‚öñÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity_text}</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

    

    def _process_new_quantity(self, message: Message, order_id: int, quantity_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            try:
                new_value = float(message.text.strip().replace(',', '.'))
                if new_value <= 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            except ValueError:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            if quantity_type == "weight":
                success1 = self.db_manager.update_order_field(order_id, 'weight_grams', new_value)
                success2 = self.db_manager.update_order_field(order_id, 'quantity', None)
                success = success1 and success2
                display_text = f"{new_value} –≥"
            else:
                success1 = self.db_manager.update_order_field(order_id, 'quantity', int(new_value))
                success2 = self.db_manager.update_order_field(order_id, 'weight_grams', None)
                success = success1 and success2
                display_text = f"{int(new_value)} —à—Ç"
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)
            
            if success:
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{display_text}</b>",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                self._show_updated_order_details(message.chat.id, order_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    def _start_change_payment_status_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            order_id = int(callback.data.replace("orderadm_change_payment_status_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_CHANGING_PAYMENT_STATUS,
                'order_id': order_id
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            order_details = self._get_order_details_admin(order_id)
            current_status = order_details['order']['payment_status'] if order_details else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω", callback_data=f"payment_status_{order_id}_paid"),
                types.InlineKeyboardButton("‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω", callback_data=f"payment_status_{order_id}_unpaid")
            )
            keyboard.add(
                types.InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", callback_data=f"payment_status_{order_id}_pending")
            )
            keyboard.add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"orderadm_order_{order_id}")
            )
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üí≥ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{current_status}</b>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")

    

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
    def _start_add_admin_notes_process(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        try:
            order_id = int(callback.data.replace("orderadm_add_admin_notes_", ""))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
            user_id = callback.from_user.id
            self.states_manager.set_user_state(user_id, {
                'state': UserStates.ADMIN_ADDING_ORDER_NOTES,
                'order_id': order_id
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
            order_details = self._get_order_details_admin(order_id)
            current_notes = order_details['order']['admin_notes'] if order_details else None
            
            current_notes_text = current_notes if current_notes else "–ü—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç"
            
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: <i>{current_notes_text}</i>\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:",
                parse_mode='HTML'
            )
            
            self.bot.register_next_step_handler(
                callback.message,
                lambda message: self._process_admin_notes(message, order_id)
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è")

    def _process_admin_notes(self, message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        try:
            user_id = message.from_user.id
            admin_notes = message.text.strip()
            
            if not admin_notes:
                self.bot.send_message(message.chat.id, "‚ùå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = self.db_manager.update_order_admin_notes(order_id, admin_notes)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_user_state(user_id)
            
            if success:
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–∫–∞–∑—É #{order_id}",
                    parse_mode='HTML'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                self._show_updated_order_details(message.chat.id, order_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    def _show_updated_order_details(self, chat_id: int, order_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
        try:
            order_details = self._get_order_details_admin(order_id)
            keyboard = AdminConstants.create_order_detail_keyboard(order_id)
            text = self._format_order_details_admin(order_details)
            
            self.bot.send_message(
                chat_id,
                text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")