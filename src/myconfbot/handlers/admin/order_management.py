import logging
from telebot import types
from telebot.types import Message, CallbackQuery

from .admin_base import BaseAdminHandler
from src.myconfbot.models import OrderStatus


class OrderManagementHandler(BaseAdminHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
        self._register_order_status_handlers()
    
    def _register_order_status_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('status_'))
        def change_order_status(callback: CallbackQuery):
            self._change_order_status(callback)
    
    def show_active_orders(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        if not self._check_admin_access(message=message):
            return
        
        orders = self.db_manager.get_orders_by_status([OrderStatus.NEW, OrderStatus.IN_PROGRESS])
        
        if not orders:
            self.bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return
        
        response = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            response += f"üÜî #{order.id} | {order.status.value}\n"
            response += f"üë§ {order.user.full_name}\n"
            response += f"üìû {order.user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            response += f"üìÖ {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            response += f"üí∞ {order.total_amount} —Ä—É–±.\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
            keyboard = types.InlineKeyboardMarkup()
            if order.status == OrderStatus.NEW:
                keyboard.add(types.InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç—É", callback_data=f"status_{order.id}_in_progress"))
            elif order.status == OrderStatus.IN_PROGRESS:
                keyboard.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"status_{order.id}_ready"))
            keyboard.add(types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order.id}_cancelled"))
            
            self.bot.send_message(message.chat.id, response, reply_markup=keyboard)
            response = ""
    
    def _change_order_status(self, callback: CallbackQuery):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            _, order_id, new_status = callback.data.split('_')
            order_id = int(order_id)
            
            status_enum = OrderStatus(new_status)
            if self.db_manager.update_order_status(order_id, status_enum):
                self.bot.answer_callback_query(callback.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
                self.bot.edit_message_text(
                    f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}",
                    callback.message.chat.id,
                    callback.message.message_id
                )
            else:
                self.bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)