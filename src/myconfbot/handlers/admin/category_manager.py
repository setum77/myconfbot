# category_manager.py
import logging
from telebot import types
from telebot.types import Message, CallbackQuery
from ..shared.product_constants import ProductConstants
from .admin_base import BaseAdminHandler
from src.myconfbot.services.auth_service import AuthService

logger = logging.getLogger(__name__)

class CategoryManager:
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    def __init__(self, bot, db_manager, states_manager, auth_service: AuthService):
        self.bot = bot
        self.db_manager = db_manager
        self.states_manager = states_manager
        self.auth_service = auth_service

    # === –û–°–ù–û–í–ù–´–ï –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def handle_category_callbacks(self, callback: CallbackQuery):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        logger.info(f"Received category callback: {callback.data}")
        
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            data = callback.data
            logger.info(f"Processing callback data: {data}")
            
            if data == 'category_manage':
                self._show_category_management(callback)
            elif data == 'category_add':
                self.start_creation(callback)
            elif data == 'category_edit_list':
                self.start_editing(callback)
            elif data.startswith('category_edit_'):
                # category_edit_123 - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_id = int(data.replace('category_edit_', ''))
                self.show_edit_options(callback, category_id)
            elif data.startswith('category_rename_'):
                category_id = int(data.replace('category_rename_', ''))
                self._start_category_rename(callback, category_id)
            elif data.startswith('category_desc_'):
                category_id = int(data.replace('category_desc_', ''))
                self._start_category_desc_edit(callback, category_id)
            elif data.startswith('category_delete_ask_'):
                category_id = int(data.replace('category_delete_ask_', ''))
                self._show_delete_confirmation(callback, category_id)
            elif data.startswith('category_delete_confirm_'):
                category_id = int(data.replace('category_delete_confirm_', ''))
                self._delete_category(callback, category_id)
            elif data == 'category_back_manage':
                # –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                self._show_category_management(callback)
            elif data == 'category_back_list':
                # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                self.start_editing(callback)
            elif data == 'category_manadge_product_back_list':
                # –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
                self.back_to_product_management(callback)
            else:
                logger.warning(f"Unknown callback data: {data}")
                self.bot.answer_callback_query(callback.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                return
                
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ category callback: {e}", exc_info=True)
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    def handle_category_states(self, message: Message):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if not self._check_admin_access(message=message):
            return  

        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        
        if not user_state:
            return
        
        state = user_state.get('state', '')
        
        if state == 'category_adding_name':
            self._handle_category_name(message)
        elif state == 'category_adding_description':
            self._handle_category_description(message)
        elif state.startswith('category_editing_name_'):
            self._handle_category_rename(message, state)
        elif state.startswith('category_editing_desc_'):
            self._handle_category_desc_edit(message, state)

    # === –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô ===
    
    def start_creation(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        logger.info(f'Starting category creation for user {callback.from_user.id}')
        
        self.states_manager.set_management_state(callback.from_user.id, {
            'state': 'category_adding_name',
            'category_data': {}
        })
        
        try:
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            pass
        
        self.bot.send_message(
            callback.message.chat.id,
            "üìÅ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑–±–µ–≥–∞–π—Ç–µ –∫–∞–≤—ã—á–∫–∏, —ç–º–æ–¥–∑–∏, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã):",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_cancel_keyboard()
        )

    def _handle_category_name(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id,
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self._show_category_management_message(message)
            return
        
        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        
        if not user_state or user_state.get('state') != 'category_adding_name':
            return
        
        category_data = user_state.get('category_data', {})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        is_valid, error_msg = self.validate_category_name(message.text)
        if not is_valid:
            self.bot.send_message(message.chat.id, error_msg)
            return
        
        category_data['name'] = message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.states_manager.set_management_state(user_id, {
            'state': 'category_adding_description',
            'category_data': category_data
        })
        
        self.bot.send_message(
            message.chat.id,
            "üìÑ –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_skip_keyboard()
        )

    def _handle_category_description(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id,
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self._show_category_management_message(message)
            return
        
        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        
        if not user_state or user_state.get('state') != 'category_adding_description':
            return
        
        category_data = user_state.get('category_data', {})
        
        if message.text.lower() == '‚è≠Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            category_data['description'] = ''
        else:
            category_data['description'] = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if self._save_category(category_data):
            self.states_manager.clear_management_state(user_id)
            
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                parse_mode='HTML',
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            self._show_category_management_message(message)
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ProductConstants.create_cancel_keyboard()
            )

    # === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô ===
    
    def start_editing(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = self.db_manager.get_all_categories()
        
        if not categories:
            self.bot.send_message(
                callback.message.chat.id,
                "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        for category in categories:
            product_count = len(self.db_manager.get_products_by_category(category['id']))
            
            keyboard.add(types.InlineKeyboardButton(
                f"üìÅ {category['name']} ({product_count} —Ç–æ–≤–∞—Ä–æ–≤)",
                callback_data=f"category_edit_{category['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="category_back_manage"
        ))
        
        try:
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                callback.message.chat.id,
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                parse_mode='HTML',
                reply_markup=keyboard
            )

    def show_edit_options(self, callback: CallbackQuery, category_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category = self.db_manager.get_category_by_id(category_id)
        if not category:
            self.bot.answer_callback_query(callback.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        product_count = len(self.db_manager.get_products_by_category(category_id))
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"category_rename_{category_id}"),
            types.InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"category_desc_{category_id}")
        )
        keyboard.add(
            types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"category_delete_ask_{category_id}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="category_back_list")
        )
        
        category_info = (
            f"üìÅ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {category['name']}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {category['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {product_count}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {category['created_at'].strftime('%d.%m.%Y')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        try:
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=category_info,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                callback.message.chat.id,
                category_info,
                parse_mode='HTML',
                reply_markup=keyboard
            )

    def _start_category_rename(self, callback: CallbackQuery, category_id: int):
        """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.states_manager.set_management_state(callback.from_user.id, {
            'state': f'category_editing_name_{category_id}',
            'category_id': category_id
        })
        
        category = self.db_manager.get_category_by_id(category_id)
        if not category:
            self.bot.answer_callback_query(callback.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.bot.send_message(
            callback.message.chat.id,
            f"‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{category['name']}</b>\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_cancel_keyboard()
        )

    def _start_category_desc_edit(self, callback: CallbackQuery, category_id: int):
        """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.states_manager.set_management_state(callback.from_user.id, {
            'state': f'category_editing_desc_{category_id}',
            'category_id': category_id
        })
        
        category = self.db_manager.get_category_by_id(category_id)
        if not category:
            self.bot.answer_callback_query(callback.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.bot.send_message(
            callback.message.chat.id,
            f"üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <b>{category['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_skip_keyboard()
        )

    def _handle_category_rename(self, message: Message, state: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self._show_category_management_message(message)
            return
        
        category_id = int(state.replace('category_editing_name_', ''))
        success, message_text = self.update_category_name(category_id, message.text)
        
        self.bot.send_message(message.chat.id, message_text)
        if success:
            self.states_manager.clear_management_state(message.from_user.id)
            self._show_category_management_message(message)

    def _handle_category_desc_edit(self, message: Message, state: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            self._show_category_management_message(message)
            return
        
        category_id = int(state.replace('category_editing_desc_', ''))
        new_description = '' if message.text.lower() == '‚è≠Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else message.text
        success, message_text = self.update_category_description(category_id, new_description)
        
        self.bot.send_message(message.chat.id, message_text)
        if success:
            self.states_manager.clear_management_state(message.from_user.id)
            self._show_category_management_message(message)

    # === –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô ===
    
    def _show_delete_confirmation(self, callback: CallbackQuery, category_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        category = self.db_manager.get_category_by_id(category_id)
        if not category:
            self.bot.answer_callback_query(callback.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        product_count = len(self.db_manager.get_products_by_category(category_id))
        
        if product_count > 0:
            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning_text = (
                f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category['name']} - {product_count}</b> —Ç–æ–≤–∞—Ä–æ–≤.\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                f"‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</b>"
            )
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data=f"category_edit_products_{category_id}"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_edit_{category_id}")
            )
            
            try:
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text=warning_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            except:
                self.bot.send_message(
                    callback.message.chat.id,
                    warning_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        else:
                  
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"category_delete_confirm_{category_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"category_edit_{category_id}")
            )
            
            confirmation_text = (
                f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {category['name']}\n"
                f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {category['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üì¶ <b>–¢–æ–≤–∞—Ä–æ–≤:</b> {product_count}\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?"
            )
            
            try:
                self.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text=confirmation_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            except:
                self.bot.send_message(
                    callback.message.chat.id,
                    confirmation_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

    # def _delete_category_handler(self, callback: CallbackQuery, category_id: int):
    #     """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    #     success, message_text = self.delete_category(category_id)
        
    #     try:
    #         self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    #     except:
    #         pass
            
    #     self.bot.send_message(callback.message.chat.id, message_text)
    #     self._show_category_management(callback)

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _save_category(self, category_data: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î"""
        try:
            return self.db_manager.add_category(
                name=category_data['name'],
                description=category_data.get('description', '')
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return False

    def update_category_name(self, category_id: int, new_name: str) -> tuple[bool, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        is_valid, error_msg = self.validate_category_name(new_name, exclude_category_id=category_id)
        if not is_valid:
            return False, error_msg
        
        try:
            success = self.db_manager.update_category_field(category_id, 'name', new_name)
            return success, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!" if success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"

    def update_category_description(self, category_id: int, new_description: str) -> tuple[bool, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            success = self.db_manager.update_category_field(category_id, 'description', new_description)
            return success, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!" if success else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"

    def _delete_category(self, callback: CallbackQuery, category_id: int) -> tuple[bool, str]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            product_count = len(self.db_manager.get_products_by_category(category_id))
            
            if product_count > 0:
                # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ—è–≤–∏–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                self.bot.send_message(
                    callback.message.chat.id,
                    f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é! –í –Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å {product_count} —Ç–æ–≤–∞—Ä–æ–≤."
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                self.show_edit_options(callback, category_id)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            category = self.db_manager.get_category_by_id(category_id)
            if not category:
                self.bot.answer_callback_query(callback.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            success = self.db_manager._delete_category(category_id)
            
            if success:
                message_text = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
            else:
                message_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            message_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        try:
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            pass
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.bot.send_message(callback.message.chat.id, message_text)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        self._show_category_management(callback)

    def validate_category_name(self, name: str, exclude_category_id: int = None) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not name or len(name.strip()) == 0:
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if len(name) > 100:
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        categories = self.db_manager.get_all_categories()
        existing_names = []
        
        for cat in categories:
            if exclude_category_id and cat['id'] == exclude_category_id:
                continue
            existing_names.append(cat['name'].lower())
        
        if name.lower() in existing_names:
            return False, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        return True, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

    def get_categories_keyboard(self, include_cancel=True):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = self.db_manager.get_all_categories()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        for category in categories:
            keyboard.add(types.KeyboardButton(category['name']))
        
        if include_cancel:
            keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            
        return keyboard

    def create_management_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category_add"),
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_edit_list")
        )
        keyboard.add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="category_back_manage"),
            types.InlineKeyboardButton("üéÇ –í —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π", callback_data="category_manadge_product_back_list")
                     )
        return keyboard

    def _show_category_management(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–¥–ª—è callback)"""
        self._show_category_management_message(callback.message)

    def _show_category_management_message(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–¥–ª—è message)"""
        keyboard = self.create_management_keyboard()
        
        categories = self.db_manager.get_all_categories()
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\nüìÅ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
        
        for category in categories:
            product_count = len(self.db_manager.get_products_by_category(category['id']))
            stats_text += f"‚Ä¢ {category['name']}: {product_count} —Ç–æ–≤–∞—Ä–æ–≤\n"
        
        self.bot.send_message(
            message.chat.id,
            stats_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _check_admin_access(self, callback: CallbackQuery = None, message: Message = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if callback:
            user_id = callback.from_user.id
            chat_id = callback.message.chat.id if callback.message else callback.from_user.id
        elif message:
            user_id = message.from_user.id
            chat_id = message.chat.id
        else:
            return False
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if user_id == self.bot.get_me().id:
            return True
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        is_admin = self.auth_service.is_admin(user_id)
        
        if not is_admin:
            error_msg = "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            if callback:
                self.bot.answer_callback_query(callback.id, error_msg)
            else:
                self.bot.send_message(chat_id, error_msg)
            return False
        
        return True
    
    def back_to_product_management(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            pass
        self.bot.send_message(
            callback.message.chat.id,
            "üè™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ProductConstants.create_management_keyboard(),
            parse_mode='HTML'
        )