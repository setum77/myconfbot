# product_editor.py
import logging
import os
from telebot import types
from telebot.types import Message, CallbackQuery
from ..shared.product_constants import ProductConstants

logger = logging.getLogger(__name__)

class ProductEditor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    
    def __init__(self, bot, db_manager, states_manager, photos_dir):
        self.bot = bot
        self.db_manager = db_manager
        self.states_manager = states_manager
        self.photos_dir = photos_dir

    def start_editing(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not self._check_admin_access(callback):
            return
        
        categories = self.db_manager.get_all_categories()
        
        if not categories:
            self.bot.send_message(
                callback.message.chat.id,
                "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=self._create_back_to_products_keyboard()
            )
            return
        
        # keyboard = ProductConstants.create_categories_keyboard_inline(
        #     categories=categories,
        #     db_manager=self.db_manager,
        #     back_callback="edit_select_category_{category['id']"
        # )

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        for category in categories:
            product_count = len(self.db_manager.get_products_by_category(category['id']))
            keyboard.add(types.InlineKeyboardButton(
                f"üìÅ {category['name']} ({product_count})",
                callback_data=f"edit_select_category_{category['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="edit_back_to_products"
        ))
        
        try:
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="üìÇ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                callback.message.chat.id,
                "üìÇ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        self.bot.answer_callback_query(callback.id)

    def handle_edit_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self._check_admin_access(callback):
            return
        
        try:
            data = callback.data
            
            if data.startswith('edit_select_category_'):
                category_id = int(data.replace('edit_select_category_', ''))
                self._show_products_for_editing(callback, category_id)
                
            elif data.startswith('edit_product_'):
                product_id = int(data.replace('edit_product_', ''))
                self._show_edit_options(callback, product_id)
                
            elif data.startswith('edit_option_'):
                parts = data.split('_')
                if len(parts) >= 4:
                    product_id = int(parts[2])
                    option = '_'.join(parts[3:])
                    self._start_editing_option(callback, product_id, option)
                else:
                    self.bot.answer_callback_query(callback.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback")

            elif data.startswith('edit_photo_manage_'):
                product_id = int(data.replace('edit_photo_manage_', ''))
                self._show_photo_management(callback, product_id)
                
            elif data == 'edit_back_to_categories':
                self.start_editing(callback)
                
            elif data == 'edit_back_to_categories':
                self.start_editing(callback)
                
            elif data == 'edit_back_to_products':
                user_state = self.states_manager.get_management_state(callback.from_user.id)
                if user_state and 'category_id' in user_state:
                    category_id = user_state.get('category_id')
                    self._show_products_for_editing(callback, category_id)
                else:
                    self.start_editing(callback)
                
            elif data == 'edit_back_to_products_menu':
                self._back_to_products_menu(callback.message)

            elif data.startswith('edit_delete_option_'):
                product_id = int(data.replace('edit_delete_option_', ''))
                self._show_delete_confirmation(callback, product_id)
            
            elif data.startswith('edit_delete_confirm_'):
                product_id = int(data.replace('edit_delete_confirm_', ''))
                self._delete_product(callback, product_id)
                
            elif data.startswith('edit_back_to_options_'):
                product_id = int(data.replace('edit_back_to_options_', ''))
                self._show_edit_options(callback, product_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ edit callback: {e}", exc_info=True)
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    def handle_edit_states(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        
        if not user_state:
            return
        
        state = user_state.get('state')
        product_id = user_state.get('product_id')
        
        if not product_id:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            if state == 'editing_name':
                self._update_product_name(message, product_id)
                
            elif state == 'editing_description':
                self._update_product_description(message, product_id)
                
            elif state == 'editing_quantity':
                self._update_product_quantity(message, product_id)
                
            elif state == 'editing_price':
                self._update_product_price(message, product_id)
                
            elif state == 'editing_category':
                self._update_product_category(message, product_id)
                
            elif state == 'editing_unit':
                self._update_product_unit(message, product_id)
                
            elif state == 'editing_prepayment':
                self._update_product_prepayment(message, product_id)
                
            elif state == 'editing_availability':
                self._update_product_availability(message, product_id)
                
            elif state == 'editing_add_photo':
                self._add_product_photo(message, product_id)
                
            elif state == 'editing_main_photo':
                self._select_main_photo(message, product_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

    def _show_products_for_editing(self, callback: CallbackQuery, category_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        products = self.db_manager.get_products_by_category(category_id)
        
        if not products:
            self.bot.send_message(
                callback.message.chat.id,
                "üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=self._create_edit_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º category_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        current_state = self.states_manager.get_management_state(callback.from_user.id) or {}
        current_state.update({
            'state': 'editing_category',
            'category_id': category_id
        })
        self.states_manager.set_management_state(callback.from_user.id, current_state)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self.db_manager.get_all_categories()
        category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        for product in products:
            status_emoji = "‚úÖ" if product['is_available'] else "‚ùå"
            photo_count = len(self.db_manager.get_product_photos(product['id']))
            keyboard.add(types.InlineKeyboardButton(
                f"{status_emoji} #{product['id']} {product['name']} - {product['price']} —Ä—É–±. üì∏ {photo_count}",
                callback_data=f"edit_product_{product['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="edit_back_to_categories"
        ))
        
        try:
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                callback.message.chat.id,
                f"üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                parse_mode='HTML',
                reply_markup=keyboard
            )

    def _show_edit_options(self, callback: CallbackQuery, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        self.states_manager.set_management_state(callback.from_user.id, {
            'state': 'editing_product',
            'product_id': product_id
        })
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–º—è", callback_data=f"edit_option_{product_id}_name"),
            types.InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"edit_option_{product_id}_category")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_option_{product_id}_description"),
            types.InlineKeyboardButton("üìè –ï–¥–∏–Ω–∏—Ü–∞", callback_data=f"edit_option_{product_id}_unit")
        )
        keyboard.add(
            types.InlineKeyboardButton("‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_option_{product_id}_quantity"),
            types.InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_option_{product_id}_price")
        )
        keyboard.add(
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data=f"edit_option_{product_id}_prepayment"),
            types.InlineKeyboardButton("üîÑ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data=f"edit_option_{product_id}_availability")
        )
        
        # –§–æ—Ç–æ –æ–ø—Ü–∏–∏
        keyboard.add(
            types.InlineKeyboardButton("üì∏ –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ", callback_data=f"photo_manage_{product_id}"),
            # types.InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ", callback_data=f"edit_option_{product_id}_main_photo")
        )
        
        keyboard.add(
            types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"edit_delete_option_{product_id}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="edit_back_to_products")
        )
        
        product_text = self._format_product_details(product)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        photos = self.db_manager.get_product_photos(product_id)
        
        # keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data=f"view_back_to_category_{product['category_id']}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –º–µ–Ω—é",
            callback_data="view_back_products"
        ))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
        if photos and any(os.path.exists(p['photo_path']) for p in photos):
            media_group = []
            file_objects = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            try:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–µ—Ä–≤–æ–µ
                main_photos = [p for p in photos if p.get('is_main')]
                other_photos = [p for p in photos if not p.get('is_main')]
                sorted_photos = main_photos + other_photos
                
                for i, photo_info in enumerate(sorted_photos[:10]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    if os.path.exists(photo_info['photo_path']):
                        file_obj = open(photo_info['photo_path'], 'rb')
                        file_objects.append(file_obj)
                        
                        if i == 0:  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                            media_group.append(types.InputMediaPhoto(
                                file_obj,
                                caption=product_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                parse_mode='HTML'
                            ))
                        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                            media_group.append(types.InputMediaPhoto(file_obj))
                
                if media_group:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    self.bot.send_media_group(
                        callback.message.chat.id, 
                        media_group, 
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    self.bot.send_message(
                        callback.message.chat.id,
                        "üì∏ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞",
                        reply_markup=keyboard
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                self.bot.send_message(
                    callback.message.chat.id,
                    text=product_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                for file_obj in file_objects:
                    try:
                        file_obj.close()
                    except:
                        pass
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                callback.message.chat.id,
                text=product_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )

        # try:
        #     self.bot.edit_message_text(
        #         chat_id=callback.message.chat.id,
        #         message_id=callback.message.message_id,
        #         text=product_text,
        #         parse_mode='HTML',
        #         reply_markup=keyboard
        #     )
        # except:
        #     self.bot.send_message(
        #         callback.message.chat.id,
        #         product_text,
        #         parse_mode='HTML',
        #         reply_markup=keyboard
        #     )

    def _format_product_details(self, product: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        text = "üéÇ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
        text += f"üÜî <b>ID:</b> {product['id']}\n"
        text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
        text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category_name']}\n"
        text += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['short_description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üîÑ <b>–î–æ—Å—Ç—É–ø–µ–Ω:</b> {'‚úÖ –î–∞' if product['is_available'] else '‚ùå –ù–µ—Ç'}\n"
        text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product['quantity'] } {product['measurement_unit']}\n"
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.\n"
        text += f"üí≥ <b>–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:</b> {product['prepayment_conditions'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {product['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {product['updated_at'].strftime('%d.%m.%Y %H:%M') if product['updated_at'] else '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è'}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        photos = self.db_manager.get_product_photos(product['id'])
        if photos:
            main_photos = [p for p in photos if p['is_main']]
            text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b> {len(photos)} —à—Ç.\n"
            if main_photos:
                text += f"üìå <b>–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ:</b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
        else:
            text += "\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b> –ù–µ—Ç\n"
        
        return text
    
    def _start_editing_option(self, callback: CallbackQuery, product_id: int, option: str):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø—Ü–∏–∏"""
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.states_manager.set_management_state(callback.from_user.id, {
            'state': f'editing_{option}',
            'product_id': product_id
        })
        
        messages = {
            'name': "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            'category': "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            'description': "üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            'unit': "üìè –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
            'quantity': "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:",
            'price': "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:",
            'prepayment': "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:",
            'availability': "üîÑ –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞?",
            'add_photo': "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:",
            'main_photo': "üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ:"
        }
        
        if option in ['category', 'unit', 'availability', 'prepayment']:
            # –î–ª—è —ç—Ç–∏—Ö –æ–ø—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if option == 'category':
                keyboard = self._create_categories_keyboard(row_width=2)
            elif option == 'unit':
                keyboard = ProductConstants.create_measurement_units_keyboard()
            elif option == 'availability':
                keyboard = ProductConstants.create_availability_keyboard()
            elif option == 'prepayment':
                keyboard = ProductConstants.create_prepayment_keyboard()
            
            self.bot.send_message(
                callback.message.chat.id,
                messages[option],
                parse_mode='HTML',
                reply_markup=keyboard
            )
        elif option == 'main_photo':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
            photos = self.db_manager.get_product_photos(product_id)
            if not photos:
                self.bot.send_message(callback.message.chat.id, "‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
                self._return_to_edit_options(callback.message, product_id)
                return
            
            photos_text = "\n".join([f"{i}. üì∏ –§–æ—Ç–æ {i}" for i in range(1, len(photos) + 1)])
            self.bot.send_message(
                callback.message.chat.id,
                f"üì∏ –í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ</b>:\n\n{photos_text}",
                parse_mode='HTML',
                reply_markup=self._create_photo_selection_keyboard(photos)
            )
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø—Ü–∏–π
            self.bot.send_message(
                callback.message.chat.id,
                messages[option],
                parse_mode='HTML',
                reply_markup=ProductConstants.create_cancel_keyboard()
            )

    def _check_cancellation(self, message: Message, product_id: int = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self._cancel_creation(message, product_id)
            return True
        return False

    def _cancel_creation(self, message: Message, product_id: int = None):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.states_manager.clear_management_state(message.from_user.id)
        self.bot.send_message(
            message.chat.id,
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–ø—Ü–∏—è–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω product_id
        if product_id:
            self._back_to_products_menu(message)
   
    # –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
    def _update_product_name(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        new_name = message.text
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–∞: {new_name}")
        
        if self.db_manager.update_product_field(product_id, 'name', new_name):
            logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(message.chat.id, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            self._return_to_edit_options(message, product_id)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")

    def _update_product_description(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        new_description = message.text
        if self.db_manager.update_product_field(product_id, 'short_description', new_description):
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(message.chat.id, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            self._return_to_edit_options(message, product_id)
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")

    def _update_product_quantity(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        try:
            new_quantity = float(message.text)
            if self.db_manager.update_product_field(product_id, 'quantity', new_quantity):
                self.states_manager.clear_management_state(message.from_user.id)
                self.bot.send_message(message.chat.id, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                self._return_to_edit_options(message, product_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        except ValueError:
            self.bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

    def _update_product_price(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        try:
            new_price = float(message.text)
            if self.db_manager.update_product_field(product_id, 'price', new_price):
                self.states_manager.clear_management_state(message.from_user.id)
                self.bot.send_message(message.chat.id, "‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                self._return_to_edit_options(message, product_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
        except ValueError:
            self.bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã")

    def _update_product_category(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        categories = self.db_manager.get_all_categories()
        category_names = [cat['name'].lower() for cat in categories]
        
        if message.text.lower() not in category_names:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=self._create_categories_keyboard()
            )
            return
        
        category_id = next((cat['id'] for cat in categories if cat['name'].lower() == message.text.lower()), None)
        
        if category_id and self.db_manager.update_product_field(product_id, 'category_id', category_id):
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=types.ReplyKeyboardRemove()
                )
            self._return_to_edit_options(message, product_id)
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def _update_product_unit(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        valid_units = ProductConstants.MEASUREMENT_UNITS
        
        if message.text not in valid_units:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=self._create_measurement_units_keyboard()
            )
            return
        
        if self.db_manager.update_product_field(product_id, 'measurement_unit', message.text):
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id, "‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=types.ReplyKeyboardRemove()
                )
            self._return_to_edit_options(message, product_id)
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")

    def _update_product_prepayment(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        valid_options = ProductConstants.PREPAYMENT_OPTIONS
        
        if message.text not in valid_options:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=self._create_prepayment_keyboard()
            )
            return
        
        if self.db_manager.update_product_field(product_id, 'prepayment_conditions', message.text):
            self.states_manager.clear_management_state(message.from_user.id)
            self.bot.send_message(
                message.chat.id, "‚úÖ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                reply_markup=types.ReplyKeyboardRemove())
            self._return_to_edit_options(message, product_id)
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã")

    def _update_product_availability(self, message: Message, product_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if self._check_cancellation(message, product_id):
            return

        if message.text == "‚úÖ –î–∞":
            new_availability = True
        elif message.text == "‚ùå –ù–µ—Ç":
            new_availability = False
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=self._create_availability_keyboard()
            )
            return
        
        if self.db_manager.update_product_field(product_id, 'is_available', new_availability):
            self.states_manager.clear_management_state(message.from_user.id)
            status = "–¥–æ—Å—Ç—É–ø–µ–Ω" if new_availability else "–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            self.bot.send_message(
                message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä —Ç–µ–ø–µ—Ä—å {status} –¥–ª—è –∑–∞–∫–∞–∑–∞!",
                reply_markup=types.ReplyKeyboardRemove())
            self._return_to_edit_options(message, product_id)
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")

    def _show_photo_management(self, callback: CallbackQuery, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PhotoManager –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        from .photo_manager import PhotoManager
        photo_manager = PhotoManager(self.bot, self.db_manager, self.states_manager, self.photos_dir)
        photo_manager.show_photo_management(callback.message, product_id)
        
        self.bot.answer_callback_query(callback.id)

    # def _add_product_photo(self, message: Message, product_id: int):
    #     """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ —Ç–æ–≤–∞—Ä—É"""
    #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    #     if self._check_cancellation(message, product_id):
    #         return

    #     if message.content_type != 'photo':
    #         self.bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
    #         return
        
    #     try:
    #         photo_id = message.photo[-1].file_id
    #         photo_path = self._save_photo(photo_id, product_id)
            
    #         if photo_path and self.db_manager.add_product_photo(product_id, photo_path, is_main=False):
    #             self.bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É!")
    #             self._return_to_edit_options(message, product_id)
    #         else:
    #             self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    #         self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

    # def _select_main_photo(self, message: Message, product_id: int):
    #     """–í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    #     if self._check_cancellation(message, product_id):
    #         return

    #     photos = self.db_manager.get_product_photos(product_id)
        
    #     if not photos:
    #         self.bot.send_message(message.chat.id, "‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    #         self._return_to_edit_options(message, product_id)
    #         return
        
    #     try:
    #         photo_number = int(message.text)
    #         if 1 <= photo_number <= len(photos):
    #             selected_photo = photos[photo_number - 1]
                
    #             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
    #             if self.db_manager.set_main_photo(product_id, selected_photo['photo_path']):
    #                 self.bot.send_message(message.chat.id, "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    #                 self._return_to_edit_options(message, product_id)
    #             else:
    #                 self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ")
    #         else:
    #             self.bot.send_message(
    #                 message.chat.id,
    #                 f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(photos)}:",
    #                 reply_markup=self._create_photo_selection_keyboard(photos)
    #             )
    #     except ValueError:
    #         self.bot.send_message(
    #             message.chat.id,
    #             "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ:",
    #             reply_markup=self._create_photo_selection_keyboard(photos)
            # )

    def _show_delete_confirmation(self, callback: CallbackQuery, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        product_text = self._format_product_details(product)
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"edit_delete_confirm_{product_id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_back_to_options_{product_id}")
        )
        
        try:
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n{product_text}\n\n"
                    "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                callback.message.chat.id,
                f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n{product_text}\n\n"
                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
                parse_mode='HTML',
                reply_markup=keyboard
            )

    def _delete_product(self, callback: CallbackQuery, product_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            product = self.db_manager.get_product_by_id(product_id)
            
            if not product:
                self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # 1. –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å –¥–∏—Å–∫–∞
            photos = self.db_manager.get_product_photos(product_id)
            for photo in photos:
                try:
                    if os.path.exists(photo['photo_path']):
                        os.remove(photo['photo_path'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            
            # 2. –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Ç–æ–≤–∞—Ä–∞
            product_dir = os.path.join(self.photos_dir, str(product_id))
            try:
                if os.path.exists(product_dir):
                    import shutil
                    shutil.rmtree(product_dir)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            
            # 3. –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager.delete_product(product_id):
                try:
                    self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
                except:
                    pass
                    
                self.bot.send_message(
                    callback.message.chat.id,
                    f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                user_state = self.states_manager.get_management_state(callback.from_user.id)
                if user_state and 'category_id' in user_state:
                    category_id = user_state.get('category_id')
                    self._show_products_for_editing(callback, category_id)
                else:
                    self.start_editing(callback)
            else:
                self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    def _return_to_edit_options(self, message: Message, product_id: int):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø—Ü–∏—è–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        self.states_manager.clear_management_state(message.from_user.id)
        
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self._back_to_products_menu(message)
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–º—è", callback_data=f"edit_option_{product_id}_name"),
            types.InlineKeyboardButton("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"edit_option_{product_id}_category")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_option_{product_id}_description"),
            types.InlineKeyboardButton("üìè –ï–¥–∏–Ω–∏—Ü–∞", callback_data=f"edit_option_{product_id}_unit")
        )
        keyboard.add(
            types.InlineKeyboardButton("‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_option_{product_id}_quantity"),
            types.InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_option_{product_id}_price")
        )
        keyboard.add(
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data=f"edit_option_{product_id}_prepayment"),
            types.InlineKeyboardButton("üîÑ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data=f"edit_option_{product_id}_availability")
        )
        
        keyboard.add(
            types.InlineKeyboardButton("üì∏ –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ", callback_data=f"photo_manage_{product_id}")
            # types.InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_option_{product_id}_add_photo"),
            # types.InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ", callback_data=f"edit_option_{product_id}_main_photo")
        )
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data="edit_back_to_products"
        ))
        
        product_text = self._format_product_details(product)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        photos = self.db_manager.get_product_photos(product_id)
        
        # keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data=f"view_back_to_category_{product['category_id']}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –º–µ–Ω—é",
            callback_data="view_back_products"
        ))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
        if photos and any(os.path.exists(p['photo_path']) for p in photos):
            media_group = []
            file_objects = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            try:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–µ—Ä–≤–æ–µ
                main_photos = [p for p in photos if p.get('is_main')]
                other_photos = [p for p in photos if not p.get('is_main')]
                sorted_photos = main_photos + other_photos
                
                for i, photo_info in enumerate(sorted_photos[:10]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    if os.path.exists(photo_info['photo_path']):
                        file_obj = open(photo_info['photo_path'], 'rb')
                        file_objects.append(file_obj)
                        
                        if i == 0:  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                            media_group.append(types.InputMediaPhoto(
                                file_obj,
                                caption=product_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                parse_mode='HTML'
                            ))
                        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                            media_group.append(types.InputMediaPhoto(file_obj))
                
                if media_group:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    self.bot.send_media_group(
                        message.chat.id, 
                        media_group, 
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    self.bot.send_message(
                        message.chat.id,
                        "üì∏ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞",
                        reply_markup=keyboard
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                self.bot.send_message(
                    message.chat.id,
                    text=product_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                for file_obj in file_objects:
                    try:
                        file_obj.close()
                    except:
                        pass
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                message.chat.id,
                text=product_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _check_admin_access(self, callback: CallbackQuery = None, message: Message = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ
        # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return True

    def _save_photo(self, photo_file_id: str, product_id: int) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫"""
        import uuid
        try:
            file_info = self.bot.get_file(photo_file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            file_extension = os.path.splitext(file_info.file_path)[1] or '.jpg'
            filename = f"{uuid.uuid4().hex}{file_extension}"
            
            product_dir = os.path.join(self.photos_dir, str(product_id))
            os.makedirs(product_dir, exist_ok=True)
            filepath = os.path.join(product_dir, filename)
            
            with open(filepath, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            return filepath if os.path.exists(filepath) else None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return None

    def _back_to_products_menu(self, message: Message):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
        from ..shared.product_constants import ProductConstants
        self.bot.send_message(
            message.chat.id,
            ProductConstants.PRODUCT_MANAGEMENT_TITLE,
            reply_markup=ProductConstants.create_management_keyboard(),
            parse_mode='HTML'
        )

    # –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

    def _create_categories_keyboard(self, row_width: int=2):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        categories = self.db_manager.get_all_categories()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        buttons = []
        for category in categories:
            buttons.append(types.KeyboardButton(category['name']))
        
        for i in range(0, len(buttons), row_width):
                    row_buttons = buttons[i:i + row_width]
                    keyboard.add(*row_buttons)
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    # def _create_measurement_units_keyboard(self):
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    #     units = ['—à—Ç', '–∫–≥', '–≥', '–ª', '–º–ª', '—É–ø', '–ø–∞—á–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∞', '–Ω–∞–±–æ—Ä']
        
    #     for unit in units:
    #         keyboard.add(types.KeyboardButton(unit))
        
    #     keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    #     return keyboard

    # def _create_availability_keyboard(self):
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    #     keyboard.add(
    #         types.KeyboardButton("‚úÖ –î–∞"),
    #         types.KeyboardButton("‚ùå –ù–µ—Ç")
    #     )
    #     keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    #     return keyboard

    # def _create_prepayment_keyboard(self):
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã"""
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    #     options = ["50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞"]
        
    #     for option in options:
    #         keyboard.add(types.KeyboardButton(option))
        
    #     keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    #     return keyboard

    def _create_photo_selection_keyboard(self, photos):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
        for i in range(1, len(photos) + 1):
            keyboard.add(types.KeyboardButton(str(i)))
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    # def _create_cancel_edit_keyboard(self):
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #     keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    #     return keyboard

    def _create_edit_back_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_back_to_categories"))
        return keyboard

    def _create_back_to_products_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_back_to_products_menu"))
        return keyboard