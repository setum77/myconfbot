import logging
from telebot import types
from telebot.types import Message, CallbackQuery
from .admin_base import BaseAdminHandler

logger = logging.getLogger(__name__)

class AdminMainHandler(BaseAdminHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self._register_admin_callbacks()
        self._register_back_handler()
        self._register_admin_commands()

    def _register_admin_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∫–∏"""
        @self.bot.message_handler(commands=['admin'])
        def handle_admin(message: Message):
            self.handle_admin_panel(message)
    
    def _register_admin_callbacks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–æ–≤ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
        def handle_admin_callbacks(callback: CallbackQuery):
            self._handle_admin_callbacks(callback)
    
    def _register_back_handler(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        @self.bot.callback_query_handler(func=lambda call: call.data == 'admin_back')
        def back_to_admin_main(callback: CallbackQuery):
            self._back_to_admin_main(callback)
    
    def _handle_admin_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            data = callback.data
            
            if data == 'admin_orders_active':
                self._show_active_orders(callback.message)
            elif data == 'admin_orders_all':
                self._show_all_orders(callback.message)
            elif data == 'admin_orders_change_status':
                self._show_change_status(callback.message)
            elif data == 'admin_orders_stats':
                self._show_orders_stats(callback.message)
            elif data == 'admin_stats_general':
                self._show_general_stats(callback.message)
            elif data == 'admin_stats_financial':
                self._show_financial_stats(callback.message)
            elif data == 'admin_stats_clients':
                self._show_clients_stats(callback.message)
            elif data == 'admin_stats_products':
                self._show_products_stats(callback.message)
            elif data == 'admin_manage_products':
                self._manage_products(callback.message)
            elif data == 'admin_manage_recipes':
                self._manage_recipes(callback.message)
            elif data == 'admin_manage_services':
                self._manage_services(callback.message)
            elif data == 'admin_manage_contacts':
                self._manage_contacts(callback.message)
            elif data == 'admin_manage_content':
                self._manage_content(callback.message)
            elif data == 'admin_manage_users':
                self._manage_users(callback.message)
            elif data == 'admin_back':
                self._back_to_admin_main(callback)
                
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ admin callback: {e}", exc_info=True)
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_active_orders(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        from .order_management import OrderManagementHandler
        order_handler = OrderManagementHandler(self.bot, self.config, self.db_manager)
        order_handler.show_active_orders(message)
    
    def _show_all_orders(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
        self.bot.send_message(message.chat.id, "üìã –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_change_status(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        self.bot.send_message(message.chat.id, "üîÑ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_orders_stats(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
        from .stats_management import StatsHandler
        stats_handler = StatsHandler(self.bot, self.config, self.db_manager)
        stats_handler.show_orders_stats(message)
    
    def _show_general_stats(self, message: Message):
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        self.bot.send_message(message.chat.id, "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_financial_stats(self, message: Message):
        """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        self.bot.send_message(message.chat.id, "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_clients_stats(self, message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        self.bot.send_message(message.chat.id, "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_products_stats(self, message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
        self.bot.send_message(message.chat.id, "üéÇ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _manage_products(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        from .product_management import ProductManagementHandler
        product_handler = ProductManagementHandler(self.bot, self.config, self.db_manager)
        product_handler.manage_products(message)
    
    def _manage_recipes(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"""
        self.bot.send_message(message.chat.id, "üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _manage_services(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"""
        self.bot.send_message(message.chat.id, "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _manage_contacts(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
        self.bot.send_message(message.chat.id, "üìû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _manage_content(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        from .content_management import ContentManagementHandler
        content_handler = ContentManagementHandler(self.bot, self.config, self.db_manager)
        content_handler.manage_content(message)
    
    def _manage_users(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        from .user_management import UserManagementHandler
        user_handler = UserManagementHandler(self.bot, self.config, self.db_manager)
        user_handler.manage_users(message)
    
    def _back_to_admin_main(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self._show_management_panel(callback.message)
            
            self.bot.answer_callback_query(callback.id, "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
    
    def _show_management_panel(self, message: Message):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è", callback_data="admin_manage_products"),
            types.InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç—ã", callback_data="admin_manage_recipes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏", callback_data="admin_manage_services"),
            types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="admin_manage_contacts")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_manage_content"),
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_manage_users")
        )
        
        self.bot.send_message(
            message.chat.id,
            "üè™ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )