# product_viewer.py
import logging
import os
from telebot import types
from telebot.types import Message, CallbackQuery
from ..shared.product_constants import ProductConstants

logger = logging.getLogger(__name__)

class ProductViewer:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
    
    def __init__(self, bot, db_manager, photos_dir):
        self.bot = bot
        self.db_manager = db_manager
        self.photos_dir = photos_dir

    def start_viewing(self, message: Message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self._view_products(message)

    def handle_view_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        try:
            data = callback.data
            
            if data.startswith('view_category_'):
                category_id = int(data.replace('view_category_', ''))
                self._handle_view_category(callback, category_id)
                
            elif data.startswith('view_product_'):
                product_id = int(data.replace('view_product_', ''))
                self._handle_view_product(callback, product_id)
                
            elif data.startswith('view_back_'):
                self._handle_view_back(callback)
                
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ view callback: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    def _view_products(self, message: Message):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = self.db_manager.get_all_categories()
        
        if not categories:
            self.bot.send_message(
                message.chat.id,
                "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                reply_markup=self._create_back_to_products_keyboard()
            )
            return
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup –≤–º–µ—Å—Ç–æ ReplyKeyboardMarkup
        keyboard = ProductConstants.create_categories_keyboard_inline(
            categories=categories,
            db_manager=self.db_manager,
            back_callback="view_back_products"
        )
        
        self.bot.send_message(
            message.chat.id,
            "üìÇ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _handle_view_category(self, callback: CallbackQuery, category_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        products = self.db_manager.get_products_by_category(category_id)
        
        if not products:
            self.bot.send_message(
                callback.message.chat.id,
                "üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=self._create_back_to_categories_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self.db_manager.get_all_categories()
        category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # keyboard = ProductConstants.create_product_details_keyboard_inline(
        #     product=product,
        #     db_manager=self.db_manager,
        #     back_callback="view_back_categories"
        # )
        keyboard = types.InlineKeyboardMarkup()
        
        for product in products:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            photos_count = len(self.db_manager.get_product_photos(product['id']))
            status_emoji = "‚úÖ" if product['is_available'] else "‚ùå"
            keyboard.add(types.InlineKeyboardButton(
                f"{status_emoji} {product['name']} - {product['price']} —Ä—É–±. üì∏ {photos_count}",
                callback_data=f"view_product_{product['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="view_back_categories"
        ))
        
        try:
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                callback.message.chat.id,
                f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                parse_mode='HTML',
                reply_markup=keyboard
            )

    def _handle_view_product(self, callback: CallbackQuery, product_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –≤—Å–µ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ"""
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_text = self._format_product_details(product)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        photos = self.db_manager.get_product_photos(product_id)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data=f"view_back_to_category_{product['category_id']}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –º–µ–Ω—é",
            callback_data="view_back_products"
        ))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
        if photos and any(os.path.exists(p['photo_path']) for p in photos):
            media_group = []
            file_objects = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            try:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–µ—Ä–≤–æ–µ
                main_photos = [p for p in photos if p.get('is_main')]
                other_photos = [p for p in photos if not p.get('is_main')]
                sorted_photos = main_photos + other_photos
                
                for i, photo_info in enumerate(sorted_photos[:10]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    if os.path.exists(photo_info['photo_path']):
                        file_obj = open(photo_info['photo_path'], 'rb')
                        file_objects.append(file_obj)
                        
                        if i == 0:  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                            media_group.append(types.InputMediaPhoto(
                                file_obj,
                                caption=product_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                parse_mode='HTML'
                            ))
                        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                            media_group.append(types.InputMediaPhoto(file_obj))
                
                if media_group:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    self.bot.send_media_group(callback.message.chat.id, media_group)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    self.bot.send_message(
                        callback.message.chat.id,
                        "üì∏ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞",
                        reply_markup=keyboard
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                self.bot.send_message(
                    callback.message.chat.id,
                    product_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                for file_obj in file_objects:
                    try:
                        file_obj.close()
                    except:
                        pass
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                callback.message.chat.id,
                product_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        self.bot.answer_callback_query(callback.id)

    def _handle_view_back(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        try:
            data = callback.data
            
            if data == 'view_back_products':
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
                from ..shared.product_constants import ProductConstants
                # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
                self.bot.send_message(
                    callback.message.chat.id,
                    ProductConstants.PRODUCT_MANAGEMENT_TITLE,
                    reply_markup=ProductConstants.create_management_keyboard(),
                    parse_mode='HTML'
                )
                
            elif data == 'view_back_categories':
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                self._view_products(callback.message)
                
            elif data.startswith('view_back_to_category_'):
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ–≤–∞—Ä–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_id = int(data.replace('view_back_to_category_', ''))
                self._show_products_in_category(callback.message, category_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–∞–¥: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _show_products_in_category(self, message: Message, category_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        products = self.db_manager.get_products_by_category(category_id)
        categories = self.db_manager.get_all_categories()
        category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        for product in products:
            photos_count = len(self.db_manager.get_product_photos(product['id']))
            status_emoji = "‚úÖ" if product['is_available'] else "‚ùå"
            keyboard.add(types.InlineKeyboardButton(
                f"{status_emoji} {product['name']} - {product['price']} —Ä—É–±. üì∏ {photos_count}",
                callback_data=f"view_product_{product['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="view_back_categories"
        ))
        
        self.bot.send_message(
            message.chat.id,
            f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _format_product_details(self, product: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ (–¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç)"""
        
        product_text = "üéÇ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
        product_text += f"üÜî <b>ID:</b> {product['id']}\n"
        product_text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
        product_text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category_name']}\n"
        product_text += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['short_description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        product_text += f"üîÑ <b>–î–æ—Å—Ç—É–ø–µ–Ω:</b> {'‚úÖ –î–∞' if product['is_available'] else '‚ùå –ù–µ—Ç'}\n"
        product_text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product['quantity']} {product['measurement_unit']}\n"
        product_text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.\n"
        product_text += f"üí≥ <b>–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:</b> {product['prepayment_conditions'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        product_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {product['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        product_text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {product['updated_at'].strftime('%d.%m.%Y %H:%M') if product['updated_at'] else '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è'}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        photos = self.db_manager.get_product_photos(product['id'])
        if photos:
            product_text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b> {len(photos)} —à—Ç.\n"
        else:
            product_text += "\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b> –ù–µ—Ç\n"
        
        return product_text

    def _create_back_to_products_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            callback_data="view_back_products"
        ))
        return keyboard

    def _create_back_to_categories_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="view_back_categories"
        ))
        return keyboard
    
    def show_product_summary(self, message: Message, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)"""
        
        product = self.db_manager.get_product_by_id(product_id)
        
        print(f'–í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product['name']}')
        
        if not product:
            self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_text = self._format_product_details(product)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        photos = self.db_manager.get_product_photos(product_id)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            callback_data=f"view_back_products"))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
        if photos and any(os.path.exists(p['photo_path']) for p in photos):
            media_group = []
            file_objects = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            try:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–µ—Ä–≤–æ–µ
                main_photos = [p for p in photos if p.get('is_main')]
                other_photos = [p for p in photos if not p.get('is_main')]
                sorted_photos = main_photos + other_photos
                
                for i, photo_info in enumerate(sorted_photos[:10]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    if os.path.exists(photo_info['photo_path']):
                        file_obj = open(photo_info['photo_path'], 'rb')
                        file_objects.append(file_obj)
                        
                        if i == 0:  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                            media_group.append(types.InputMediaPhoto(
                                file_obj,
                                caption=product_text,
                                parse_mode='HTML'
                            ))
                        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                            media_group.append(types.InputMediaPhoto(file_obj))
                
                if media_group:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É. –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π >10
                    self.bot.send_media_group(message.chat.id, media_group)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    self.bot.send_message(
                        message.chat.id,
                        "üì∏ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞",
                        reply_markup=keyboard
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                self.bot.send_message(
                    message.chat.id,
                    product_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                for file_obj in file_objects:
                    try:
                        file_obj.close()
                    except:
                        pass
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                message.chat.id,
                product_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        # self.bot.answer_callback_query(callback.id)