# product_constants.py
import logging
from telebot import types
from src.myconfbot.utils.database import db_manager

logger = logging.getLogger(__name__)
class ProductConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
    
    # –ü—É—Ç–∏
    PHOTOS_DIR = "data/products/"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    PRODUCT_MANAGEMENT_TITLE = "üéÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ADD_PRODUCT_START = "üéÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:"
    ADD_CATEGORY_START = "üìÅ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    
    # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    MEASUREMENT_UNITS = ['—à—Ç', '–∫–≥', '–≥', '–≥—Ä–∞–º–º', '–ª', '–º–ª', '—É–ø', '–ø–∞—á–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∞', '–Ω–∞–±–æ—Ä', '–∫–æ–º–ø–ª–µ–∫—Ç']
    
    # –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
    PREPAYMENT_OPTIONS = ["50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞"]

    @staticmethod
    def create_management_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            types.InlineKeyboardButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="category_manage"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="product_add")
        )
        
        
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫-—Ç—å —Ç–æ–≤–∞—Ä", callback_data="product_edit"),
            types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="product_view")
        )
        keyboard.add(
            types.InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å", callback_data="product_delete"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        
        return keyboard
    
    @staticmethod
    def create_categories_keyboard_reply(row_width: int = 2):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            include_cancel: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        """     
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=row_width)  
        try:     
            categories = db_manager.get_all_categories()
            if not categories:
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
                keyboard.add(types.KeyboardButton("üì≠ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"))
            else:
                buttons = []
                for category in categories:
                    category_name = category['name']
                    products_count = len(db_manager.get_products_by_category(category['id']))
                    button_text = f"üìÅ {category_name} ({products_count})"
                    buttons.append(types.KeyboardButton(button_text))
                for i in range(0, len(buttons), row_width):
                    row_buttons = buttons[i:i + row_width]
                    keyboard.add(*row_buttons)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            keyboard.add(types.KeyboardButton("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"))
       
        return keyboard

    @staticmethod
    def create_categories_keyboard_inline(categories, db_manager, back_callback="view_back_products"):
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        Args:
            categories: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
            db_manager: –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
            back_callback: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        """
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        if not categories:
            keyboard.add(types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=back_callback
            ))
            return keyboard
        
        buttons = []
        for category in categories:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products_count = len(db_manager.get_products_by_category(category['id']))
            button_text = f"üìÅ {category['name']} ({products_count})"
            buttons.append(types.InlineKeyboardButton(
                button_text,
                callback_data=f"view_category_{category['id']}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buttons), 2):
            row_buttons = buttons[i:i + 2]
            keyboard.add(*row_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data=back_callback
        ))
        
        return keyboard
    
    @staticmethod
    def create_product_details_keyboard_inline(product, back_to_category=True):
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        """
        keyboard = types.InlineKeyboardMarkup()
        
        if back_to_category:
            keyboard.add(types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
                callback_data=f"view_back_to_category_{product['category_id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –º–µ–Ω—é",
            callback_data="view_back_products"
        ))
        
        return keyboard

    @staticmethod
    def create_measurement_units_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        unit_buttons = [types.KeyboardButton(unit) for unit in ProductConstants.MEASUREMENT_UNITS]
        for i in range(0, len(unit_buttons), 3):
            row_buttons = unit_buttons[i:i+3]
            keyboard.add(*row_buttons)
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard


    @staticmethod
    def create_availability_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞"))
        keyboard.add(types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    
    @staticmethod
    def create_prepayment_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for option in ProductConstants.PREPAYMENT_OPTIONS:
            keyboard.add(types.KeyboardButton(option))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    @staticmethod
    def create_cancel_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    
    @staticmethod
    def create_skip_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    @staticmethod
    def create_yes_no_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞"))
        keyboard.add(types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard



    @staticmethod
    def create_confirmation_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        return keyboard
    
    @staticmethod
    def create_photo_question_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"))
        keyboard.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    
    @staticmethod
    def create_photos_done_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    