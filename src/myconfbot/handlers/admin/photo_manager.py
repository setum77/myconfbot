# src/myconfbot/handlers/admin/photo_manager.py
import logging
import os
import uuid
from telebot import types
from telebot.types import Message, CallbackQuery
from .product_states import ProductState
from .product_constants import ProductConstants
from .product_viewer import ProductViewer


logger = logging.getLogger(__name__)

class PhotoManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self, bot, db_manager, states_manager, photos_dir):
        self.bot = bot
        self.db_manager = db_manager
        self.photos_dir = photos_dir
        self.states_manager = states_manager

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò 
    def register_photo_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        
        @self.bot.message_handler(
            content_types=['photo'],
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.ADDING_PHOTOS
        )
        def handle_photo_message(message: Message):
            self._handle_photo_message(message)

    def _handle_photo_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_product_state(user_id)
        
        if user_state != ProductState.ADDING_PHOTOS:
            self.bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ")
            return
        
        product_data = self.states_manager.get_product_data(user_id)
        product_id = product_data.get('id')
        
        if not product_id:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        success = self.handle_photo_addition(message, product_id)
        
        if success:
            self.bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'")
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
    
    
    
    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def ask_add_photos_after_creation(self, message: Message, product_id: int, product_name: str):
        """–°–ø—Ä–æ—Å–∏—Ç—å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        keyboard = self.create_photo_question_keyboard()
        self.bot.send_message(
            message.chat.id,
            f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–µ–π—á–∞—Å?",
            reply_markup=keyboard
        )

    def show_photo_management(self, message: Message, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        photos = self.db_manager.get_product_photos(product_id)
        product = self.db_manager.get_product_by_id(product_id)
        
        if not product:
            self.bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        keyboard = self._create_photo_management_keyboard(product_id, photos)
        
        photo_status = self._get_photo_status_text(photos)
        
        self.bot.send_message(
            message.chat.id,
            f"üì∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</b>\n"
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"{photo_status}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def handle_photo_addition(self, message: Message, product_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        if message.content_type != 'photo':
            self.bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
            return False
        
        try:
            photo_id = message.photo[-1].file_id
            photo_path = self._save_photo(photo_id, product_id)
            
            if not photo_path:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
                return False
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ - –¥–µ–ª–∞–µ–º –µ–≥–æ –≥–ª–∞–≤–Ω—ã–º
            existing_photos = self.db_manager.get_product_photos(product_id)
            is_main = len(existing_photos) == 0
            
            success = self.db_manager.add_product_photo(product_id, photo_path, is_main)
            
            if success:
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                if is_main:
                    self.db_manager.update_product_cover_photo(product_id, photo_path)
                
                logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É {product_id}, –ø—É—Ç—å: {photo_path}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –ë–î –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
            return False

    def set_main_photo(self, product_id: int, photo_number: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            photos = self.db_manager.get_product_photos(product_id)
            if not 1 <= photo_number <= len(photos):
                return False
                
            selected_photo = photos[photo_number - 1]
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –Ω–∞ –Ω–µ-–≥–ª–∞–≤–Ω—ã–µ
            for photo in photos:
                self.db_manager.update_photo_main_status(photo['id'], False)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ
            self.db_manager.update_photo_main_status(selected_photo['id'], True)
            self.db_manager.update_product_cover_photo(product_id, selected_photo['photo_path'])
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            return False

    def delete_photo(self, product_id: int, photo_number: int):
        """–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            photos = self.db_manager.get_product_photos(product_id)
            if not 1 <= photo_number <= len(photos):
                return False
                
            photo_to_delete = photos[photo_number - 1]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            success = self.db_manager.delete_product_photo(photo_to_delete['id'])
            if success:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                if os.path.exists(photo_to_delete['photo_path']):
                    os.remove(photo_to_delete['photo_path'])
                
                # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ
                remaining_photos = self.db_manager.get_product_photos(product_id)
                if remaining_photos:
                    new_main = remaining_photos[0]
                    self.set_main_photo(product_id, 1)  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º
                else:
                    # –ù–µ—Ç —Ñ–æ—Ç–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º cover_photo
                    self.db_manager.update_product_cover_photo(product_id, None)
                
                return True
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return False

    def show_photos_for_selection(self, message: Message, product_id: int, mode: str = "main"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–≥–ª–∞–≤–Ω–æ–µ/—É–¥–∞–ª–µ–Ω–∏–µ)"""
        photos = self.db_manager.get_product_photos(product_id)
        product = self.db_manager.get_product_by_id(product_id)
        
        if not photos:
            self.bot.send_message(message.chat.id, "‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return False
        
        photos_text = "\n".join([f"{i+1}. üì∏ –§–æ—Ç–æ {i+1}" for i in range(len(photos))])
        
        if mode == "main":
            text = f"üì∏ –í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ</b> –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product['name']}':\n\n{photos_text}"
        else:  # delete
            text = f"üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ <b>—Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b> –∏–∑ —Ç–æ–≤–∞—Ä–∞ '{product['name']}':\n\n{photos_text}"
        
        keyboard = self._create_photo_selection_keyboard(photos, product_id, mode)
        
        self.bot.send_message(
            message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        return True
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò ===
    
    def start_photo_addition(self, callback: CallbackQuery, product_id: int):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
        self.states_manager.set_product_state(callback.from_user.id, {
            'state': ProductState.ADDING_PHOTOS,
            'product_data': {'id': product_id}
        })
        
        self.bot.send_message(
            callback.message.chat.id,
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n\n"
            "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
            reply_markup=ProductConstants.create_photos_done_keyboard()
        )

    def start_photo_addition_after_creation(self, message: Message, product_id: int):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.states_manager.set_product_state(message.from_user.id, {
            'state': ProductState.ADDING_PHOTOS,
            'product_data': {'id': product_id}
        })
        
        self.bot.send_message(
            message.chat.id,
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n\n"
            "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
            reply_markup=ProductConstants.create_photos_done_keyboard()
        )

    def handle_photos_done(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_product_state(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        if user_state != ProductState.ADDING_PHOTOS:
            self.bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
            self.states_manager.clear_product_state(user_id)
            return None

        product_data = self.states_manager.get_product_data(user_id)
        product_id = product_data.get('id')
        
        try:
            if product_id:
                photos = self.db_manager.get_product_photos(product_id)
                logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {len(photos)} —à—Ç.")
                
                if photos:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
                    main_photos = [p for p in photos if p['is_main']]
                    if not main_photos and photos:
                        self.set_main_photo(product_id, 1)
                    
                    product = self.db_manager.get_product_by_id(product_id)
                    
                    # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                    self.bot.send_message(
                        message.chat.id,
                        f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–æ–≤–∞—Ä—É '{product['name']}'!",
                        reply_markup=types.ReplyKeyboardRemove()
                    )

                    # –ò–∑ ProductViewer –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
                    product_viewer = ProductViewer(self.bot, self.db_manager, self.photos_dir)
                    product_viewer.show_product_summary(message, product_id)
                else:
                    # ‚úÖ –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    product = self.db_manager.get_product_by_id(product_id)
                    self.bot.send_message(
                        message.chat.id,
                        f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
                        reply_markup=types.ReplyKeyboardRemove()
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                    product_viewer = ProductViewer(self.bot, self.db_manager, self.photos_dir)
                    product_viewer.show_product_summary(message, product_id)
                
                return product_id
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return None
        finally:
            # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.clear_product_state(user_id)

    def handle_photo_question(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        product_id = product_data.get('id')
        
        if message.text == "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.ADDING_PHOTOS,
                'product_data': product_data
            })
            
            self.bot.send_message(
                message.chat.id,
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n\n"
                "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
                reply_markup=ProductConstants.create_photos_done_keyboard()
            )
            
        elif message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
            self.states_manager.clear_product_state(user_id)
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                parse_mode='HTML',
                reply_markup=types.ReplyKeyboardRemove()
            )
            return False
        else:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=ProductConstants.create_photo_question_keyboard()
            )
            return None
        
        return True

    # === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    def handle_photo_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ñ–æ—Ç–æ"""
        try:
            data = callback.data
            
            if data.startswith('photo_manage_'):
                product_id = int(data.replace('photo_manage_', ''))
                self.show_photo_management(callback.message, product_id)
            
            elif data.startswith('photo_add_'):
                product_id = int(data.replace('photo_add_', ''))
                self.start_photo_addition(callback, product_id)
            
            elif data.startswith('photo_set_main_'):
                product_id = int(data.replace('photo_set_main_', ''))
                self.show_photos_for_selection(callback.message, product_id, "main")
            
            elif data.startswith('photo_delete_'):
                product_id = int(data.replace('photo_delete_', ''))
                self.show_photos_for_selection(callback.message, product_id, "delete")
            
            elif data.startswith('photo_back_'):
                product_id = int(data.replace('photo_back_', ''))
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
                self._show_edit_options(callback.message, product_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ photo callback: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _save_photo(self, photo_file_id: str, product_id: int) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
            file_info = self.bot.get_file(photo_file_id)
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {file_info.file_path}")
            
            downloaded_file = self.bot.download_file(file_info.file_path)
            logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(downloaded_file)} –±–∞–π—Ç")
            
            file_extension = os.path.splitext(file_info.file_path)[1] or '.jpg'
            filename = f"{uuid.uuid4().hex}{file_extension}"
            
            product_dir = os.path.join(self.photos_dir, str(product_id))
            os.makedirs(product_dir, exist_ok=True)
            filepath = os.path.join(product_dir, filename)
            
            with open(filepath, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # ‚úÖ –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
            if os.path.exists(filepath):
                logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                return filepath
            else:
                logger.error(f"–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {filepath}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return None

    def _get_photo_status_text(self, photos: list) -> str:
        """–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ—Ç–æ"""
        if not photos:
            return "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –Ω–µ—Ç"
        
        main_photos = [p for p in photos if p['is_main']]
        main_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if main_photos else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        return f"üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)} —à—Ç.\nüìå –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: {main_status}"

    def _create_photo_question_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"))
        keyboard.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _create_photo_management_keyboard(self, product_id: int, photos: list):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"photo_add_{product_id}"),
            types.InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ", callback_data=f"photo_set_main_{product_id}")
        )
        
        if photos:
            keyboard.add(
                types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"photo_delete_{product_id}"),
                types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data=f"photo_view_{product_id}")
            )
        
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"photo_back_{product_id}"))
        
        return keyboard

    def _create_photo_selection_keyboard(self, photos: list, product_id: int, mode: str):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
        # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ñ–æ—Ç–æ
        row = []
        for i in range(1, len(photos) + 1):
            row.append(types.KeyboardButton(str(i)))
            if len(row) == 3:
                keyboard.add(*row)
                row = []
        
        if row:
            keyboard.add(*row)
        
        if mode == "main":
            keyboard.add(types.KeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ"))
        else:
            keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"))
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        return keyboard

    def _show_edit_options(self, message: Message, product_id: int):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.bot.send_message(
            message.chat.id,
            f"üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ ID: {product_id}",
            reply_markup=types.ReplyKeyboardRemove()
        )