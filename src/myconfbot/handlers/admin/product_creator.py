# product_creator.py
import logging
import os
import uuid
from telebot import types
from telebot.types import Message, CallbackQuery
from ..shared.product_constants import ProductConstants
from .product_states import ProductState
from .photo_manager import PhotoManager

logger = logging.getLogger(__name__)

class ProductCreator:

    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self, bot, db_manager, states_manager, photos_dir, photo_manager=None):
        self.bot = bot
        self.db_manager = db_manager
        self.states_manager = states_manager
        self.photos_dir = photos_dir
        self.photo_manager = photo_manager

    def start_creation(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.states_manager.set_product_state(callback.from_user.id, {
            'state': ProductState.WAITING_BASIC_INFO,
            'product_data': {'additional_photos': []}
        })
        
        try:
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            pass
        
        self.bot.send_message(
            callback.message.chat.id,
            ProductConstants.ADD_PRODUCT_START,
            parse_mode='HTML',
            reply_markup=ProductConstants.create_cancel_keyboard()
        )

    def handle_basic_info(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        if self.states_manager.get_product_state(user_id) == ProductState.WAITING_BASIC_INFO:
            if 'name' not in product_data:
                # –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ
                product_data['name'] = message.text
                self._update_product_state(user_id, product_data, ProductState.WAITING_BASIC_INFO)
                self._ask_category(message)
                
            elif 'category_id' not in product_data:
                # –®–∞–≥ 2: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                self._handle_category_input(message, product_data, user_id)
                
            elif 'is_available' not in product_data:
                # –®–∞–≥ 3: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                self._handle_availability_input(message, product_data, user_id)

    def handle_details(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return

        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        if 'short_description' not in product_data:
            self._handle_description_input(message, product_data, user_id)
        elif 'measurement_unit' not in product_data:
            self._handle_unit_input(message, product_data, user_id)
        elif 'quantity' not in product_data:
            self._handle_quantity_input(message, product_data, user_id)
        elif 'price' not in product_data:
            self._handle_price_input(message, product_data, user_id)
        elif 'prepayment_conditions' not in product_data:
            self._handle_prepayment_input(message, product_data, user_id)
    
    def _check_cancellation(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self._cancel_creation(message)
            return True
        return False

    def _cancel_creation(self, message: Message):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        self.states_manager.clear_product_state(user_id)
        
        self.bot.send_message(
            message.chat.id,
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:
        self._back_to_product_management(message.chat.id)

    def _ask_category(self, message: Message):
        """–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        keyboard = self._create_categories_keyboard(row_width=2)
        self.bot.send_message(
            message.chat.id,
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _handle_category_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        categories = self.db_manager.get_all_categories()
        category_names = [cat['name'].lower() for cat in categories]
        
        if message.text.lower() not in category_names:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=self._create_categories_keyboard(row_width=2)
            )
            return
        
        category_id = next((cat['id'] for cat in categories if cat['name'].lower() == message.text.lower()), None)
        product_data['category_id'] = category_id
        self._update_product_state(user_id, product_data, ProductState.WAITING_BASIC_INFO)
        
        self.bot.send_message(
            message.chat.id,
            "üîÑ <b>–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞?</b>",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_availability_keyboard()
        )

    def _handle_availability_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return

        if message.text == "‚úÖ –î–∞":
            product_data['is_available'] = True
        elif message.text == "‚ùå –ù–µ—Ç":
            product_data['is_available'] = False
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=ProductConstants.create_availability_keyboard()
            )
            return
        
        self._update_product_state(user_id, product_data, ProductState.WAITING_DETAILS)
        
        self.bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_skip_keyboard()
        )

    def _handle_description_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        if message.text.lower() == '‚è≠Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            product_data['short_description'] = ''
        else:
            product_data['short_description'] = message.text
        
        self._update_product_state(user_id, product_data, ProductState.WAITING_DETAILS)
        
        self.bot.send_message(
            message.chat.id,
            "üìè –í—ã–±–µ—Ä–∏—Ç–µ <b>–µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è</b> –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_measurement_units_keyboard()
        )

    def _handle_unit_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        if message.text not in ProductConstants.MEASUREMENT_UNITS:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=ProductConstants.create_measurement_units_keyboard()
            )
            return
        
        product_data['measurement_unit'] = message.text
        self._update_product_state(user_id, product_data, ProductState.WAITING_DETAILS)
        
        self.bot.send_message(
            message.chat.id,
            "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=ProductConstants.create_cancel_keyboard()
        )

    def _handle_quantity_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        try:
            quantity = float(message.text)
            product_data['quantity'] = quantity
            self._update_product_state(user_id, product_data, ProductState.WAITING_DETAILS)
            
            self.bot.send_message(
                message.chat.id,
                "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=ProductConstants.create_cancel_keyboard()
            )
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=ProductConstants.create_cancel_keyboard()
            )

    def _handle_price_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        try:
            price = float(message.text)
            product_data['price'] = price
            self._update_product_state(user_id, product_data, ProductState.WAITING_DETAILS)
            
            self.bot.send_message(
                message.chat.id,
                "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ <b>—É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã</b>:",
                parse_mode='HTML',
                reply_markup=ProductConstants.create_prepayment_keyboard()
            )
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=ProductConstants.create_cancel_keyboard()
            )

    def _handle_prepayment_input(self, message: Message, product_data: dict, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        if message.text not in ProductConstants.PREPAYMENT_OPTIONS:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=ProductConstants.create_prepayment_keyboard()
            )
            return
        
        product_data['prepayment_conditions'] = message.text
        self._update_product_state(user_id, product_data, ProductState.CONFIRMATION)
        
        self._show_confirmation_with_photos(message, product_data)

    def _show_confirmation_with_photos(self, message: Message, product_data: dict):
            """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –æ–ø—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ"""
            confirmation_text = self._format_confirmation(product_data)
            
            self.bot.send_message(
                message.chat.id,
                confirmation_text,
                parse_mode='HTML',
                reply_markup=ProductConstants.create_confirmation_keyboard()
            )

    def _show_confirmation(self, message: Message, product_data: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        confirmation_text = self._format_confirmation(product_data)
        
        self.bot.send_message(
            message.chat.id,
            confirmation_text,
            parse_mode='HTML',
            reply_markup=ProductConstants.create_confirmation_keyboard()
        )

    def _format_confirmation(self, product_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        text = "üéÇ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID:</b> {product_data.get('category_id', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product_data.get('short_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üîÑ <b>–î–æ—Å—Ç—É–ø–µ–Ω:</b> {'–î–∞' if product_data.get('is_available', True) else '–ù–µ—Ç'}\n"
        #text += f"üìè <b>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b> {product_data.get('measurement_unit', '—à—Ç')}\n"
        text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product_data.get('quantity', '')} {product_data.get('measurement_unit', '—à—Ç')}\n"
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product_data.get('price', 0)} —Ä—É–±.\n"
        text += f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {product_data.get('prepayment_conditions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += "‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>"
        return text

    def _update_product_state(self, user_id: int, product_data: dict, state: ProductState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        self.states_manager.update_product_data(user_id, product_data)
        self.states_manager.set_product_state(user_id, {
            'state': state,
            'product_data': product_data
        })

    def _create_categories_keyboard(self, row_width: int=2):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = self.db_manager.get_all_categories()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        buttons = []
        for category in categories:
            buttons.append(types.KeyboardButton(category['name']))
        
        for i in range(0, len(buttons), row_width):
                    row_buttons = buttons[i:i + row_width]
                    keyboard.add(*row_buttons)
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    # def _create_categories_keyboard(self):
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    #     categories = self.db_manager.get_all_categories()
    #     category_names = [category['name'] for category in categories]
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    #     category_buttons = [types.KeyboardButton(name) for name in category_names]
    #     for i in range(0, len(category_buttons), 2):
    #         row_buttons = category_buttons[i:i+2]
    #         keyboard.add(*row_buttons)
    #     keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    #     return keyboard
    
    def _handle_confirmation(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
        if self._check_cancellation(message):
            return
        
        user_id = message.from_user.id
        
        if message.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            self._save_product_and_finish(message, user_id)
        
        elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.WAITING_BASIC_INFO,
                'product_data': self.states_manager.get_product_data(user_id)
            })
            
            self.bot.send_message(
                message.chat.id,
                "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=ProductConstants.create_cancel_keyboard()
            )
        
        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            self._cancel_creation(message)

    def _save_product_and_finish(self, message: Message, user_id: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"""
        product_data = self.states_manager.get_product_data(user_id)
        product_id = self.db_manager.add_product_returning_id(product_data)
        
        if product_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID
            product_data['id'] = product_id
            self.states_manager.update_product_data(user_id, product_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ"
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –¢–æ–≤–∞—Ä <b>'{product_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üì∏ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=ProductConstants.create_photo_management_question_keyboard()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.PHOTO_QUESTION,
                'product_data': product_data
            })
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.",
                reply_markup=ProductConstants.create_confirmation_keyboard()
            )

    def _show_product_summary(self, message: Message, product_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–æ–≤–∞—Ä—É"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProductViewer –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        from .product_viewer import ProductViewer
        product_viewer = ProductViewer(self.bot, self.db_manager, self.photos_dir)
        product_viewer.show_product_summary(message, product_id)

    def _go_to_photo_management(self, message: Message, user_id: int):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ"""
        product_data = self.states_manager.get_product_data(user_id)
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        product_id = self.db_manager.add_product_returning_id(product_data)
        
        if product_id:
            product_data['id'] = product_id
            self.states_manager.update_product_data(user_id, product_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
            self.photo_manager.show_photo_management_after_creation(message, product_id)
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ.",
                reply_markup=ProductConstants.create_confirmation_with_photos_keyboard()
            )
    
    def _back_to_product_management(self, chat_id: int):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        self.bot.send_message(
            chat_id,
            "üè™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ProductConstants.create_management_keyboard(),
            parse_mode='HTML'
        )

    def _handle_photo_question(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ä–∞–±–æ—Ç–µ —Å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        product_id = product_data.get('id')
        
        if message.text == "üì∏ –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ photo_manager
            self.photo_manager.show_photo_management(message, product_id)
            
        elif message.text == "üè† –í –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏
            self.states_manager.clear_product_state(user_id)
            self._back_to_product_management(message.chat.id)
            
        else:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=ProductConstants.create_photo_management_question_keyboard()
            )
