import logging
logger = logging.getLogger(__name__)
import os
from telebot import types
from telebot.types import Message, CallbackQuery

from .admin_base import BaseAdminHandler


class UserManagementHandler(BaseAdminHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        self._register_user_detail_handlers()
        self._register_user_characteristic_handlers()
        self._register_user_orders_handlers()
    
    def _register_user_detail_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('user_detail_'))
        def show_user_detail(callback: CallbackQuery):
            self._show_user_detail(callback)
    
    def _register_user_characteristic_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('user_add_char_'))
        def add_characteristic_start(callback: CallbackQuery):
            self._add_characteristic_start(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('user_cancel_char_'))
        def cancel_characteristic(callback: CallbackQuery):
            self._cancel_characteristic(callback)
        
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_management_state(message.from_user.id) is not None and
            self.states_manager.get_management_state(message.from_user.id).get('state') == 'adding_characteristic'
        )
        def handle_characteristic_input(message: Message):
            self._handle_characteristic_input(message)
    
    def _register_user_orders_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('user_orders_'))
        def show_user_orders(callback: CallbackQuery):
            self._show_user_orders(callback)
        
    def manage_users(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        if not self._check_admin_access(message=message):
            return
        
        users = self.db_manager.get_all_users_info()
    
        if not users:
            self.bot.send_message(message.chat.id, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω—ã, –ø–æ—Ç–æ–º –∫–ª–∏–µ–Ω—Ç—ã, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
        users_sorted = sorted(users, key=lambda x: (
            not x['is_admin'],  # –ê–¥–º–∏–Ω—ã first (True > False)
            x['full_name'].lower() if x['full_name'] else ''
        ))
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        for user in users_sorted:
            username = user['telegram_username'][:8] + '...' if user['telegram_username'] and len(user['telegram_username']) > 8 else user['telegram_username'] or '–Ω–µ—Ç'
            status = "üëë –ê–¥–º–∏–Ω" if user['is_admin'] else "üë§ –ö–ª–∏–µ–Ω—Ç"
            btn_text = f"{user['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} | {username} | {status}"
            
            keyboard.add(types.InlineKeyboardButton(
                btn_text, 
                callback_data=f"user_detail_{user['telegram_id']}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        # keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="_back_to_admin_main"))
        
        self.bot.send_message(
            message.chat.id,
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard
        )
    
    def _show_user_detail(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            telegram_id = int(callback.data.replace('user_detail_', ''))
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
            user = self.db_manager.get_user_info(telegram_id)
            
            if not user:
                self.bot.answer_callback_query(callback.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            response = self._format_user_detail_response(user)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = self._create_user_detail_keyboard(user)
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
            self.bot.answer_callback_query(callback.id)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            photo_path = user.get('photo_path')
            if photo_path and os.path.exists(photo_path):
                try:
                    with open(photo_path, 'rb') as photo:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        self.bot.send_photo(
                            callback.message.chat.id,
                            photo,
                            caption=response,
                            reply_markup=keyboard,
                            parse_mode='HTML'
                        )
                        return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(
                callback.message.chat.id,
                response,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_detail: {e}", exc_info=True)
            try:
                self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
            except:
                pass
    
    def _format_user_detail_response(self, user: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        response += f"üÜî <b>ID:</b> {user['telegram_id']}\n"
        response += f"üëë <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user['is_admin'] else '–ö–ª–∏–µ–Ω—Ç'}\n"
        response += f"üìõ <b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        response += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"üîó <b>Username:</b> @{user.get('telegram_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        response += f"üìù <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:</b> {user.get('characteristics', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        response += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user['created_at'].strftime('%d.%m.%Y %H:%M') if user['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        return response
    
    def _create_user_detail_keyboard(self, user: dict) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –ò–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É", callback_data=f"user_add_char_{user['telegram_id']}"),
            types.InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data=f"user_orders_{user['telegram_id']}")
        )
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_manage_users"))
        return keyboard
    
    def _add_characteristic_start(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            telegram_id = int(callback.data.replace('user_add_char_', ''))
            #user = self.db_manager.get_user_by_telegram_id(telegram_id)
            user = self.db_manager.get_user_info(telegram_id)
            
            if not user:
                return self.bot.answer_callback_query(callback.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.states_manager.set_management_state(callback.from_user.id, {
                'state': 'adding_characteristic',
                'target_user_id': telegram_id,
                'chat_id': callback.message.chat.id,
                'message_id': callback.message.message_id
            })
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"user_cancel_char_{telegram_id}"))

            edit_text = (f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n\n"
                    f"–¢–µ–∫—É—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {user.get('characteristics', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å':")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é)
            if callback.message.photo:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.edit_message_caption(
                    caption=edit_text,
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                self.bot.edit_message_text(
                    edit_text,
                    callback.message.chat.id,
                    callback.message.message_id,
                    reply_markup=keyboard
                )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_characteristic_start: {e}", exc_info=True)
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def _cancel_characteristic(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        user_id = callback.from_user.id
        telegram_id = int(callback.data.replace('user_cancel_char_', ''))
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.states_manager.clear_management_state(user_id)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        self.bot.answer_callback_query(callback.id, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self._show_user_detail_from_message(callback.message, telegram_id)
    
    def _handle_characteristic_input(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        target_user_id = user_state.get('target_user_id')
        
        if not target_user_id:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.states_manager.clear_management_state(user_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
        if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–∞–∑–∞–¥', '‚ùå', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            self.states_manager.clear_management_state(user_id)
            self.bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager.update_user_characteristic(target_user_id, message.text):
                self.states_manager.clear_management_state(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                #user = self.db_manager.get_user_by_telegram_id(target_user_id)
                user = self.db_manager.get_user_info(target_user_id)
                
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                    f"–ù–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {message.text}"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                self._show_user_detail_from_message(message, target_user_id)
            else:
                self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    
    def _show_user_detail_from_message(self, message: Message, telegram_id: int):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ message handler"""
        #user = self.db_manager.get_user_by_telegram_id(telegram_id)
        user = self.db_manager.get_user_info(telegram_id)
        
        if not user:
            self.bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        response = self._format_user_detail_response(user)
        keyboard = self._create_user_detail_keyboard(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
        photo_path = user.get('photo_path')
        if photo_path and os.path.exists(photo_path):
            try:
                with open(photo_path, 'rb') as photo:
                    self.bot.send_photo(
                        message.chat.id,
                        photo,
                        caption=response,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        self.bot.send_message(
            message.chat.id,
            response,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    def _show_user_orders(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self._check_admin_access(callback=callback):
            return
        
        telegram_id = int(callback.data.replace('user_orders_', ''))
        #user = self.db_manager.get_user_by_telegram_id(telegram_id)
        user = self.db_manager.get_user_info(telegram_id)
        
        if not user:
            return self.bot.answer_callback_query(callback.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
        self.bot.answer_callback_query(callback.id, "üìã –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    