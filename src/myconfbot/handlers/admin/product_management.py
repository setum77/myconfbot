import logging
import os
import uuid
from datetime import datetime
from telebot import types
from telebot.types import Message, CallbackQuery

from .admin_base import BaseAdminHandler
from .product_states import ProductState

logger = logging.getLogger(__name__)

class ProductManagementHandler(BaseAdminHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.logger = logging.getLogger(__name__)
        self.photos_dir = "data/products"
        os.makedirs(self.photos_dir, exist_ok=True)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        self._register_product_callbacks()
        self._register_product_states()
        self._register_category_states()

    
    def _register_product_callbacks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
        def handle_product_callbacks(callback: CallbackQuery):
            self._handle_product_callbacks(callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('view_category_'))
        def handle_view_category(callback: CallbackQuery):
            self._handle_view_category(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('view_product_'))
        def handle_view_product(callback: CallbackQuery):
            self._handle_view_product(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('view_back_'))
        def handle_view_back(callback: CallbackQuery):
            self._handle_view_back(callback)
    
    def _register_product_states(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
        # 12.1 –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            content_types=['photo'],
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_ADDITIONAL_PHOTOS
        )
        def handle_additional_photos(message: Message):
            self._handle_additional_photos(message)
        
        # 11.1 –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            content_types=['photo'],
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_MAIN_PHOTO
        )
        def handle_main_photo(message: Message):
            self._handle_main_photo(message)

        # 1. –ù–∞–∑–≤–∞–Ω–∏–µ
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_NAME
        )
        def handle_product_name(message: Message):
            self._handle_product_name(message)
        
        # 2. –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_CATEGORY
        )
        def handle_product_category(message: Message):
            self._handle_product_category(message)
        
        # 3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_AVAILABILITY
        )
        def handle_product_availability(message: Message):
            self._handle_product_availability(message)
        
        # 4.1 –û–ø–∏—Å–∞–Ω–∏–µ
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_DESCRIPTION
        )
        def handle_product_description(message: Message):
            self._handle_product_description(message)
        
        # 5.1 –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_MEASUREMENT_UNIT
        )
        def handle_product_measurement_unit(message: Message):
            self._handle_product_measurement_unit(message)
        
        # 6.1 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_QUANTITY
        )
        def handle_product_quantity(message: Message):
            self._handle_product_quantity(message)
        
        # 7.1 –¶–µ–Ω–∞
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_PRICE
        )
        def handle_product_price(message: Message):
            self._handle_product_price(message)
        
        # 8.1 –û–ø–ª–∞—Ç–∞
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_PREPAYMENT
        )
        def handle_product_prepayment(message: Message):
            self._handle_product_prepayment(message)
        
        # 9.1 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.CONFIRMATION
        )
        def handle_product_confirmation(message: Message):
            self._handle_product_confirmation(message)

        # 10.1 –°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.ASKING_FOR_PHOTOS
        )
        def handle_asking_for_photos(message: Message):
            self._handle_asking_for_photos(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_ADDITIONAL_PHOTOS and
                message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ"
            )
        )
        def handle_photos_done(message: Message):
            self._handle_photos_done(message)
    
        # 13.1 –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.SELECTING_MAIN_PHOTO
        )
        def handle_selecting_main_photo(message: Message):
            self._handle_selecting_main_photo(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_product_state(message.from_user.id) is not None and
                message.text == "‚ùå –û—Ç–º–µ–Ω–∞"
            )
        )
        def handle_product_cancel(message: Message):
            self._cancel_product_creation_message(message)

   
    def _register_category_states(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_management_state(message.from_user.id) is not None and
            self.states_manager.get_management_state(message.from_user.id).get('state') == 'adding_category_name'
        )
        def handle_category_name(message: Message):
            self._handle_category_name(message)
        
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_management_state(message.from_user.id) is not None and
            self.states_manager.get_management_state(message.from_user.id).get('state') == 'adding_category_description'
        )
        def handle_category_description(message: Message):
            self._handle_category_description(message)
    
    
    def _handle_product_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            data = callback.data
            
            if data == 'product_add':
                self._add_product_start(callback)
            elif data == 'product_add_category':
                self._add_category_start(callback)
            elif data == 'product_edit':
                self._edit_products(callback.message)
            elif data == 'product_view':
                self._view_products(callback.message)
            elif data == 'product_delete':
                self._delete_products(callback.message)
            elif data == 'product_cancel':
                self._cancel_product_creation(callback)
            elif data == 'category_cancel': 
                self._cancel_category_creation(callback)
            elif data == 'product_confirm':
                self._confirm_product_creation(callback)
                
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ product callback: {e}", exc_info=True)
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    
    def manage_products(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        if not self._check_admin_access(message=message):
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="product_add"),
            types.InlineKeyboardButton("üìÅ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="product_add_category")
        )
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="product_edit"),
            types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="product_view")
        )
        keyboard.add(
            types.InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å", callback_data="product_delete"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        
        self.bot.send_message(
            message.chat.id,
            "üéÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    def _add_product_start(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.states_manager.set_product_state(callback.from_user.id, {
            'state': ProductState.WAITING_NAME,
            'product_data': {
                'additional_photos': []
            }
        })
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.bot.send_message(
            callback.message.chat.id,
            "üéÇ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=self._create_cancel_keyboard()
        )
        self.bot.answer_callback_query(callback.id)
    
    def _handle_product_name(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        product_data['name'] = message.text
        self.states_manager.update_product_data(user_id, product_data)
        self.states_manager.set_product_state(user_id, {
            'state': ProductState.WAITING_CATEGORY,
            'product_data': product_data
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = self._create_categories_keyboard()
        
        self.bot.send_message(
            message.chat.id,
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    def _handle_product_category(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã
        categories = self.db_manager.get_all_categories()
        category_names = [cat['name'].lower() for cat in categories]
        
        if message.text.lower() not in category_names:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=self._create_categories_keyboard()
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = next((cat['id'] for cat in categories if cat['name'].lower() == message.text.lower()), None)
        
        product_data['category_id'] = category_id
        self.states_manager.update_product_data(user_id, product_data)
        self.states_manager.set_product_state(user_id, {
            'state': ProductState.WAITING_AVAILABILITY,  # 3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            'product_data': product_data
        })
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞"))
        keyboard.add(types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        self.bot.send_message(
            message.chat.id,
            "üîÑ <b>–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞?</b>",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    def _handle_product_availability(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        if message.text == "‚úÖ –î–∞":
            product_data['is_available'] = True
        elif message.text == "‚ùå –ù–µ—Ç":
            product_data['is_available'] = False
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=self._create_availability_keyboard()
            )
            return
        
        self.states_manager.update_product_data(user_id, product_data)
        self.states_manager.set_product_state(user_id, {
            'state': ProductState.WAITING_DESCRIPTION,  # 4.1 –û–ø–∏—Å–∞–Ω–∏–µ
            'product_data': product_data
        })
            
        self.bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            parse_mode='HTML',
            reply_markup=self._create_skip_keyboard()
        )

    def _handle_asking_for_photos(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        if message.text == "‚úÖ –î–∞":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.WAITING_MAIN_PHOTO,
                'product_data': product_data
            })
            
            self.bot.send_message(
                message.chat.id,
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ</b> —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=self._create_cancel_keyboard()
            )
        
        elif message.text == "‚ùå –ù–µ—Ç":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–µ–∑ —Ñ–æ—Ç–æ
            self.states_manager.clear_product_state(user_id)
            
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –¢–æ–≤–∞—Ä <b>'{product_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!",
                parse_mode='HTML',
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
            self.manage_products(message)
        
        else:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=self._create_yes_no_keyboard()
            )
    
    
    def _handle_main_photo(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ
            photo_id = message.photo[-1].file_id
            photo_path = self._save_photo(photo_id, product_data['id'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –≤ –ø–∞–ø–∫—É —Ç–æ–≤–∞—Ä–∞
            
            if photo_path:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É
                self.db_manager.add_product_photo(product_data['id'], photo_path, is_main=True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                product_data['cover_photo_path'] = photo_path
                self.db_manager.update_product_cover_photo(product_data['id'], photo_path)
                self.states_manager.update_product_data(user_id, product_data)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ
                self.states_manager.set_product_state(user_id, {
                    'state': ProductState.WAITING_ADDITIONAL_PHOTOS,
                    'product_data': product_data
                })
                
                self.bot.send_message(
                    message.chat.id,
                    "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                    "üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ</b> "
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
                    parse_mode='HTML',
                    reply_markup=self._create_photos_done_keyboard()
                )
    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self._create_cancel_keyboard()
            )
    
    
    def _handle_additional_photos(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo_id = message.photo[-1].file_id
            photo_path = self._save_photo(photo_id, product_data['id'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –≤ –ø–∞–ø–∫—É —Ç–æ–≤–∞—Ä–∞
            
            if photo_path:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É (–ø–æ–∫–∞ –Ω–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ)
                self.db_manager.add_product_photo(product_data['id'], photo_path, is_main=False)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
                photos = self.db_manager.get_product_photos(product_data['id'])
                
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}\n"
                    "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å",
                    reply_markup=self._create_photos_done_keyboard()
                )
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
                
        except Exception as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self._create_photos_done_keyboard()
            )
    
    def _handle_selecting_main_photo(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ
            photo_number = int(message.text)
            photos = self.db_manager.get_product_photos(product_data['id'])
            
            if 1 <= photo_number <= len(photos):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
                selected_photo = photos[photo_number - 1]
                self.db_manager.set_main_photo(product_data['id'], selected_photo['photo_path'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º cover_photo_path –≤ –ø—Ä–æ–¥—É–∫—Ç–µ
                product_data['cover_photo_path'] = selected_photo['photo_path']
                self.db_manager.update_product_cover_photo(product_data['id'], selected_photo['photo_path'])
                
                self.states_manager.clear_product_state(user_id)
                
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤.\n\n"
                    f"üéÇ <b>{product_data['name']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    parse_mode='HTML',
                    reply_markup=types.ReplyKeyboardRemove()
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
                self.manage_products(message)
            else:
                self.bot.send_message(
                    message.chat.id,
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(photos)}:",
                    reply_markup=self._create_cancel_keyboard()
                )
        
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ:",
                reply_markup=self._create_cancel_keyboard()
            )
    
    def _handle_photos_done(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        photos = self.db_manager.get_product_photos(product_data['id'])
        
        if len(photos) <= 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ), –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            self.states_manager.clear_product_state(user_id)
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –¢–æ–≤–∞—Ä <b>'{product_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                parse_mode='HTML',
                reply_markup=types.ReplyKeyboardRemove()
            )
            self.manage_products(message)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.SELECTING_MAIN_PHOTO,
                'product_data': product_data
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
            photos_text = "\n".join([f"{i}. üì∏ –§–æ—Ç–æ {i}" for i in range(1, len(photos) + 1)])
            
            self.bot.send_message(
                message.chat.id,
                f"üì∏ –£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ</b>:\n\n{photos_text}",
                parse_mode='HTML',
                reply_markup=self._create_photo_selection_keyboard(photos)
            )

    def _handle_product_description(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        if message.text.lower() == '‚è≠Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            product_data['short_description'] = ''
        else:
            product_data['short_description'] = message.text
        
        self.states_manager.update_product_data(user_id, product_data)
        self.states_manager.set_product_state(user_id, {
            'state': ProductState.WAITING_MEASUREMENT_UNIT,  # 7. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            'product_data': product_data
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        keyboard = self._create_measurement_units_keyboard()
        
        self.bot.send_message(
            message.chat.id,
            "üìè –í—ã–±–µ—Ä–∏—Ç–µ <b>–µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è</b> –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _handle_product_measurement_unit(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        valid_units = ['—à—Ç', '–∫–≥', '–≥', '–≥—Ä–∞–º–º', '–ª', '–º–ª', '—É–ø', '–ø–∞—á–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∞', '–Ω–∞–±–æ—Ä', '–∫–æ–º–ø–ª–µ–∫—Ç']

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {message.text}")
        self.logger.info(f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: {valid_units}")
        
        if message.text not in valid_units:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=self._create_measurement_units_keyboard()
            )
            return
        
        product_data['measurement_unit'] = message.text
        self.states_manager.update_product_data(user_id, product_data)

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {product_data['measurement_unit']}")

        self.states_manager.set_product_state(user_id, {
            'state': ProductState.WAITING_QUANTITY,  # 8. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'product_data': product_data
        })
        
        self.bot.send_message(
            message.chat.id,
            "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=self._create_cancel_keyboard()
        )

    def _handle_product_quantity(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        try:
            quantity = float(message.text)
            product_data['quantity'] = quantity
            self.states_manager.update_product_data(user_id, product_data)
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.WAITING_PRICE,  # 9. –¶–µ–Ω–∞
                'product_data': product_data
            })
            
            self.bot.send_message(
                message.chat.id,
                "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=self._create_cancel_keyboard()
            )
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=self._create_cancel_keyboard()
            )

    def _handle_product_price(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        try:
            price = float(message.text)
            product_data['price'] = price
            self.states_manager.update_product_data(user_id, product_data)
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.WAITING_PREPAYMENT,  # 10. –û–ø–ª–∞—Ç–∞
                'product_data': product_data
            })
            
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.KeyboardButton("50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"))
            keyboard.add(types.KeyboardButton("100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"))
            keyboard.add(types.KeyboardButton("–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞"))
            keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            
            self.bot.send_message(
                message.chat.id,
                "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ <b>—É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã</b>:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=self._create_cancel_keyboard()
            )

    def _handle_product_prepayment(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        
        product_data['prepayment_conditions'] = message.text
        self.states_manager.update_product_data(user_id, product_data)
        self.states_manager.set_product_state(user_id, {
            'state': ProductState.CONFIRMATION,  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            'product_data': product_data
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        self._show_product_confirmation(message, product_data)

    # –ù–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

    def _create_yes_no_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞"))
        keyboard.add(types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _create_photo_selection_keyboard(self, photos: list):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        for i, photo in enumerate(photos, 1):
            keyboard.add(types.KeyboardButton(f"{i}"))
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _create_availability_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –î–∞"))
        keyboard.add(types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _create_photos_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
        keyboard.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _create_photos_done_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    
    def _save_photo(self, photo_file_id: str, product_id: int = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø—É—Ç–∏"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = self.bot.get_file(photo_file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(file_info.file_path)[1] or '.jpg'
            filename = f"{uuid.uuid4().hex}{file_extension}"
            
            # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É —Ç–æ–≤–∞—Ä–∞ (product_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
            if not product_id:
                raise ValueError("product_id required for photo saving")
            
            product_dir = os.path.join(self.photos_dir, str(product_id))
            os.makedirs(product_dir, exist_ok=True)
            filepath = os.path.join(product_dir, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            return filepath
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            return None
    
    def _cleanup_temp_photos(self, temp_photos: list):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
        for photo_path in temp_photos:
            try:
                if os.path.exists(photo_path):
                    os.remove(photo_path)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")


#### !!!!
    
    def _create_measurement_units_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        valid_units = ['—à—Ç', '–∫–≥', '–≥', '–≥—Ä–∞–º–º', '–ª', '–º–ª', '—É–ø', '–ø–∞—á–∫–∞', '—É–ø–∞–∫–æ–≤–∫–∞', '–Ω–∞–±–æ—Ä', '–∫–æ–º–ø–ª–µ–∫—Ç']
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
        for unit in valid_units:
            keyboard.add(types.KeyboardButton(unit))
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        return keyboard
    
    # def _get_default_measurement_unit(self) -> str:
    #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    #     valid_units = self._get_valid_measurement_units()
        
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
    #     for unit in valid_units:
    #         keyboard.add(types.KeyboardButton(unit))
        
    #     keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
    #     return keyboard
    
    def _show_product_confirmation(self, message: Message, product_data: dict):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        confirmation_text = self._format_product_confirmation(product_data)
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        
        self.bot.send_message(
            message.chat.id,
            confirmation_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.states_manager.set_product_state(message.from_user.id, {
            'state': ProductState.CONFIRMATION,
            'product_data': product_data
        })
    
    def _format_product_confirmation(self, product_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        text = "üéÇ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID:</b> {product_data.get('category_id', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product_data.get('short_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product_data.get('quantity', 0)}\n"
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product_data.get('price', 0)} —Ä—É–±.\n"
        text += f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {product_data.get('prepayment_conditions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üîÑ <b>–î–æ—Å—Ç—É–ø–µ–Ω:</b> {'–î–∞' if product_data.get('is_available', True) else '–ù–µ—Ç'}\n"
        text += f"üìè <b>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b> {product_data.get('measurement_unit', '—à—Ç')}\n\n"
        text += "‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>"
        return text
    
    def _create_cancel_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    
    def _create_skip_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard
    
    def _create_categories_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = self.db_manager.get_all_categories()
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        for category in categories:
            keyboard.add(types.KeyboardButton(category['name']))
        
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        return keyboard
    
    def _handle_product_confirmation(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        # print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
        # print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.states_manager.get_product_state(user_id)}")
        
        if message.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            product_data = self.states_manager.get_product_data(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ñ–æ—Ç–æ)
            product_id = self.db_manager.add_product_returning_id(product_data)
            
            if product_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID
                product_data['id'] = product_id
                self.states_manager.update_product_data(user_id, product_data)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ñ–æ—Ç–æ
                self.states_manager.set_product_state(user_id, {
                    'state': ProductState.ASKING_FOR_PHOTOS,
                    'product_data': product_data
                })
                
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(types.KeyboardButton("‚úÖ –î–∞"))
                keyboard.add(types.KeyboardButton("‚ùå –ù–µ—Ç"))
                
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –¢–æ–≤–∞—Ä <b>'{product_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    "üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞?",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=self._create_confirmation_keyboard()
                )
        
        elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.WAITING_NAME,
                'product_data': self.states_manager.get_product_data(user_id)
            })
            
            self.bot.send_message(
                message.chat.id,
                "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=self._create_cancel_keyboard()
            )
        
        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            self._cancel_product_creation_message(message)
        
        else:
            self.bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._create_confirmation_keyboard()
            )

    def _save_product(self, product_data: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ç–æ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            product_id = self.db_manager.add_product_returning_id(product_data)
            
            if not product_id:
                return False
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–æ—Ç–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø–∞–ø–∫—É —Ç–æ–≤–∞—Ä–∞
            if 'temp_photos' in product_data:
                for temp_photo_path in product_data['temp_photos']:
                    if os.path.exists(temp_photo_path):
                        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                        product_dir = os.path.join(self.photos_dir, str(product_id))
                        os.makedirs(product_dir, exist_ok=True)
                        
                        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª
                        filename = os.path.basename(temp_photo_path)
                        new_path = os.path.join(product_dir, filename)
                        os.rename(temp_photo_path, new_path)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
                        if product_data.get('cover_photo_path') == temp_photo_path:
                            product_data['cover_photo_path'] = new_path
                        
                        if 'additional_photos' in product_data:
                            for i, photo_path in enumerate(product_data['additional_photos']):
                                if photo_path == temp_photo_path:
                                    product_data['additional_photos'][i] = new_path
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ —Ñ–æ—Ç–æ
                return self.db_manager.update_product(product_id, product_data)
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ—Ç–æ: {e}")
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'temp_photos' in product_data:
                self._cleanup_temp_photos(product_data['temp_photos'])
            return False
    
    def _create_confirmation_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
        keyboard.add(types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        return keyboard

    def _cancel_product_creation_message(self, message: Message):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = message.from_user.id
        self.states_manager.clear_product_state(user_id)
        
        self.bot.send_message(
            message.chat.id,
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
        self.manage_products(message)

    
    def _add_category_start(self, callback: CallbackQuery):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not self._check_admin_access(callback=callback):
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.states_manager.set_management_state(callback.from_user.id, {
            'state': 'adding_category_name',
            'category_data': {}
        })
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            self.bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.bot.send_message(
            callback.message.chat.id,
            "üìÅ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            parse_mode='HTML',
            reply_markup=self._create_cancel_keyboard()
        )
        self.bot.answer_callback_query(callback.id)
    
    def _handle_category_name(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        
        if not user_state or user_state.get('state') != 'adding_category_name':
            return
        
        category_data = user_state.get('category_data', {})
        category_data['name'] = message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.states_manager.set_management_state(user_id, {
            'state': 'adding_category_description',
            'category_data': category_data
        })
        
        self.bot.send_message(
            message.chat.id,
            "üìÑ –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            parse_mode='HTML',
            reply_markup=self._create_skip_keyboard()
        )
    
    def _handle_category_description(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_id = message.from_user.id
        user_state = self.states_manager.get_management_state(user_id)
        
        if not user_state or user_state.get('state') != 'adding_category_description':
            return
        
        category_data = user_state.get('category_data', {})
        
        if message.text.lower() == '‚è≠Ô∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            category_data['description'] = ''
        else:
            category_data['description'] = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É
        if self._save_category(category_data):
            self.states_manager.clear_management_state(user_id)
            
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                parse_mode='HTML',
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
            self.manage_products(message)
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self._create_cancel_keyboard()
            )
    
    def _save_category(self, category_data: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ DatabaseManager –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            return self.db_manager.add_category(
                name=category_data['name'],
                description=category_data.get('description', '')
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return False
    
    def _cancel_category_creation(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        user_id = callback.from_user.id
        self.states_manager.clear_management_state(user_id)
        
        self.bot.send_message(
            callback.message.chat.id,
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        self.bot.answer_callback_query(callback.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
        self.manage_products(callback.message)
    
    def _edit_products(self, message: Message):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.bot.send_message(message.chat.id, "‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _view_products(self, message: Message):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not self._check_admin_access(message=message):
            return
        
        categories = self.db_manager.get_all_categories()
        
        if not categories:
            self.bot.send_message(
                message.chat.id,
                "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                reply_markup=self._create_back_to_products_keyboard()
            )
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        for category in categories:
            keyboard.add(types.InlineKeyboardButton(
                f"üìÅ {category['name']}",
                callback_data=f"view_category_{category['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥",
            callback_data="view_back_products"
        ))
        
        self.bot.send_message(
            message.chat.id,
            "üìÇ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _handle_view_category(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            category_id = int(callback.data.replace('view_category_', ''))
            products = self.db_manager.get_products_by_category(category_id)
            
            if not products:
                self.bot.send_message(
                    callback.message.chat.id,
                    "üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                    reply_markup=self._create_back_to_categories_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.db_manager.get_all_categories()
            category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            for product in products:
                status_emoji = "‚úÖ" if product['is_available'] else "‚ùå"
                keyboard.add(types.InlineKeyboardButton(
                    f"{status_emoji} {product['name']} - {product['price']} —Ä—É–±.",
                    callback_data=f"view_product_{product['id']}"
                ))
            
            keyboard.add(types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="view_back_categories"
            ))
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            self.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

    def _handle_view_product(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            product_id = int(callback.data.replace('view_product_', ''))
            product = self.db_manager.get_product_by_id(product_id)
            
            if not product:
                self.bot.answer_callback_query(callback.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product_text = self._format_product_details(product)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
            photos = self.db_manager.get_product_photos(product_id)
            main_photo_path = product['cover_photo_path']
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
                callback_data=f"view_back_to_category_{product['category_id']}"
            ))
            keyboard.add(types.InlineKeyboardButton(
                "üîô –í –º–µ–Ω—é",
                callback_data="view_back_products"
            ))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if main_photo_path and os.path.exists(main_photo_path):
                try:
                    with open(main_photo_path, 'rb') as photo:
                        self.bot.send_photo(
                            chat_id=callback.message.chat.id,
                            photo=photo,
                            caption=product_text,
                            parse_mode='HTML',
                            reply_markup=keyboard
                        )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    self.bot.send_message(
                        callback.message.chat.id,
                        product_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                self.bot.send_message(
                    callback.message.chat.id,
                    product_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if len(photos) > 1:
                additional_photos = [p for p in photos if p['photo_path'] != main_photo_path]
                if additional_photos:
                    media_group = []
                    for i, photo_info in enumerate(additional_photos[:9]):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
                        if os.path.exists(photo_info['photo_path']):
                            with open(photo_info['photo_path'], 'rb') as photo:
                                media_group.append(types.InputMediaPhoto(photo))
                    
                    if media_group:
                        try:
                            self.bot.send_media_group(
                                callback.message.chat.id,
                                media_group
                            )
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

    def _handle_view_back(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            data = callback.data
            
            if data == 'view_back_products':
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π
                self.manage_products(callback.message)
                
            elif data == 'view_back_categories':
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                self._view_products(callback.message)
                
            elif data.startswith('view_back_to_category_'):
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ–≤–∞—Ä–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_id = int(data.replace('view_back_to_category_', ''))
                self._show_products_in_category(callback.message, category_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–∞–¥: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞")

    def _show_products_in_category(self, message: Message, category_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        products = self.db_manager.get_products_by_category(category_id)
        categories = self.db_manager.get_all_categories()
        category_name = next((cat['name'] for cat in categories if cat['id'] == category_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        for product in products:
            status_emoji = "‚úÖ" if product['is_available'] else "‚ùå"
            keyboard.add(types.InlineKeyboardButton(
                f"{status_emoji} {product['name']} - {product['price']} —Ä—É–±.",
                callback_data=f"view_product_{product['id']}"
            ))
        
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="view_back_categories"
        ))
        
        self.bot.send_message(
            message.chat.id,
            f"üìÇ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    def _format_product_details(self, product: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        text = "üéÇ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
        text += f"üÜî <b>ID:</b> {product['id']}\n"
        text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
        text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category_name']}\n"
        text += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['short_description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üîÑ <b>–î–æ—Å—Ç—É–ø–µ–Ω:</b> {'‚úÖ –î–∞' if product['is_available'] else '‚ùå –ù–µ—Ç'}\n"
        text += f"üìè <b>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b> {product['measurement_unit']}\n"
        text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {product['quantity']}\n"
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.\n"
        text += f"üí≥ <b>–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:</b> {product['prepayment_conditions'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {product['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {product['updated_at'].strftime('%d.%m.%Y %H:%M') if product['updated_at'] else '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è'}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        photos = self.db_manager.get_product_photos(product['id'])
        if photos:
            main_photos = [p for p in photos if p['is_main']]
            text += f"\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b> {len(photos)} —à—Ç.\n"
            if main_photos:
                text += f"üìå <b>–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ:</b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
        else:
            text += "\nüì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b> –ù–µ—Ç\n"
        
        return text

    def _create_back_to_products_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            callback_data="view_back_products"
        ))
        return keyboard

    def _create_back_to_categories_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="view_back_categories"
        ))
        return keyboard
    
    def _delete_products(self, message: Message):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.bot.send_message(message.chat.id, "üö´ –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _cancel_product_creation(self, callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = callback.from_user.id
        self.states_manager.clear_product_state(user_id)
        
        self.bot.send_message(
            callback.message.chat.id,
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        self.bot.answer_callback_query(callback.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")