# product_management.py (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å)
import logging
logger = logging.getLogger(__name__)

import os
from telebot import types
from telebot.types import Message, CallbackQuery

from .admin_base import BaseAdminHandler
from .product_states import ProductState
from .product_constants import ProductConstants
from .product_creator import ProductCreator
# from .product_editor import ProductEditor  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
# from .product_viewer import ProductViewer  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
from .photo_manager import PhotoManager
from .category_manager import CategoryManager
from src.myconfbot.services.auth_service import AuthService

class ProductManagementHandler(BaseAdminHandler):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
    
    def __init__(self, bot, config, db_manager):
        super().__init__(bot, config, db_manager)
        self.photos_dir = ProductConstants.PHOTOS_DIR
        auth_service = AuthService(db_manager)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.creator = ProductCreator(bot, db_manager, self.states_manager, self.photos_dir)
        # self.editor = ProductEditor(bot, db_manager, self.states_manager, self.photos_dir)
        # self.viewer = ProductViewer(bot, db_manager, self.photos_dir)
        self.photo_manager = PhotoManager(bot, db_manager, self.photos_dir)
        self.category_manager = CategoryManager(bot, db_manager, self.states_manager, auth_service)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ
        try:
            os.makedirs(self.photos_dir, exist_ok=True)
            logger.info(f"‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.photos_dir} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.photos_dir}: {e}")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self._register_callbacks()
        self._register_state_handlers()
        self._register_photo_handlers()
        self._register_category_handlers()
    
    def _register_photo_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ç–æ"""
        # Callback'–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('photo_'))
        def handle_photo_callbacks(callback: CallbackQuery):
            self._handle_photo_callbacks(callback)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_product_state(message.from_user.id) == ProductState.ADDING_PHOTOS and
                message.content_type == 'photo'
            )
        )
        def handle_photo_add(message: Message):
            self._handle_photo_addition(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_product_state(message.from_user.id) == ProductState.ADDING_PHOTOS and
                message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ"
            )
        )
        def handle_photos_done(message: Message):
            self._handle_photos_done(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ–æ—Ç–æ
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_product_state(message.from_user.id) == ProductState.PHOTO_QUESTION
            )
        )
        def handle_photo_question(message: Message):
            self.creator.handle_photo_question(message)

    def _handle_photo_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ñ–æ—Ç–æ"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            data = callback.data
            
            if data.startswith('photo_manage_'):
                product_id = int(data.replace('photo_manage_', ''))
                self.photo_manager.show_photo_management(callback.message, product_id)
            
            elif data.startswith('photo_add_'):
                product_id = int(data.replace('photo_add_', ''))
                self._start_photo_addition(callback, product_id)
            
            elif data.startswith('photo_set_main_'):
                product_id = int(data.replace('photo_set_main_', ''))
                self.photo_manager.show_photos_for_selection(callback.message, product_id, "main")
            
            elif data.startswith('photo_delete_'):
                product_id = int(data.replace('photo_delete_', ''))
                self.photo_manager.show_photos_for_selection(callback.message, product_id, "delete")
            
            elif data.startswith('photo_back_'):
                product_id = int(data.replace('photo_back_', ''))
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
                self._show_edit_options(callback.message, product_id)
            
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ photo callback: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    def _start_photo_addition(self, callback: CallbackQuery, product_id: int):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
        self.states_manager.set_product_state(callback.from_user.id, {
            'state': ProductState.ADDING_PHOTOS,
            'product_data': {'id': product_id}
        })
        
        self.bot.send_message(
            callback.message.chat.id,
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:\n\n"
            "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
            reply_markup=self._create_photos_done_keyboard()
        )

    def _handle_photo_addition(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        product_id = product_data.get('id')
        
        if not product_id:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        success = self.photo_manager.handle_photo_addition(message, product_id)
        if success:
            photos = self.db_manager.get_product_photos(product_id)
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}"
            )
        else:
            self.bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")

    def _handle_photos_done(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = message.from_user.id
        product_data = self.states_manager.get_product_data(user_id)
        product_id = product_data.get('id')
        
        if product_id:
            photos = self.db_manager.get_product_photos(product_id)
            if photos:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
                main_photos = [p for p in photos if p['is_main']]
                if not main_photos and photos:
                    self.photo_manager.set_main_photo(product_id, 1)
            
            product = self.db_manager.get_product_by_id(product_id)
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–æ–≤–∞—Ä—É '{product['name']}'!",
                reply_markup=types.ReplyKeyboardRemove()
            )
        
        self.states_manager.clear_product_state(user_id)
        self.manage_products(message)

    def _create_photos_done_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ"))
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _register_category_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_management_state(message.from_user.id) is not None
            )
        )
        def handle_category_states(message: Message):
            self.category_manager.handle_category_states(message)
    
    def _register_callbacks(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–æ–≤"""
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))
        def handle_product_callbacks(callback: CallbackQuery):
            self._handle_main_callbacks(callback)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
        def handle_category_callbacks(callback: CallbackQuery):
            self.category_manager.handle_category_callbacks(callback)

    def _register_state_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_BASIC_INFO
        )
        def handle_basic_info(message: Message):
            self.creator.handle_basic_info(message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.WAITING_DETAILS
        )
        def handle_details(message: Message):
            self.creator.handle_details(message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        @self.bot.message_handler(
            func=lambda message: self.states_manager.get_product_state(message.from_user.id) == ProductState.CONFIRMATION
        )
        def handle_confirmation(message: Message):
            self._handle_confirmation(message)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
        @self.bot.message_handler(
            func=lambda message: (
                self.states_manager.get_product_state(message.from_user.id) is not None and
                message.text == "‚ùå –û—Ç–º–µ–Ω–∞"
            )
        )
        def handle_cancel(message: Message):
            self._cancel_creation(message)

    def _handle_main_callbacks(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö callback'–æ–≤"""
        if not self._check_admin_access(callback=callback):
            return
        
        try:
            data = callback.data
            
            if data == 'product_add':
                self.creator.start_creation(callback)
            elif data == 'product_edit':
                # self.editor.start_editing(callback)
                self.bot.send_message(callback.message.chat.id, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            elif data == 'product_view':
                # self.viewer.start_viewing(callback.message)
                self.bot.send_message(callback.message.chat.id, "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            elif data == 'product_delete':
                self._delete_products(callback.message)
                
            self.bot.answer_callback_query(callback.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ product callback: {e}")
            self.bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    def _handle_confirmation(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user_id = message.from_user.id
        
        if message.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            product_data = self.states_manager.get_product_data(user_id)
            product_id = self.db_manager.add_product_returning_id(product_data)
            
            if product_id:
                product_data['id'] = product_id
                self.states_manager.update_product_data(user_id, product_data)
                
                self.states_manager.set_product_state(user_id, {
                    'state': ProductState.PHOTO_MANAGEMENT,
                    'product_data': product_data
                })
                
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –¢–æ–≤–∞—Ä <b>'{product_data['name']}'</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    "üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞?",
                    parse_mode='HTML',
                    reply_markup=ProductConstants.create_yes_no_keyboard()
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.",
                    reply_markup=ProductConstants.create_confirmation_keyboard()
                )
        
        elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É
            self.states_manager.set_product_state(user_id, {
                'state': ProductState.WAITING_BASIC_INFO,
                'product_data': self.states_manager.get_product_data(user_id)
            })
            
            self.bot.send_message(
                message.chat.id,
                "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:",
                parse_mode='HTML',
                reply_markup=ProductConstants.create_cancel_keyboard()
            )
        
        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            self._cancel_creation(message)

    def manage_products(self, message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        if not self._check_admin_access(message=message):
            return
        
        self.bot.send_message(
            message.chat.id,
            ProductConstants.PRODUCT_MANAGEMENT_TITLE,
            reply_markup=ProductConstants.create_management_keyboard(),
            parse_mode='HTML'
        )

    def _cancel_creation(self, message: Message):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        user_id = message.from_user.id
        self.states_manager.clear_product_state(user_id)
        
        self.bot.send_message(
            message.chat.id,
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        self.manage_products(message)

    
    # def _show_category_management(self, callback: CallbackQuery):
    #     """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    #     keyboard = self.category_manager.create_management_keyboard()
        
    #     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    #     categories = self.db_manager.get_all_categories()
    #     stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\nüìÅ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
        
    #     for category in categories:
    #         product_count = len(self.db_manager.get_products_by_category(category['id']))
    #         stats_text += f"‚Ä¢ {category['name']}: {product_count} —Ç–æ–≤–∞—Ä–æ–≤\n"
        
    #     try:
    #         self.bot.edit_message_text(
    #             chat_id=callback.message.chat.id,
    #             message_id=callback.message.message_id,
    #             text=stats_text,
    #             parse_mode='HTML',
    #             reply_markup=keyboard
    #         )
    #     except:
    #         self.bot.send_message(
    #             callback.message.chat.id,
    #             stats_text,
    #             parse_mode='HTML',
    #             reply_markup=keyboard
    #         )

    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)

    def _delete_products(self, message: Message):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.bot.send_message(message.chat.id, "üö´ –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")