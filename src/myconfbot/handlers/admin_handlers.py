import telebot
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from src.myconfbot.config import Config
from src.myconfbot.utils.database import db_manager
from src.myconfbot.models import OrderStatus

def register_admin_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    config = Config.load()
    
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in config.admin_ids
    
    @bot.message_handler(commands=['orders'])
    def show_orders(message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        if not is_admin(message.from_user.id):
            return bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        
        orders = db_manager.get_active_orders()
        
        if not orders:
            return bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        
        response = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            response += f"üÜî –ó–∞–∫–∞–∑ #{order.id}\n"
            response += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.customer.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            response += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {order.status.value}\n"
            response += f"üìÖ –î–∞—Ç–∞: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            if order.ready_date:
                response += f"‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {order.ready_date.strftime('%d.%m.%Y %H:%M')}\n"
            response += "‚îÄ" * 20 + "\n"
        
        bot.send_message(message.chat.id, response)
    
    @bot.message_handler(commands=['admin', '–∞–¥–º–∏–Ω'])
    def admin_panel(message: Message):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not is_admin(message.from_user.id):
            return
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        )
        keyboard.add(
            InlineKeyboardButton("üéÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π", callback_data="admin_products"),
            InlineKeyboardButton("üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏", callback_data="admin_recipes")
        )
        
        bot.send_message(
            message.chat.id,
            "üë®‚Äçüç≥ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('order_status_'))
    def change_order_status(callback: CallbackQuery):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        if not is_admin(callback.from_user.id):
            return bot.answer_callback_query(callback.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        
        try:
            _, order_id, new_status = callback.data.split('_')
            order_id = int(order_id)
            
            status_enum = OrderStatus(new_status)
            if db_manager.update_order_status(order_id, status_enum):
                bot.answer_callback_query(callback.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_status}")
                bot.edit_message_text(
                    f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}",
                    callback.message.chat.id,
                    callback.message.message_id
                )
            else:
                bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
def notify_admins_new_order(bot, order):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    message = f"üéâ –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.id}\n\n"
    message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.customer.first_name}\n"
    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer.phone}\n"
    message += f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order.special_requests or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    message += f"üí∞ –°—É–º–º–∞: {order.total_amount} —Ä—É–±.\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"order_status_{order.id}_in_progress"),
        InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"order_status_{order.id}_cancelled")
    )
    
    for admin_id in config.admin_ids:
        try:
            bot.send_message(admin_id, message, reply_markup=keyboard)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")