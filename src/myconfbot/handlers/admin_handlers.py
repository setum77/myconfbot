import telebot
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from src.myconfbot.config import Config
from src.myconfbot.utils.database import db_manager
from src.myconfbot.models import OrderStatus
from src.myconfbot.utils.content_manager import content_manager

def register_admin_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    config = Config.load()
    
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in config.admin_ids
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callbacks(callback: CallbackQuery):
        if not is_admin(callback.from_user.id):
            return bot.answer_callback_query(callback.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        try:
            data = callback.data
            
            if data == 'admin_orders_active':
                show_active_orders(callback.message)
            elif data == 'admin_orders_all':
                show_all_orders(callback.message)
            elif data == 'admin_orders_change_status':
                show_change_status(callback.message)
            elif data == 'admin_orders_stats':
                show_orders_stats(callback.message)
            elif data == 'admin_stats_general':
                show_general_stats(callback.message)
            elif data == 'admin_stats_financial':
                show_financial_stats(callback.message)
            elif data == 'admin_stats_clients':
                show_clients_stats(callback.message)
            elif data == 'admin_stats_products':
                show_products_stats(callback.message)
            elif data == 'admin_manage_products':
                manage_products(callback.message)
            elif data == 'admin_manage_recipes':
                manage_recipes(callback.message)
            elif data == 'admin_manage_services':
                manage_services(callback.message)
            elif data == 'admin_manage_contacts':
                manage_contacts(callback.message)
            elif data == 'admin_manage_content':
                manage_content(callback.message)    
            elif data == 'admin_manage_admins':
                manage_admins(callback.message)
                
            bot.answer_callback_query(callback.id)
            
        except Exception as e:
            bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            logging.error(f"–û—à–∏–±–∫–∞ –≤ admin callback: {e}")
    
    def show_active_orders(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        orders = db_manager.get_orders_by_status([OrderStatus.NEW, OrderStatus.IN_PROGRESS])
        
        if not orders:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return
        
        response = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            response += f"üÜî #{order.id} | {order.status.value}\n"
            response += f"üë§ {order.customer.first_name}\n"
            response += f"üìû {order.customer.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            response += f"üìÖ {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            response += f"üí∞ {order.total_amount} —Ä—É–±.\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
            keyboard = InlineKeyboardMarkup()
            if order.status == OrderStatus.NEW:
                keyboard.add(InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç—É", callback_data=f"status_{order.id}_in_progress"))
            elif order.status == OrderStatus.IN_PROGRESS:
                keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"status_{order.id}_ready"))
            keyboard.add(InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order.id}_cancelled"))
            
            bot.send_message(message.chat.id, response, reply_markup=keyboard)
            response = ""
    
    def show_all_orders(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        bot.send_message(message.chat.id, "üìã –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_change_status(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        bot.send_message(message.chat.id, "üîÑ –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_orders_stats(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db_manager.get_orders_statistics()
        
        response = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
        response += f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}\n"
        response += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}\n"
        response += f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
        response += f"üÜï –ù–æ–≤—ã–µ: {stats['new']}\n"
        response += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']} —Ä—É–±.\n"
        
        bot.send_message(message.chat.id, response)
    
    def show_general_stats(message):
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        bot.send_message(message.chat.id, "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_financial_stats(message):
        """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        bot.send_message(message.chat.id, "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_clients_stats(message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        bot.send_message(message.chat.id, "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_products_stats(message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
        bot.send_message(message.chat.id, "üéÇ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def manage_products(message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π"""
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="product_add"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="product_edit")
        )
        keyboard.add(
            InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="product_view"),
            InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å", callback_data="product_delete")
        )
        
        bot.send_message(
            message.chat.id,
            "üéÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    def manage_recipes(message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"""
        bot.send_message(message.chat.id, "üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def manage_services(message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"""
        bot.send_message(message.chat.id, "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def manage_contacts(message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
        bot.send_message(message.chat.id, "üìû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def manage_admins(message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        bot.send_message(message.chat.id, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    @bot.callback_query_handler(func=lambda call: call.data.startswith('status_'))
    def change_order_status(callback: CallbackQuery):
        if not is_admin(callback.from_user.id):
            return bot.answer_callback_query(callback.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        
        try:
            _, order_id, new_status = callback.data.split('_')
            order_id = int(order_id)
            
            status_enum = OrderStatus(new_status)
            if db_manager.update_order_status(order_id, status_enum):
                bot.answer_callback_query(callback.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
                bot.edit_message_text(
                    f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}",
                    callback.message.chat.id,
                    callback.message.message_id
                )
            else:
                bot.answer_callback_query(callback.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            bot.answer_callback_query(callback.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç.–¥.)
    def manage_content(message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        keyboard = InlineKeyboardMarkup()
        
        files = content_manager.get_file_list()
        for filename in files:
            keyboard.add(InlineKeyboardButton(
                f"üìù {filename}", 
                callback_data=f"edit_content_{filename}"
            ))
        
        bot.send_message(
            message.chat.id,
            "üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('edit_content_'))
    def edit_content_callback(callback: CallbackQuery):
        if not is_admin(callback.from_user.id):
            return bot.answer_callback_query(callback.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        
        filename = callback.data.replace('edit_content_', '')
        current_content = content_manager.get_content(filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_states[callback.from_user.id] = {
            'state': 'editing_content',
            'filename': filename,
            'message_id': callback.message.message_id
        }
        
        bot.edit_message_text(
            f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {filename}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n\n{current_content}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            callback.message.chat.id,
            callback.message.message_id
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'editing_content')
    def handle_content_edit(message):
        user_id = message.from_user.id
        user_state = user_states.get(user_id, {})
        filename = user_state.get('filename')
        
        if filename and content_manager.update_content(filename, message.text):
            bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states.pop(user_id, None)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            manage_content(message)
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    @bot.callback_query_handler(func=lambda call: call.data.startswith('preview_content_'))
    def preview_content(callback: CallbackQuery):
        filename = callback.data.replace('preview_content_', '')
        content = content_manager.get_content(filename)
        
        bot.send_message(
            callback.message.chat.id,
            f"üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä {filename}:\n\n{content}",
            parse_mode='Markdown'  # –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        )

def notify_admins_new_order(bot, order):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    config = Config.load()
    
    message = f"üéâ –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.id}\n\n"
    message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.customer.first_name}\n"
    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer.phone}\n"
    message += f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order.special_requests or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    message += f"üí∞ –°—É–º–º–∞: {order.total_amount} —Ä—É–±.\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç—É", callback_data=f"status_{order.id}_in_progress"),
        InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"status_{order.id}_cancelled")
    )
    
    for admin_id in config.admin_ids:
        try:
            bot.send_message(admin_id, message, reply_markup=keyboard)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")