from telebot import types
from datetime import datetime
import logging
from src.myconfbot.models import Customer, Admin, CustomerCharacteristic
from src.myconfbot.utils.database import db_manager
from src.myconfbot.config import Config
from src.myconfbot.utils.content_manager import content_manager

def register_main_handlers(bot):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_states = {}
    
    def is_user_admin(telegram_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            config = Config.load()
            return telegram_id in config.admin_ids
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def show_main_menu(chat_id, is_admin=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        buttons = [
            'üéÇ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑',
            'üìñ –†–µ—Ü–µ–ø—Ç—ã', 
            'üíº –£—Å–ª—É–≥–∏',
            'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã',
            'üê± –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if is_admin:
            buttons.extend([
                'üì¶ –ó–∞–∫–∞–∑—ã',
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
            ])
        
        markup.add(*[types.KeyboardButton(btn) for btn in buttons])
        
        # welcome_text = "üéÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" # –ó–∞ –Ω–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç—å—é –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª
        # bot.send_message(chat_id, welcome_text, reply_markup=markup)
        bot.send_message(chat_id, "üéÇ ", reply_markup=markup)
    
    @bot.message_handler(commands=['start', 'help'])
    def handle_start(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        first_name = message.from_user.first_name
        username = message.from_user.username
        
        try:
            is_admin = is_user_admin(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            customer = db_manager.get_customer_by_telegram_id(user_id)
            admin = db_manager.get_admin_by_telegram_id(user_id) if is_admin else None
            
            if customer or admin:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
                name = admin.first_name if admin else customer.first_name
                status = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if admin else "–∫–ª–∏–µ–Ω—Ç"
                
                bot.send_message(
                    chat_id, 
                    f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üëã\n"
                    f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å. –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}!"
                )
                show_main_menu(chat_id, is_admin)
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                bot.send_message(
                    chat_id, 
                    "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!"
                )
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_states[user_id] = {
                    'state': 'awaiting_name',
                    'is_admin': is_admin,
                    'username': username
                }
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            welcome_text = content_manager.get_content('welcome.md')
            if not welcome_text:
                welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\\! –Ø –±–æ—Ç\\-–ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞\\!"
            
            try:
                bot.send_message(chat_id, welcome_text, parse_mode='MarkdownV2')
            except Exception as e:
                if "400" in str(e) and "parse entities" in str(e):
                    # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                    error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                    bot.send_message(chat_id, error_msg)
                    bot.send_message(chat_id, welcome_text)  # plain text
                    logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_name')
    def handle_name_input(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        name = message.text.strip()
        
        user_state = user_states.get(user_id, {})
        is_admin = user_state.get('is_admin', False)
        username = user_state.get('username')
        
        if len(name) < 2:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
            return
        
        try:
            if is_admin:
                # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                db_manager.add_admin(
                    telegram_id=user_id,
                    first_name=name,
                    username=username
                )
                user_states[user_id]['state'] = 'awaiting_phone'
                user_states[user_id]['name'] = name
                bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
            else:
                # –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                db_manager.add_customer(
                    telegram_id=user_id,
                    first_name=name,
                    username=username
                )
                user_states.pop(user_id, None)
                bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä")
                show_main_menu(chat_id, False)
                
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_phone')
    def handle_phone_input(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        phone = message.text.strip()
        
        user_state = user_states.get(user_id, {})
        name = user_state.get('name')
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not any(char.isdigit() for char in phone) or len(phone) < 5:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
        
        try:
            user_states[user_id]['state'] = 'awaiting_address'
            user_states[user_id]['phone'] = phone
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
                
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_address')
    def handle_address_input(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        address = message.text.strip()
        
        user_state = user_states.get(user_id, {})
        name = user_state.get('name')
        phone = user_state.get('phone')
        username = user_state.get('username')
        
        if len(address) < 5:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            db_manager.update_admin_info(user_id, phone, address)
            user_states.pop(user_id, None)
            
            bot.send_message(
                chat_id, 
                f"–û—Ç–ª–∏—á–Ω–æ, {name}! üëë\n"
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π!"
            )
            show_main_menu(chat_id, True)
                
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
    
    @bot.message_handler(commands=['menu'])
    def show_menu(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = message.from_user.id
        is_admin = is_user_admin(user_id)
        show_main_menu(message.chat.id, is_admin)
    
    @bot.message_handler(func=lambda message: message.text == 'üê± –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    def show_my_info(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        is_admin = is_user_admin(user_id)
        user_info = None
        
        try:
            if is_admin:
                user_info = db_manager.get_admin_by_telegram_id(user_id)
            else:
                user_info = db_manager.get_customer_by_telegram_id(user_id)
            
            if user_info:
                response = f"üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                response += f"üìõ –ò–º—è: {user_info.first_name}\n"
                if user_info.username:
                    response += f"üì± Username: @{user_info.username}\n"
                if is_admin and user_info.phone:
                    response += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.phone}\n"
                if is_admin and user_info.address:
                    response += f"üìç –ê–¥—Ä–µ—Å: {user_info.address}\n"
                response += f"üé≠ –°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ö–ª–∏–µ–Ω—Ç'}\n"
                
                bot.send_message(chat_id, response)
            else:
                bot.send_message(chat_id, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    @bot.message_handler(func=lambda message: message.text in ['üì¶ –ó–∞–∫–∞–∑—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'])
    def handle_admin_buttons(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if not is_user_admin(user_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if message.text == 'üì¶ –ó–∞–∫–∞–∑—ã':
            show_orders_management(message)
        elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            show_statistics(message)
        elif message.text == 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
            show_management_panel(message)
    
    def show_orders_management(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_active"),
            types.InlineKeyboardButton("üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_all")
        )
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin_orders_change_status"),
            types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_stats")
        )
        
        bot.send_message(
            message.chat.id,
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    def show_statistics(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_general"),
            types.InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è", callback_data="admin_stats_financial")
        )
        keyboard.add(
            types.InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è", callback_data="admin_stats_clients"),
            types.InlineKeyboardButton("üéÇ –¢–æ–≤–∞—Ä–Ω–∞—è", callback_data="admin_stats_products")
        )
        
        bot.send_message(
            message.chat.id,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
    
    def show_management_panel(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è", callback_data="admin_manage_products"),
            types.InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç—ã", callback_data="admin_manage_recipes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏", callback_data="admin_manage_services"),
            types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="admin_manage_contacts")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_manage_content"),
            types.InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_manage_admins")
        )
        
        bot.send_message(
            message.chat.id,
            "üè™ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    @bot.message_handler(func=lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    def send_contacts(message):
        # contacts_text = """
        # üìç –ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è, 15
        # üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
        # üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00
        # üìß Email: master@myconfbot.ru
        
        # –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –∑–∞–∫–∞–∑–∞–º! üéÇ
        # """
        # bot.send_message(message.chat.id, contacts_text)
        contacts_text = content_manager.get_content('contacts.md')
        if not contacts_text:
            contacts_text = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                
        try:
            bot.send_message(message.chat.id, contacts_text, parse_mode='MarkdownV2')
        except Exception as e:
            if "400" in str(e) and "parse entities" in str(e):
                # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                bot.send_message(message.chat.id, error_msg)
                bot.send_message(message.chat.id, contacts_text)  # plain text
                logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    @bot.message_handler(func=lambda message: message.text == 'üíº –£—Å–ª—É–≥–∏')
    def send_services(message):
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–ø–∏—Å—ã–≤–∞—é—â–µ–≥–æ —É—Å–ª—É–≥–∏
        services_text = content_manager.get_content('services.md')
        if not services_text:
            services_text = "üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                
        try:
            bot.send_message(message.chat.id, services_text, parse_mode='MarkdownV2')
        except Exception as e:
            if "400" in str(e) and "parse entities" in str(e):
                # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                bot.send_message(message.chat.id, error_msg)
                bot.send_message(message.chat.id, services_text)  # plain text
                logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    @bot.message_handler(func=lambda message: message.text == 'üìñ –†–µ—Ü–µ–ø—Ç—ã')
    def show_recipes(message):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üç∞ –¢–æ—Ä—Ç—ã", callback_data="recipes_cakes"),
            types.InlineKeyboardButton("üßÅ –ö–∞–ø–∫–µ–π–∫–∏", callback_data="recipes_cupcakes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üç™ –ü–µ—á–µ–Ω—å–µ", callback_data="recipes_cookies"),
            types.InlineKeyboardButton("üéÇ –°–µ–∑–æ–Ω–Ω—ã–µ", callback_data="recipes_seasonal")
        )
        
        bot.send_message(
            message.chat.id,
            "üìñ –ù–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )