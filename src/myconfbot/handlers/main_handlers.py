import os
import logging
from PIL import Image
import io
from telebot import types
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

#from src.myconfbot.models import Customer, Admin, CustomerCharacteristic
from src.myconfbot.models import Base, Order, Product, Category, OrderStatus, User
from src.myconfbot.utils.database import db_manager
from src.myconfbot.config import Config
from src.myconfbot.utils.content_manager import content_manager

def register_main_handlers(bot):
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    os.makedirs('data/users', exist_ok=True)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_states = {}
    
    def is_user_admin(telegram_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # try:
        #     config = Config.load()
        #     return telegram_id in config.admin_ids
        # except Exception as e:
        #     logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        #     return False
        try:
            user = db_manager.get_user_by_telegram_id(telegram_id)
            if user:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –î–û –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
                #print(f"DEBUG: User {telegram_id} is_admin = {user.is_admin}") # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                return user.is_admin
            #print(f"DEBUG: User {telegram_id} not found") # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def show_main_menu(chat_id, is_admin=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        buttons = [
            'üéÇ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑',
            'üìñ –†–µ—Ü–µ–ø—Ç—ã', 
            'üíº –£—Å–ª—É–≥–∏',
            'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã',
            'üê± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if is_admin:
            buttons.extend([
                'üì¶ –ó–∞–∫–∞–∑—ã',
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
            ])
        
        markup.add(*[types.KeyboardButton(btn) for btn in buttons])
        
        # welcome_text = "üéÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" # –ó–∞ –Ω–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç—å—é –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª
        # bot.send_message(chat_id, welcome_text, reply_markup=markup)
        # bot.send_message(chat_id, "üéÇ ", reply_markup=markup)
        return markup
    
    @bot.message_handler(commands=['start', 'help'])
    def handle_start(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        full_name = message.from_user.first_name
        username = message.from_user.username
        
        try:
            config = Config.load()
            config_is_admin = user_id in config.admin_ids
            
            #is_admin = is_user_admin(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            # customer = db_manager.get_customer_by_telegram_id(user_id)
            # admin = db_manager.get_admin_by_telegram_id(user_id) if is_admin else None
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            user = db_manager.get_user_by_telegram_id(user_id)

            if user:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –î–û –ª—é–±—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Å—Å–∏–µ–π
                user_name = user.full_name
                user_is_admin = user.is_admin
                
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
                status = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.is_admin else "–∫–ª–∏–µ–Ω—Ç"
                bot.send_message(chat_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üëã\n–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å. –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}!")
                #show_main_menu(chat_id, user.is_admin)
                bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=show_main_menu(chat_id, user_is_admin))
            else:                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_manager.add_user(
                    telegram_id=user_id,
                    full_name=full_name,
                    telegram_username=username,
                    is_admin=config_is_admin
                )

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db_manager.get_user_by_telegram_id(user_id)
                
                if user:
                    if config_is_admin:
                        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë")
                        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
                        user_states[user_id] = {'state': 'awaiting_phone'}
                    else:
                        bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {full_name}! üòä")
                        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=show_main_menu(chat_id, False))
                else:
                    bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            welcome_text = content_manager.get_content('welcome.md')
            if not welcome_text:
                welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\\! –Ø –±–æ—Ç\\-–ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞\\!"
            
            try:
                bot.send_message(chat_id, welcome_text, parse_mode='MarkdownV2')
            except Exception as e:
                if "400" in str(e) and "parse entities" in str(e):
                    # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                    error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                    bot.send_message(chat_id, error_msg)
                    bot.send_message(chat_id, welcome_text)  # plain text
                    logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start: {e}")
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_name')
    def handle_name_input(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        name = message.text.strip()
        
        user_state = user_states.get(user_id, {})
        is_admin = user_state.get('is_admin', False)
        username = user_state.get('username')
        
        if len(name) < 2:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
            return
        
        try:
            
            db_manager.add_user(
                telegram_id=user_id,
                full_name=name,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º full_name –≤–º–µ—Å—Ç–æ first_name
                telegram_username=username,
                is_admin=is_admin
            )
            # if is_admin:
            #     # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            #     db_manager.add_admin(
            #         telegram_id=user_id,
            #         first_name=name,
            #         username=username
            #     )
            #     user_states[user_id]['state'] = 'awaiting_phone'
            #     user_states[user_id]['name'] = name
            #     bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:")
            # else:
            #     # –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            #     db_manager.add_customer(
            #         telegram_id=user_id,
            #         first_name=name,
            #         username=username
            #     )
            user_states.pop(user_id, None)
            bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä")
            # show_main_menu(chat_id, False) # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å—Ç–≥—Ä–µ
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=show_main_menu(chat_id, False))
                
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_phone')
    def handle_phone_input(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        phone = message.text.strip()
        
        user_state = user_states.get(user_id, {})
        name = user_state.get('name')
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not any(char.isdigit() for char in phone) or len(phone) < 5:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return
        
        try:
            user_states[user_id]['state'] = 'awaiting_address'
            user_states[user_id]['phone'] = phone
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
                
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
    
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'awaiting_address')
    def handle_address_input(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        address = message.text.strip()
        
        user_state = user_states.get(user_id, {})
        name = user_state.get('name')
        phone = user_state.get('phone')
        username = user_state.get('username')
        
        if len(address) < 5:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            db_manager.update_user_info(user_id, phone=phone, address=address)
            user_states.pop(user_id, None)
            
            bot.send_message(
                chat_id, 
                f"–û—Ç–ª–∏—á–Ω–æ, {name}! üëë\n"
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π!"
            )
            # show_main_menu(chat_id, True) # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å—Ç–≥—Ä–µ
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=show_main_menu(chat_id, True))
                
        except Exception as e:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
    
    @bot.message_handler(commands=['menu'])
    def show_menu(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = message.from_user.id
        is_admin = is_user_admin(user_id)
        #show_main_menu(message.chat.id, is_admin) # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å—Ç–≥—Ä–µ
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=show_main_menu(message.chat.id, is_admin))
    
    @bot.message_handler(func=lambda message: message.text == 'üê± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    def show_my_profile(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        try:
            user_info = db_manager.get_user_by_telegram_id(user_id)

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            # print(f"DEBUG: User ID {user_id}")
            # print(f"DEBUG: User found: {user_info is not None}")
            # if user_info:
            #     print(f"DEBUG: User data: {user_info.__dict__}")
            
            # if not user_info:
            #     bot.send_message(chat_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            #     return            

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            profile_text += f"üìõ *–ò–º—è:* {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            profile_text += f"üì± *Username:* @{user_info.telegram_username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            profile_text += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_info.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            profile_text += f"üìç *–ê–¥—Ä–µ—Å:* {user_info.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            profile_text += f"üé≠ *–°—Ç–∞—Ç—É—Å:* {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user_info.is_admin else 'üë§ –ö–ª–∏–µ–Ω—Ç'}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_profile_name"),
                types.InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_profile_phone")
            )
            keyboard.add(
                types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="edit_profile_address"),
                types.InlineKeyboardButton("üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_profile_photo")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_info.photo_path and os.path.exists(user_info.photo_path):
                try:
                    with open(user_info.photo_path, 'rb') as photo:
                        bot.send_photo(chat_id, photo, caption=profile_text, 
                                    parse_mode='Markdown', reply_markup=keyboard)
                except Exception as e:
                    bot.send_message(chat_id, profile_text, parse_mode='Markdown', reply_markup=keyboard)
                    bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º placeholder –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
                placeholder_text = "üñºÔ∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                bot.send_message(chat_id, profile_text, parse_mode='Markdown', reply_markup=keyboard)
                bot.send_message(chat_id, placeholder_text)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
                
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    @bot.message_handler(func=lambda message: message.text in ['üì¶ –ó–∞–∫–∞–∑—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'])
    def handle_admin_buttons(message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if not is_user_admin(user_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if message.text == 'üì¶ –ó–∞–∫–∞–∑—ã':
            show_orders_management(message)
        elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            show_statistics(message)
        elif message.text == 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
            show_management_panel(message)
    
    def show_orders_management(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_active"),
            types.InlineKeyboardButton("üìä –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_all")
        )
        keyboard.add(
            types.InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin_orders_change_status"),
            types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_stats")
        )
        
        bot.send_message(
            message.chat.id,
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    def show_statistics(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_general"),
            types.InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è", callback_data="admin_stats_financial")
        )
        keyboard.add(
            types.InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è", callback_data="admin_stats_clients"),
            types.InlineKeyboardButton("üéÇ –¢–æ–≤–∞—Ä–Ω–∞—è", callback_data="admin_stats_products")
        )
        
        bot.send_message(
            message.chat.id,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
    
    def show_management_panel(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üéÇ –ü—Ä–æ–¥—É–∫—Ü–∏—è", callback_data="admin_manage_products"),
            types.InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç—ã", callback_data="admin_manage_recipes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏", callback_data="admin_manage_services"),
            types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="admin_manage_contacts")
        )
        keyboard.add(
            types.InlineKeyboardButton("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_manage_content"),
            types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_manage_users")
        )
        
        bot.send_message(
            message.chat.id,
            "üè™ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    @bot.message_handler(func=lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    def send_contacts(message):
        # contacts_text = """
        # üìç –ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è, 15
        # üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
        # üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00
        # üìß Email: master@myconfbot.ru
        
        # –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –∑–∞–∫–∞–∑–∞–º! üéÇ
        # """
        # bot.send_message(message.chat.id, contacts_text)
        contacts_text = content_manager.get_content('contacts.md')
        if not contacts_text:
            contacts_text = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                
        try:
            bot.send_message(message.chat.id, contacts_text, parse_mode='MarkdownV2')
        except Exception as e:
            if "400" in str(e) and "parse entities" in str(e):
                # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                bot.send_message(message.chat.id, error_msg)
                bot.send_message(message.chat.id, contacts_text)  # plain text
                logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    @bot.message_handler(func=lambda message: message.text == 'üíº –£—Å–ª—É–≥–∏')
    def send_services(message):
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–ø–∏—Å—ã–≤–∞—é—â–µ–≥–æ —É—Å–ª—É–≥–∏
        services_text = content_manager.get_content('services.md')
        if not services_text:
            services_text = "üéÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                
        try:
            bot.send_message(message.chat.id, services_text, parse_mode='MarkdownV2')
        except Exception as e:
            if "400" in str(e) and "parse entities" in str(e):
                # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
                bot.send_message(message.chat.id, error_msg)
                bot.send_message(message.chat.id, services_text)  # plain text
                logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            else:
                # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    @bot.message_handler(func=lambda message: message.text == 'üìñ –†–µ—Ü–µ–ø—Ç—ã')
    def show_recipes(message):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üç∞ –¢–æ—Ä—Ç—ã", callback_data="recipes_cakes"),
            types.InlineKeyboardButton("üßÅ –ö–∞–ø–∫–µ–π–∫–∏", callback_data="recipes_cupcakes")
        )
        keyboard.add(
            types.InlineKeyboardButton("üç™ –ü–µ—á–µ–Ω—å–µ", callback_data="recipes_cookies"),
            types.InlineKeyboardButton("üéÇ –°–µ–∑–æ–Ω–Ω—ã–µ", callback_data="recipes_seasonal")
        )
        
        bot.send_message(
            message.chat.id,
            "üìñ –ù–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith('edit_profile_'))
    def handle_profile_edit(callback: CallbackQuery):
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        action = callback.data.replace('edit_profile_', '')
        
        user_states[user_id] = {
            'state': f'editing_{action}',
            'message_id': callback.message.message_id
        }
        
        if action == 'name':
            bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        elif action == 'phone':
            bot.send_message(chat_id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
        elif action == 'address':
            bot.send_message(chat_id, "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        elif action == 'photo':
            bot.send_message(chat_id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
        
        bot.answer_callback_query(callback.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
    @bot.message_handler(content_types=['photo'])
    def handle_profile_photo(message: Message):
        user_id = message.from_user.id
        
        if user_states.get(user_id, {}).get('state') != 'editing_photo':
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            compressed_image = compress_image(downloaded_file)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_photo_dir = f"data/users/{user_id}"
            os.makedirs(user_photo_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ
            photo_path = f"{user_photo_dir}/profile.jpg"
            with open(photo_path, 'wb') as new_file:
                new_file.write(compressed_image)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            file_size_kb = len(compressed_image) / 1024

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
            db_manager.update_user_info(user_id, photo_path=photo_path)
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states.pop(user_id, None)
            
            bot.send_message(message.chat.id, f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –†–∞–∑–º–µ—Ä: {file_size_kb:.1f} KB")
            show_my_profile(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state', '').startswith('editing_'))
    def handle_profile_text_edit(message: Message):
        user_id = message.from_user.id
        user_state = user_states.get(user_id, {})
        state = user_state.get('state', '')
        
        if not state.startswith('editing_'):
            return
        
        field = state.replace('editing_', '')
        new_value = message.text.strip()
        
        try:
            if field == 'name':
                if len(new_value) < 2:
                    bot.send_message(message.chat.id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
                    return
                db_manager.update_user_info(user_id, full_name=new_value)
                
            elif field == 'phone':
                if not any(char.isdigit() for char in new_value) or len(new_value) < 5:
                    bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
                    return
                db_manager.update_user_info(user_id, phone=new_value)
                
            elif field == 'address':
                if len(new_value) < 5:
                    bot.send_message(message.chat.id, "‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤")
                    return
                db_manager.update_user_info(user_id, address=new_value)
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_states.pop(user_id, None)
            
            bot.send_message(message.chat.id, f"‚úÖ {['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å'][['name', 'phone', 'address'].index(field)]} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            show_my_profile(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field}: {e}")
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field}")

    # –ù–∏–∂–µ –µ—â–µ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –±–æ–ª–µ–µ 500 –Ω–∞ –≤—ã—Ö–æ–¥–µ. –ü–æ–∫–∞ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –∑–∞–∫–æ–º–µ–Ω—Ç–∏–ª
    # def compress_image(image_data, max_size=(800, 800), quality=85):
    #     """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    #     try:
    #         # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    #         image = Image.open(io.BytesIO(image_data))
            
    #         # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è JPEG)
    #         if image.mode in ('RGBA', 'P'):
    #             image = image.convert('RGB')
            
    #         # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    #         image.thumbnail(max_size, Image.Resampling.LANCZOS)
            
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä —Å —Å–∂–∞—Ç–∏–µ–º
    #         output_buffer = io.BytesIO()
    #         image.save(output_buffer, format='JPEG', quality=quality, optimize=True)
            
    #         return output_buffer.getvalue()
            
    #     except Exception as e:
    #         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    #         return image_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å

    def compress_image(image_data, max_size=(800, 800), quality=85, max_file_size_kb=500):
        """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç—Ç–∞–ø–∞–º–∏ —Å–∂–∞—Ç–∏—è"""
        try:
            image = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'P'):
                image = image.convert('RGB')
            
            # –ü–µ—Ä–≤–æ–µ —Å–∂–∞—Ç–∏–µ
            image.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            current_quality = quality
            output_buffer = io.BytesIO()
            
            for attempt in range(5):  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫
                output_buffer.seek(0)
                output_buffer.truncate(0)
                
                image.save(output_buffer, format='JPEG', quality=current_quality, optimize=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                if len(output_buffer.getvalue()) <= max_file_size_kb * 1024:
                    break
                    
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                current_quality = max(40, current_quality - 15)
            
            return output_buffer.getvalue()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image_data