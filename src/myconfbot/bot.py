import os
import sys
import time
import asyncio
import logging
import telebot

from src.myconfbot.config import Config
from src.myconfbot.utils.database import db_manager
# from src.myconfbot.handlers import register_handlers
from src.myconfbot.handlers import (
    register_admin_handlers,
    register_main_handlers,
    register_order_handlers,
    register_recipe_handlers
)

class ConfectioneryBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Config
        self.logger = Config.setup_logging()
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = Config.load()
            self.logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            self.token = self.config.bot_token
            self.logger.info("‚úì –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db = db_manager
            self.logger.info(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.config.db.url}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –ë–î
            if self.config.db.use_postgres:
                self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
            else:
                self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite")
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            self.bot = telebot.TeleBot(
                self.token,
                parse_mode='HTML',
                threaded=True
            )
            self.logger.info("‚úì –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.register_handlers()
            self.logger.info("‚úì –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            self.logger.info("‚úì –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except ValueError as e:
            self.logger.error("‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)
            raise
        except Exception as e:
            self.logger.critical("‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %s", e, exc_info=True)
            raise

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        try:
            print(f"‚úÖ Admin IDs: {self.config.admin_ids}")
            print(f"‚úÖ Use PostgreSQL: {self.config.db.use_postgres}")
            if self.config.db.use_postgres:
                print(f"‚úÖ DB Host: {self.config.db.host}")
                print(f"‚úÖ DB Name: {self.config.db.name}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Config error: {e}")
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        register_main_handlers(self.bot)
        register_admin_handlers(self.bot) 
        register_order_handlers(self.bot)
        register_recipe_handlers(self.bot)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            self.logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            if not self.db.test_connection():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                return
            
            print("üéÇ –ë–æ—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω...")
            print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'PostgreSQL' if self.config.db.use_postgres else 'SQLite'}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ c –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            while True:
                try:
                    self.bot.infinity_polling(
                        timeout=30,
                        long_polling_timeout=30,
                        logger_level=logging.INFO,
                        skip_pending=True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º pending updates –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                    )
                except ConnectionError as e:
                    self.logger.warning(f"üì° –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:  {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
            
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")   
            
        except Exception as e:
            self.logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
        finally:
            self.logger.info("üîö –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        bot = ConfectioneryBot()
        bot.run()
    except Exception as e:
        logging.critical("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: %s", e, exc_info=True)
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def handle_uncaught_exception(exc_type, exc_value, exc_traceback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if issubclass(exc_type, KeyboardInterrupt):
        # –î–ª—è KeyboardInterrupt –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    logging.critical("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", exc_info=(exc_type, exc_value, exc_traceback))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
import sys
sys.excepthook = handle_uncaught_exception

if __name__ == "__main__":
    main()