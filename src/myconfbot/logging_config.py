# src/myconfbot/logging_config.py

import logging
import logging.handlers
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
LOG_FILE_PATH = os.getenv("LOG_FILE_PATH", "logs/myconfbot.log")
LOG_FILE_PATH = Path(LOG_FILE_PATH)
LOG_FILE_PATH.parent.mkdir(parents=True, exist_ok=True)
# LOG_DIR = Path(__file__).parent.parent.parent / "logs"
# LOG_DIR.mkdir(exist_ok=True)

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,  # üî¥ –í–ê–ñ–ù–û: –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–≥–µ—Ä—ã!
    "formatters": {
        "detailed": {
            "format": "[%(asctime)s] %(levelname)-8s %(name)-20s %(filename)s:%(lineno)d | %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {
            "format": "%(levelname)s | %(name)s | %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": LOG_LEVEL,
            "formatter": "simple",
            "stream": "ext://sys.stdout",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "DEBUG",
            "formatter": "detailed",
            "filename": LOG_FILE_PATH,
            "maxBytes": 10 * 1024 * 1024,  # 10 MB
            "backupCount": 5,
            "encoding": "utf-8",
        },
    },
    "root": {
        "level": LOG_LEVEL,
        "handlers": ["console", "file"],
    },
    "loggers": {
        "aiogram": {
            "level": "DEBUG",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        "sqlalchemy": {
            "level": "DEBUG",
            "handlers": ["console", "file"],
            "propagate": True,
        },
        "httpx": {
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        # üî¥ –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º DEBUG-–ª–æ–≥–∏ urllib3 (–∫–æ—Ç–æ—Ä—ã–µ —Ç–≤–æ—Ä—è—Ç –±–µ—Å–ø–æ—Ä—è–¥–æ–∫)
        "urllib3.connectionpool": {
            "level": "WARNING",  # ‚úÖ –¢–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ ‚Äî –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏–º DEBUG
            "handlers": ["console", "file"],
            "propagate": False,
        },
        # üî¥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ aiogram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç httpx (–≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö), –Ω–æ urllib3 –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å
        "urllib3.util.retry": {
            "level": "WARNING",
            "handlers": ["console", "file"],
            "propagate": False,
        },
    },
}


def setup_logging():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –û–î–ò–ù –†–ê–ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logging.config.dictConfig(LOG_CONFIG)


# üî¥ –í–ê–ñ–ù–û: –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ `uvicorn`, `gunicorn` –∏–ª–∏ –¥—Ä—É–≥–æ–π ASGI-—Å–µ—Ä–≤–µ—Ä ‚Äî
# –≤—ã–∑—ã–≤–∞–π—Ç–µ setup_logging() –≤ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞, –∞ –Ω–µ –≤ –º–æ–¥—É–ª–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.